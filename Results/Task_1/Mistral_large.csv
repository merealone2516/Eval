diff,message,Mistral-large
"diff --git a/src/main/java/org/junit/internal/runners/CompositeRunner.java b/src/main/java/org/junit/internal/runners/CompositeRunner.java
index 5ad5c3946e04..531df52b7bef 100644
--- a/src/main/java/org/junit/internal/runners/CompositeRunner.java
+++ b/src/main/java/org/junit/internal/runners/CompositeRunner.java
@@ -6,11 +6,8 @@
 
 import org.junit.runner.Description;
 import org.junit.runner.Runner;
-import org.junit.runner.manipulation.Filter;
 import org.junit.runner.manipulation.Filterable;
-import org.junit.runner.manipulation.NoTestsRemainException;
 import org.junit.runner.manipulation.Sortable;
-import org.junit.runner.manipulation.Sorter;
 import org.junit.runner.notification.RunNotifier;
 
 public class CompositeRunner extends ParentRunner<Runner> implements Filterable, Sortable {
@@ -54,17 +51,4 @@ protected String getName() {
 	protected Annotation[] classAnnotations() {
 		return new Annotation[0];
 	}
-
-	
-	@Override
-	protected Runner filterChild(Runner child, Filter filter) throws NoTestsRemainException {
-		Filter.apply(filter, child);
-		return child;
-	}
-	
-	@Override
-	protected Runner sortChild(Runner child, Sorter sorter) {
-		Sorter.apply(sorter, child);
-		return child;
-	}
 }
diff --git a/src/main/java/org/junit/internal/runners/ParentRunner.java b/src/main/java/org/junit/internal/runners/ParentRunner.java
index 9001b1521135..9d698d2ba7ca 100644
--- a/src/main/java/org/junit/internal/runners/ParentRunner.java
+++ b/src/main/java/org/junit/internal/runners/ParentRunner.java
@@ -63,17 +63,6 @@ protected Statement classBlock(final RunNotifier notifier) {
 		return statement;
 	}
 
-	protected T sortChild(T child, Sorter sorter) {
-		return child;
-	}
-
-	/**
-	 * @throws NoTestsRemainException 
-	 */
-	protected T filterChild(T child, Filter filter) throws NoTestsRemainException {
-		return child;
-	}
-
 	protected Annotation[] classAnnotations() {
 		return fTestClass.getJavaClass().getAnnotations();
 	}
@@ -147,7 +136,7 @@ private List<T> computeFilteredChildren() {
 		for (T each : getChildren())
 			if (shouldRun(each)) {
 				try {
-					filtered.add(sortChild(filterChild(each, fFilter), fSorter));
+					filtered.add(sortChild(filterChild(each)));
 				} catch (NoTestsRemainException e) {
 					// don't add it
 				}
@@ -156,6 +145,18 @@ private List<T> computeFilteredChildren() {
 			Collections.sort(filtered, comparator());
 		return filtered;
 	}
+	
+	private T sortChild(T child) {
+		if (fSorter != null)
+			fSorter.apply(child);
+		return child;
+	}
+
+	private T filterChild(T child) throws NoTestsRemainException {
+		if (fFilter != null)
+			fFilter.apply(child);
+		return child;
+	}
 
 	private boolean shouldRun(T each) {
 		return fFilter == null || fFilter.shouldRun(describeChild(each));
diff --git a/src/main/java/org/junit/runner/manipulation/Filter.java b/src/main/java/org/junit/runner/manipulation/Filter.java
index fb007c317300..31a6a85581e3 100644
--- a/src/main/java/org/junit/runner/manipulation/Filter.java
+++ b/src/main/java/org/junit/runner/manipulation/Filter.java
@@ -2,7 +2,6 @@
 
 import org.junit.runner.Description;
 import org.junit.runner.Request;
-import org.junit.runner.Runner;
 
 /**
  * The canonical case of filtering is when you want to run a single test method in a class. Rather
@@ -14,11 +13,6 @@
  * {@link org.junit.runner.RunWith}.
  */
 public abstract class Filter {
-	public static void apply(Filter filter, Runner runner) throws NoTestsRemainException {
-		if (filter != null)
-			filter.apply(runner);
-	}
-	
 	/**
 	 * A null <code>Filter</code> that passes all tests through.
 	 */
@@ -49,13 +43,13 @@ public String describe() {
 	/**
 	 * Invoke with a {@link org.junit.runner.Runner} to cause all tests it intends to run
 	 * to first be checked with the filter. Only those that pass the filter will be run.
-	 * @param runner the runner to be filtered by the receiver
+	 * @param child the runner to be filtered by the receiver
 	 * @throws NoTestsRemainException if the receiver removes all tests
 	 */
-	public void apply(Runner runner) throws NoTestsRemainException {
-		if (runner instanceof Filterable) {
-			Filterable filterable= (Filterable)runner;
-			filterable.filter(this);
-		}
+	public void apply(Object child) throws NoTestsRemainException {
+		if (!(child instanceof Filterable))
+			return;
+		Filterable filterable= (Filterable) child;
+		filterable.filter(this);
 	}
 }
diff --git a/src/main/java/org/junit/runner/manipulation/Sorter.java b/src/main/java/org/junit/runner/manipulation/Sorter.java
index ef5eb5abdec5..c51ceb61eda5 100644
--- a/src/main/java/org/junit/runner/manipulation/Sorter.java
+++ b/src/main/java/org/junit/runner/manipulation/Sorter.java
@@ -3,7 +3,6 @@
 import java.util.Comparator;
 
 import org.junit.runner.Description;
-import org.junit.runner.Runner;
 
 /**
  * A <code>Sorter</code> orders tests. In general you will not need
@@ -12,11 +11,6 @@
  * 
  */
 public class Sorter implements Comparator<Description> {
-	public static void apply(Sorter sorter, Runner runner) {
-		if (sorter != null)
-			sorter.apply(runner);
-	}
-	
 	private final Comparator<Description> fComparator;
 
 	/**
@@ -30,11 +24,11 @@ public Sorter(Comparator<Description> comparator) {
 
 	/**
 	 * Sorts the test in <code>runner</code> using <code>comparator</code>
-	 * @param runner
+	 * @param object
 	 */
-	public void apply(Runner runner) {
-		if (runner instanceof Sortable) {
-			Sortable sortable = (Sortable) runner;
+	public void apply(Object object) {
+		if (object instanceof Sortable) {
+			Sortable sortable = (Sortable) object;
 			sortable.sort(this);
 		}
 	}","ParentRunner handles filtering and sorting for all runners, now including CompositeRunner",1
"diff --git a/src/main/java/org/junit/Assert.java b/src/main/java/org/junit/Assert.java
index 36cbd4a7d5d2..b0d7bd3e139c 100644
--- a/src/main/java/org/junit/Assert.java
+++ b/src/main/java/org/junit/Assert.java
@@ -127,13 +127,10 @@ else if (expected instanceof String && actual instanceof String) {
 	}
 	
 	private static boolean equalsRegardingNull(Object expected, Object actual) {
-		if (expected == null && actual == null)
-			return true;
-		if (expected != null && isEquals(expected, actual))
-			return true;
+		if (expected == null)
+			return actual == null;
 		
-		return false;
-
+		return isEquals(expected, actual);
 	}
 
 	private static boolean isEquals(Object expected, Object actual) {",Simplifying isEqualsRegardingNull.,1
"diff --git a/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderFactorySpec.groovy b/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderFactorySpec.groovy
index f50478ff1b..55d737403d 100644
--- a/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderFactorySpec.groovy
+++ b/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderFactorySpec.groovy
@@ -1,30 +1,64 @@
 package io.micronaut.configuration.metrics.binder.datasource
 
-import io.micrometer.core.instrument.MeterRegistry
-import spock.lang.Ignore
+
+import io.micronaut.jdbc.metadata.DataSourcePoolMetadata
 import spock.lang.Specification
 
 import javax.sql.DataSource
 
 class DataSourcePoolMetricsBinderFactorySpec extends Specification {
 
-    @Ignore
     def ""test getting the beans manually""() {
         given:
-        def meterRegistry = Mock(MeterRegistry)
-        def dataSource1 = Mock(DataSource)
-        def dataSource2 = Mock(DataSource)
+        DataSourcePoolMetricsBinderFactory dataSourcePoolMetricsBinderFactory = new DataSourcePoolMetricsBinderFactory()
 
         when:
-        def binder = new DataSourcePoolMetricsBinderFactory([], meterRegistry)
-        binder.dataSourceMeterBinder(""default"", dataSource1)
-        binder.dataSourceMeterBinder(""first"", dataSource2)
+        def meterBinder = dataSourcePoolMetricsBinderFactory.dataSourceMeterBinder(""foo"", new Foo())
 
         then:
-        1 * dataSource2.hashCode() >> 1
-        1 * dataSource1.hashCode() >> 2
-        0 * _._
+        meterBinder
+    }
+
+    class Foo implements DataSourcePoolMetadata {
+
+        @Override
+        DataSource getDataSource() {
+            return null
+        }
+
+        @Override
+        Integer getIdle() {
+            return null
+        }
+
+        @Override
+        Float getUsage() {
+            return null
+        }
+
+        @Override
+        Integer getActive() {
+            return null
+        }
+
+        @Override
+        Integer getMax() {
+            return null
+        }
+
+        @Override
+        Integer getMin() {
+            return null
+        }
 
+        @Override
+        String getValidationQuery() {
+            return null
+        }
 
+        @Override
+        Boolean getDefaultAutoCommit() {
+            return null
+        }
     }
 }
diff --git a/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderSpec.groovy b/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderSpec.groovy
new file mode 100644
index 0000000000..8e7f09943a
--- /dev/null
+++ b/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderSpec.groovy
@@ -0,0 +1,85 @@
+package io.micronaut.configuration.metrics.binder.datasource
+
+import io.micrometer.core.instrument.MeterRegistry
+import io.micrometer.core.instrument.Tags
+import io.micronaut.jdbc.metadata.DataSourcePoolMetadata
+import spock.lang.Specification
+
+import javax.sql.DataSource
+
+
+class DataSourcePoolMetricsBinderSpec extends Specification {
+
+    MeterRegistry meterRegistry = Mock(MeterRegistry)
+
+    def ""DataSourcePoolMetricsBinder""() {
+        given:
+        DataSource dataSource = Mock(DataSource)
+        DataSourcePoolMetricsBinder dataSourcePoolMetricsBinder = new DataSourcePoolMetricsBinder(
+                dataSource,
+                new FooDataSourcePoolMetadata(dataSource),
+                ""foo"",
+                []
+        )
+
+        when:
+        dataSourcePoolMetricsBinder.bindTo(meterRegistry)
+
+        then:
+        1 * meterRegistry.gauge('jdbc.connections.active', Tags.of(""name"",""foo""), dataSource, _)
+        1 * meterRegistry.gauge('jdbc.connections.min', Tags.of(""name"",""foo""), dataSource, _)
+        1 * meterRegistry.gauge('jdbc.connections.max', Tags.of(""name"",""foo""), dataSource, _)
+        1 * meterRegistry.gauge('jdbc.connections.usage', Tags.of(""name"",""foo""), dataSource, _)
+        0 * _._
+
+    }
+
+    class FooDataSourcePoolMetadata implements  DataSourcePoolMetadata {
+
+        final DataSource dataSource
+
+        FooDataSourcePoolMetadata(DataSource dataSource){
+            this.dataSource = dataSource
+        }
+
+        @Override
+        DataSource getDataSource() {
+            return dataSource
+        }
+
+        @Override
+        Integer getIdle() {
+            return 0
+        }
+
+        @Override
+        Float getUsage() {
+            return 0
+        }
+
+        @Override
+        Integer getActive() {
+            return 0
+        }
+
+        @Override
+        Integer getMax() {
+            return 0
+        }
+
+",remove git - describe plugin for the machines that doesn \' t have full git tree,0
"diff --git a/.hgtags-top-repo b/.hgtags-top-repo
index e9ce41d71d..bc166aa988 100644
--- a/.hgtags-top-repo
+++ b/.hgtags-top-repo
@@ -603,3 +603,4 @@ fe901996777f50198be2c785cd7e3b8198692bbe jdk8u101-b04
 0b1358bc93ca7a30bab6cf2d7da09bb5a11f5a93 jdk8u101-b09
 1db5081d8ee77caffa0f534496af5fb908e9b61f jdk8u101-b10
 81cdb3e279f8f245f740e7d3e79a1629b6599325 jdk8u101-b11
+d6f920823feb4d44e67cec383d8c6e4a5dba9d76 jdk8u101-b12",Remove unneeded reference to DiscoveryService which potentially causes circular references,0
"diff --git a/retrofit/src/main/java/retrofit2/OkHttpCall.java b/retrofit/src/main/java/retrofit2/OkHttpCall.java
index 10f27da97a..14433a44c8 100644
--- a/retrofit/src/main/java/retrofit2/OkHttpCall.java
+++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java
@@ -234,7 +234,7 @@ Response<T> parseResponse(okhttp3.Response rawResponse) throws IOException {
     }
   }
 
-  public void cancel() {
+  @Override public void cancel() {
     canceled = true;
 
     okhttp3.Call call;
diff --git a/retrofit/src/test/java/retrofit2/CallTest.java b/retrofit/src/test/java/retrofit2/CallTest.java
index 2e13db5c66..344a7db705 100644
--- a/retrofit/src/test/java/retrofit2/CallTest.java
+++ b/retrofit/src/test/java/retrofit2/CallTest.java
@@ -787,7 +787,7 @@ public Converter<ResponseBody, String> responseBodyConverter(Type type,
     Object a = new Object() {
       @Override public String toString() {
         writeCount.incrementAndGet();
-        throw new Error(""Broken!"");
+        throw new NonFatalError(""Broken!"");
       }
     };
     Call<String> call = service.postRequestBody(a);
@@ -795,7 +795,7 @@ public Converter<ResponseBody, String> responseBodyConverter(Type type,
     try {
       call.request();
       fail();
-    } catch (Error e) {
+    } catch (NonFatalError e) {
       assertThat(e).hasMessage(""Broken!"");
     }
     assertThat(writeCount.get()).isEqualTo(1);
@@ -803,7 +803,7 @@ public Converter<ResponseBody, String> responseBodyConverter(Type type,
     try {
       call.execute();
       fail();
-    } catch (Error e) {
+    } catch (NonFatalError e) {
       assertThat(e).hasMessage(""Broken!"");
     }
     assertThat(writeCount.get()).isEqualTo(1);
@@ -882,7 +882,7 @@ public Converter<ResponseBody, String> responseBodyConverter(Type type,
     Object a = new Object() {
       @Override public String toString() {
         writeCount.incrementAndGet();
-        throw new Error(""Broken!"");
+        throw new NonFatalError(""Broken!"");
       }
     };
     Call<String> call = service.postRequestBody(a);
@@ -890,7 +890,7 @@ public Converter<ResponseBody, String> responseBodyConverter(Type type,
     try {
       call.execute();
       fail();
-    } catch (Error e) {
+    } catch (NonFatalError e) {
       assertThat(e).hasMessage(""Broken!"");
     }
     assertThat(writeCount.get()).isEqualTo(1);
@@ -898,7 +898,7 @@ public Converter<ResponseBody, String> responseBodyConverter(Type type,
     try {
       call.request();
       fail();
-    } catch (Error e) {
+    } catch (NonFatalError e) {
       assertThat(e).hasMessage(""Broken!"");
     }
     assertThat(writeCount.get()).isEqualTo(1);
@@ -993,7 +993,7 @@ public Converter<ResponseBody, String> responseBodyConverter(Type type,
     Object a = new Object() {
       @Override public String toString() {
         writeCount.incrementAndGet();
-        throw new Error(""Broken!"");
+        throw new NonFatalError(""Broken!"");
       }
     };
     Call<String> call = service.postRequestBody(a);
@@ -1001,7 +1001,7 @@ public Converter<ResponseBody, String> responseBodyConverter(Type type,
     try {
       call.request();
       fail();
-    } catch (Error e) {
+    } catch (NonFatalError e) {
       assertThat(e).hasMessage(""Broken!"");
     }
     assertThat(writeCount.get()).isEqualTo(1);
@@ -1012,7 +1012,7 @@ public Converter<ResponseBody, String> responseBodyConverter(Type type,
       }
 
       @Override public void onFailure(Call<String> call, Throwable t) {
-        assertThat(t).isExactlyInstanceOf(Error.class).hasMessage(""Broken!"");
+        assertThat(t).isExactlyInstanceOf(NonFatalError.class).hasMessage(""Broken!"");
         assertThat(writeCount.get()).isEqualTo(1);
         latch.countDown();
       }
@@ -1110,7 +1110,7 @@ public Converter<ResponseBody, String> responseBodyConverter(Type type,
     Object a = new Object() {
       @Override public String toString() {
         writeCount.incrementAndGet();
-        throw new Error(""Broken!"");
+        throw new NonFatalError(""Broken!"");
       }
     };
     Call<String> call = service.postRequestBody(a);
@@ -1121,7 +1121,7 @@ public Converter<ResponseBody, String> responseBodyConverter(Type type,
       }
 
       @Override public void onFailure(Call<String> call, Throwable t) {
-        assertThat(t).isExactlyInstanceOf(Error.class).hasMessage(""Broken!"");
+        assertThat(t).isExactlyInstanceOf(NonFatalError.class).hasMessage(""Broken!"");
         assertThat(writeCount.get()).isEqualTo(1);
         latch.countDown();
       }
@@ -1131,7 +1131,7 @@ public Converter<ResponseBody, String> responseBodyConverter(Type type,
     try {
       call.request();
       fail();
-    } catch (Error e) {
+    } catch (NonFatalError e) {
       assertThat(e).hasMessage(""Broken!"");
     }
     assertThat(writeCount.get()).isEqualTo(1);
diff --git a/retrofit/src/test/java/retrofit2/NonFatalError.java b/retrofit/src/test/java/retrofit2/NonFatalError.java
new file mode 100644
index 0000000000..e31645dd0e
--- /dev/null
+++ b/retrofit/src/test/java/retrofit2/NonFatalError.java
@@ -0,0 +1,22 @@
+/*
+ * Copyright (C) 2020 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit2;
+
+final class NonFatalError extends Error {
+  NonFatalError(String message) {
+    super(message);
+  }
+}
diff --git a/retrofit/src/test/java/retrofit2/RequestFactoryTest.java b/retrofit/src/test/java/retrofit2/RequestFactoryTest.java
index 057e8d3d4a..2cc1d0f04e 100644
--- a/retrofit/src/test/java/retrofit2/RequestFactoryTest.java
+++ b/retrofit/src/test/java/retrofit2/RequestFactoryTest.java
@@ -32,6 +32,7 @@
 import okhttp3.RequestBody;
 import okhttp3.ResponseBody;
 import okio.Buffer;
+import org.junit.Ignore;
 import org.junit.Test;
 import retrofit2.helpers.NullObjectConverterFactory;
 import retrofit2.helpers.ToStringConverterFactory;
@@ -793,6 +794,7 @@ Call<Void> method() {
     assertThat(request.body()).isNull();
   }
 
+  @Ignore(""This test is valid but isn't validated by RequestFactory so it needs moved"")
   @Test public void headWithoutVoidThrows() {
     class Example {
       @HEAD(""/foo/bar/"") //
@@ -802,6 +804,7 @@ Call<ResponseBody> method() {
     }
     try {
       buildRequest(Example.class);
+      fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage(
           ""HEAD method must use Void as response type.\n    for method Example.method"");
diff --git a/retrofit/src/test/java/retrofit2/RetrofitTest.java b/retrofit/src/test/java/retrofit2/RetrofitTest.java
index 3ffabbc5bb..fb2f34506b 100644
--- a/retrofit/src/test/java/retrofit2/RetrofitTest.java
+++ b/retrofit/src/test/java/retrofit2/RetrofitTest.java
@@ -121,7 +121,8 @@ interface MutableParameters {
     @GET(""/"") Call<String> method(@Query(""i"") AtomicInteger value);
   }
 
-  @SuppressWarnings(""EqualsBetweenInconvertibleTypes"") // We are explicitly testing this behavior.
+  // We are explicitly testing this behavior.
+  @SuppressWarnings({""EqualsBetweenInconvertibleTypes"", ""EqualsIncompatibleType""})
   @Test public void objectMethodsStillWork() {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url(""/""))",Small fixes from error-prone,1
"diff --git a/CHANGELOG.md b/CHANGELOG.md
index 71a507a6e6e7..67cbfe78852d 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -8,7 +8,7 @@ _2014-06-11_
 This update fixes problems in 2.0.0-RC1. Read the 2.0.0-RC1 changes for
 advice on upgrading from 1.x to 2.x.
 
- *  Fix: Don't leak connections! There was a regression in 2.0.0-RC2 where
+ *  Fix: Don't leak connections! There was a regression in 2.0.0-RC1 where
     connections were neither closed nor pooled.
  *  Fix: Revert builder-style return types from OkHttpClient's timeout methods
     for binary compatibility with OkHttp 1.x.",Correct reference to RC1.,1
"diff --git a/src/com/facebook/buck/rules/AbstractBuildRule.java b/src/com/facebook/buck/rules/AbstractBuildRule.java
index e28630e6f7..a5f0a55fec 100644
--- a/src/com/facebook/buck/rules/AbstractBuildRule.java
+++ b/src/com/facebook/buck/rules/AbstractBuildRule.java
@@ -174,6 +174,10 @@ abstract class AbstractBuildRule implements BuildRule {
     return outputKey;
   }
 
+  protected void resetOutputKey() {
+    outputKey = null;
+  }
+
   /**
    * getRuleKey() calls the most derived implementation of this method to lazily construct a
    * RuleKey. Every subclass that extends the rule state in a way that matters to idempotency must
diff --git a/src/com/facebook/buck/rules/AbstractCachingBuildRule.java b/src/com/facebook/buck/rules/AbstractCachingBuildRule.java
index 9595ecb89e..f3533df56b 100644
--- a/src/com/facebook/buck/rules/AbstractCachingBuildRule.java
+++ b/src/com/facebook/buck/rules/AbstractCachingBuildRule.java
@@ -340,6 +340,8 @@ abstract class AbstractCachingBuildRule extends AbstractBuildRule implements Bui
         for (Command command : commands) {
           commandRunner.runCommand(command);
         }
+        // Drop our cached output key, since it probably changed.
+        resetOutputKey();
 
         // Write the success file.
         buildRule.writeSuccessFile();",use a version . properties file for defining versions of common dependencies .,0
"diff --git a/src/main/java/org/traccar/protocol/ItsProtocolDecoder.java b/src/main/java/org/traccar/protocol/ItsProtocolDecoder.java
index 1e0a4603c..f66669a98 100644
--- a/src/main/java/org/traccar/protocol/ItsProtocolDecoder.java
+++ b/src/main/java/org/traccar/protocol/ItsProtocolDecoder.java
@@ -67,9 +67,9 @@ public class ItsProtocolDecoder extends BaseProtocolDecoder {
             .number(""(d+),"")                     // satellites
             .groupBegin()
             .number(""(d+.?d*),"")                 // altitude
-            .number(""d+.?d*,"")                   // pdop
-            .number(""d+.?d*,"")                   // hdop
-            .expression(""[^,]*,"")                // operator
+            .number(""(d+.?d*),"")                 // pdop
+            .number(""(d+.?d*),"")                 // hdop
+            .expression(""([^,]+)?,"")             // operator
             .number(""([01]),"")                   // ignition
             .number(""([01]),"")                   // charging
             .number(""(d+.?d*),"")                 // power
@@ -81,6 +81,15 @@ public class ItsProtocolDecoder extends BaseProtocolDecoder {
             .number(""([01]{2}),"")                // outputs
             .groupBegin()
             .number(""d+,"")                       // index
+            .number(""(d+.?d*),"")                 // odometer
+            .number(""(d+.?d*),"")                 // adc1
+            .number(""(-?d+.?d*),"")               // acceleration x
+            .number(""(-?d+.?d*),"")               // acceleration y
+            .number(""(-?d+.?d*),"")               // acceleration z
+            .number(""(-?d+),"")                   // tilt y
+            .number(""(-?d+),"")                   // tilt x
+            .or()
+            .number(""d+,"")                       // index
             .number(""(d+.?d*),"")                 // adc1
             .number(""(d+.?d*),"")                 // adc2
             .groupEnd(""?"")
@@ -188,6 +197,9 @@ public class ItsProtocolDecoder extends BaseProtocolDecoder {
 
         if (parser.hasNext(8)) {
             position.setAltitude(parser.nextDouble());
+            position.set(Position.KEY_PDOP, parser.nextDouble());
+",Reduce battery drain caused by insainly high value of widget update period .,0
"diff --git a/Java/Java.sublime-syntax b/Java/Java.sublime-syntax
index 17a5ed49..468cdfe2 100644
--- a/Java/Java.sublime-syntax
+++ b/Java/Java.sublime-syntax
@@ -341,9 +341,10 @@ contexts:
 
   keywords:
     - match: '::'
-      scope: keyword.control.method-reference.java
+      scope: keyword.operator.method-reference.java
       push:
         - match: '{{id}}'
+          scope: variable.function.reference.java
           pop: true
         - match: (?=\S)
           pop: true
diff --git a/Java/syntax_test_java.java b/Java/syntax_test_java.java
index 371ae1d6..dd1d17c5 100644
--- a/Java/syntax_test_java.java
+++ b/Java/syntax_test_java.java
@@ -59,13 +59,15 @@ public class SyntaxTest {
         printList(Arrays.stream(args)
             .collect(Collectors.toCollection(ArrayList::new)));
 //                                                      ^^^ meta.method.body.java - keyword.control.new.java
-//                                                    ^^ keyword.control.method-reference.java
+//                                                      ^^^ variable.function.reference.java
+//                                                    ^^ keyword.operator.method-reference.java
         anotherMethod();
         try (Stream<String> lines = Files.lines(path)) {
 //      ^^^ keyword.control.catch-exception.java
 //                                 ^^^^^^^^^^^^^^^^^^ meta.assignment.rhs.java
 //",Remove values - v24 folder for now .,0
"diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAnnotationDrivenConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAnnotationDrivenConfiguration.java
index c17b8d7d18a9..0b37e8bab17b 100644
--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAnnotationDrivenConfiguration.java
+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAnnotationDrivenConfiguration.java
@@ -43,8 +43,7 @@ class RabbitAnnotationDrivenConfiguration {
 	@Bean
 	@ConditionalOnMissingBean
 	public SimpleRabbitListenerContainerFactoryConfigurer rabbitListenerContainerFactoryConfigurer() {
-		SimpleRabbitListenerContainerFactoryConfigurer configurer =
-				new SimpleRabbitListenerContainerFactoryConfigurer();
+		SimpleRabbitListenerContainerFactoryConfigurer configurer = new SimpleRabbitListenerContainerFactoryConfigurer();
 		configurer.setRabbitProperties(this.properties);
 		return configurer;
 	}
@@ -54,8 +53,7 @@ public SimpleRabbitListenerContainerFactoryConfigurer rabbitListenerContainerFac
 	public SimpleRabbitListenerContainerFactory rabbitListenerContainerFactory(
 			SimpleRabbitListenerContainerFactoryConfigurer configurer,
 			ConnectionFactory connectionFactory) {
-		SimpleRabbitListenerContainerFactory factory =
-				new SimpleRabbitListenerContainerFactory();
+		SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();
 		configurer.configure(factory, connectionFactory);
 		return factory;
 	}
diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheManagerCustomizer.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheManagerCustomizer.java
index 9ea7c52648ef..c3a53d4ba417 100644
--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheManagerCustomizer.java
+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheManagerCustomizer.java
@@ -22,6 +22,7 @@
  * Callback interface that can be implemented by beans wishing to customize the cache
  * manager before it is fully initialized, in particular to tune its configuration.
  *
+ * @param <C> The type of the {@link CacheManager}
  * @author Stephane Nicoll
  * @since 1.3.3
  */
diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheManagerCustomizerInvoker.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheManagerCustomizerInvoker.java
index 13f03a1738bf..8c667a69e123 100644
--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheManagerCustomizerInvoker.java
+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheManagerCustomizerInvoker.java
@@ -41,28 +41,30 @@ class CacheManagerCustomizerInvoker implements ApplicationContextAware {
 	private ConfigurableApplicationContext applicationContext;
 
 	/**
-	 * Customize the specified {@link CacheManager}. Locates all {@link CacheManagerCustomizer}
-	 * beans able to handle the specified instance and invoke
-	 * {@link CacheManagerCustomizer#customize(CacheManager)} on them.
+	 * Customize the specified {@link CacheManager}. Locates all
+	 * {@link CacheManagerCustomizer} beans able to handle the specified instance and
+	 * invoke {@link CacheManagerCustomizer#customize(CacheManager)} on them.
 	 * @param cacheManager the cache manager to customize
 	 */
 	public void customize(CacheManager cacheManager) {
-		List<CacheManagerCustomizer<CacheManager>> customizers = findCustomizers(cacheManager);
+		List<CacheManagerCustomizer<CacheManager>> customizers = findCustomizers(
+				cacheManager);
 		AnnotationAwareOrderComparator.sort(customizers);
 		for (CacheManagerCustomizer<CacheManager> customizer : customizers) {
 			customizer.customize(cacheManager);
 		}
 	}
 
-	@SuppressWarnings(""unchecked"")
-	private List<CacheManagerCustomizer<CacheManager>> findCustomizers(CacheManager cacheManager) {
+	@SuppressWarnings({ ""unchecked"", ""rawtypes"" })
+	private List<CacheManagerCustomizer<CacheManager>> findCustomizers(
+			CacheManager cacheManager) {
 		if (this.applicationContext == null) {
 			return Collections.emptyList();
 		}
 		Map<String, CacheManagerCustomizer> map = BeanFactoryUtils
-				.beansOfTypeIncludingAncestors(this.applicationContext.getBeanFactory(), CacheManagerCustomizer.class);
-		List<CacheManagerCustomizer<CacheManager>> customizers
-				= new ArrayList<CacheManagerCustomizer<CacheManager>>();
+				.beansOfTypeIncludingAncestors(this.applicationContext.getBeanFactory(),
+						CacheManagerCustomizer.class);
+		List<CacheManagerCustomizer<CacheManager>> customizers = new ArrayList<CacheManagerCustomizer<CacheManager>>();
 		for (CacheManagerCustomizer customizer : map.values()) {
 			Class<?> target = GenericTypeResolver.resolveTypeArgument(
 					customizer.getClass(), CacheManagerCustomizer.class);
@@ -73,9 +75,9 @@ private List<CacheManagerCustomizer<CacheManager>> findCustomizers(CacheManager
 		return customizers;
 	}
 
-
 	@Override
-	public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
+	public void setApplicationContext(ApplicationContext applicationContext)
+			throws BeansException {
 		if (applicationContext instanceof ConfigurableApplicationContext) {
 			this.applicationContext = (ConfigurableApplicationContext) applicationContext;
 		}
diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/HazelcastCacheConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/HazelcastCacheConfiguration.java
index 649f0feb2a07..d81dd16e1d43 100644
--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/HazelcastCacheConfiguration.java
+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/HazelcastCacheConfiguration.java
@@ -41,10 +41,11 @@
  * @see HazelcastConfigResourceCondition
  */
 @Configuration
-@ConditionalOnClass({HazelcastInstance.class, HazelcastCacheManager.class})
+@ConditionalOnClass({ HazelcastInstance.class, HazelcastCacheManager.class })
 @ConditionalOnMissingBean(CacheManager.class)
 @Conditional(CacheCondition.class)
-@Import({HazelcastInstanceConfiguration.Existing.class, HazelcastInstanceConfiguration.Specific.class})
+@Import({ HazelcastInstanceConfiguration.Existing.class,
+		HazelcastInstanceConfiguration.Specific.class })
 class HazelcastCacheConfiguration {
 
 }
diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/HazelcastInstanceConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/HazelcastInstanceConfiguration.java
index a15ebbb61e5c..819ac4dbea96 100644
--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/HazelcastInstanceConfiguration.java
+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/HazelcastInstanceConfiguration.java
@@ -61,7 +61,8 @@ public HazelcastCacheManager cacheManager(
 						location).getHazelcastInstance();
 				return new CloseableHazelcastCacheManager(cacheHazelcastInstance);
 			}
-			HazelcastCacheManager cacheManager = new HazelcastCacheManager(existingHazelcastInstance);
+			HazelcastCacheManager cacheManager = new HazelcastCacheManager(
+					existingHazelcastInstance);
 			this.customizerInvoker.customize(cacheManager);
 			return cacheManager;
 		}
@@ -90,14 +91,14 @@ public HazelcastInstance hazelcastInstance() throws IOException {
 
 		@Bean
 		public HazelcastCacheManager cacheManager() throws IOException {
-			HazelcastCacheManager cacheManager = new HazelcastCacheManager(hazelcastInstance());
+			HazelcastCacheManager cacheManager = new HazelcastCacheManager(
+					hazelcastInstance());
 			this.customizerInvoker.customize(cacheManager);
 			return cacheManager;
 		}
 
 	}
 
-
 	/**
 	 * {@link HazelcastConfigResourceCondition} that checks if the
 	 * {@code spring.cache.hazelcast.config} configuration key is defined.
diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/InfinispanCacheConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/InfinispanCacheConfiguration.java
index 8af928777049..555bb745248d 100644
--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/InfinispanCacheConfiguration.java
+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/InfinispanCacheConfiguration.java
@@ -60,7 +60,8 @@ public class InfinispanCacheConfiguration {
 	@Bean
 	public SpringEmbeddedCacheManager cacheManager(
 			EmbeddedCacheManager embeddedCacheManager) {
-		SpringEmbeddedCacheManager cacheManager = new SpringEmbeddedCacheManager(embeddedCacheManager);
+		SpringEmbeddedCacheManager cacheManager = new SpringEmbeddedCacheManager(
+				embeddedCacheManager);
 		this.customizerInvoker.customize(cacheManager);
 		return cacheManager;
 	}
diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/DefaultJmsListenerContainerFactoryConfigurer.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/DefaultJmsListenerContainerFactoryConfigurer.java
index 4655bf47625f..d666ce514b3c 100644
--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/DefaultJmsListenerContainerFactoryConfigurer.java
+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/DefaultJmsListenerContainerFactoryConfigurer.java
@@ -63,7 +63,6 @@ void setJmsProperties(JmsProperties jmsProperties) {
 		this.jmsProperties = jmsProperties;
 	}
 
-
 	/**
 	 * Configure the specified jms listener container factory. The factory can be further
 	 * tuned and default settings can be overridden.
diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsAnnotationDrivenConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsAnnotationDrivenConfiguration.java
index ff27e40632f7..66d3a17afa87 100644
--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsAnnotationDrivenConfiguration.java
+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsAnnotationDrivenConfiguration.java
@@ -54,8 +54,7 @@ class JmsAnnotationDrivenConfiguration {
 	@Bean
 	@ConditionalOnMissingBean
 	public DefaultJmsListenerContainerFactoryConfigurer jmsListenerContainerFactoryConfigurer() {
-		DefaultJmsListenerContainerFactoryConfigurer configurer =
-				new DefaultJmsListenerContainerFactoryConfigurer();
+		DefaultJmsListenerContainerFactoryConfigurer configurer = new DefaultJmsListenerContainerFactoryConfigurer();
 		configurer.setDestinationResolver(this.destinationResolver);
 		configurer.setTransactionManager(this.transactionManager);
 		configurer.setJmsProperties(this.properties);
diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java
index 4215f7412676..94ec8017c42c 100644
--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java
+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java
@@ -113,7 +113,7 @@ public IRuntimeConfig embeddedMongoRuntimeConfig() {
 	private ArtifactStoreBuilder getArtifactStore(Logger logger) {
 		return new ExtractedArtifactStoreBuilder().defaults(Command.MongoD)
 				.download(new DownloadConfigBuilder().defaultsForCommand(Command.MongoD)
-						.progressListener(new Slf4jProgressListener(logger)));
+						.progressListener(new Slf4jProgressListener(logger)).build());
 	}
 
 	@Bean(initMethod = ""start"", destroyMethod = ""stop"")
diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfigurationTests.java
index 6b66a2200f49..03b308414b79 100644
--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfigurationTests.java
+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfigurationTests.java
@@ -393,8 +393,10 @@ public void hazelcastCacheWithConfig() throws IOException {
 				HazelcastCacheManager.class);
 		HazelcastInstance actual = getHazelcastInstance(cacheManager);
 		assertThat(actual, sameInstance(hazelcastInstance));
-		assertThat(actual.getConfig().getConfigurationUrl(), equalTo(new ClassPathResource(
-				""org/springframework/boot/autoconfigure/cache/hazelcast-specific.xml"").getURL()));
+		assertThat(actual.getConfig().getConfigurationUrl(),
+				equalTo(new ClassPathResource(
+						""org/springframework/boot/autoconfigure/cache/hazelcast-specific.xml"")
+								.getURL()));
 		cacheManager.getCache(""foobar"");
 		assertThat(cacheManager.getCacheNames(), containsInAnyOrder(""foobar""));
 		assertThat(cacheManager.getCacheNames(), hasSize(1));
@@ -431,7 +433,8 @@ public void hazelcastCacheWithMainHazelcastAutoConfiguration() throws IOExceptio
 				HazelcastCacheManager.class);
 		HazelcastInstance hazelcastInstance = this.context
 				.getBean(HazelcastInstance.class);
-		assertThat(getHazelcastInstance(cacheManager), equalTo((Object) hazelcastInstance));
+		assertThat(getHazelcastInstance(cacheManager),
+				equalTo((Object) hazelcastInstance));
 		assertThat(hazelcastInstance.getConfig().getConfigurationFile(),
 				equalTo(new ClassPathResource(mainConfig).getFile()));
 	}
@@ -610,22 +613,27 @@ private <T extends CacheManager> T validateCacheManager(Class<T> type) {
 		return type.cast(cacheManager);
 	}
 
-	private void testCustomizers(Class<?> config, String cacheType, String... expectedCustomizerNames) {
+	@SuppressWarnings(""rawtypes"")
+	private void testCustomizers(Class<?> config, String cacheType,
+			String... expectedCustomizerNames) {
 		load(config, ""spring.cache.type="" + cacheType);
 		CacheManager cacheManager = validateCacheManager(CacheManager.class);
 		List<String> expected = new ArrayList<String>();
 		expected.addAll(Arrays.asList(expectedCustomizerNames));
-		Map<String, CacheManagerTestCustomizer> map =
-				this.context.getBeansOfType(CacheManagerTestCustomizer.class);
+		Map<String, CacheManagerTestCustomizer> map = this.context
+				.getBeansOfType(CacheManagerTestCustomizer.class);
 		for (Map.Entry<String, CacheManagerTestCustomizer> entry : map.entrySet()) {
 			if (expected.contains(entry.getKey())) {
 				expected.remove(entry.getKey());
-				assertThat(""Customizer with name "" + entry.getKey() + "" should have been "" +
-						""invoked"", entry.getValue().cacheManager, sameInstance(cacheManager));
+				assertThat(
+						""Customizer with name "" + entry.getKey() + "" should have been ""
+								+ ""invoked"",
+						entry.getValue().cacheManager, sameInstance(cacheManager));
 			}
 			else {
-				assertThat(""Customizer with name "" + entry.getKey() + "" should not have been"" +
-						""invoked"", entry.getValue().cacheManager, nullValue());
+				assertThat(""Customizer with name "" + entry.getKey()
+						+ "" should not have been"" + ""invoked"",
+						entry.getValue().cacheManager, nullValue());
 			}
 		}
 		assertThat(""The following customizers should have been invoked: "" + expected,
@@ -641,7 +649,8 @@ private void load(Class<?> config, String... environment) {
 		this.context = applicationContext;
 	}
 
-	private static HazelcastInstance getHazelcastInstance(HazelcastCacheManager cacheManager) {
+	private static HazelcastInstance getHazelcastInstance(
+			HazelcastCacheManager cacheManager) {
 		return (HazelcastInstance) new DirectFieldAccessor(cacheManager)
 				.getPropertyValue(""hazelcastInstance"");
 	}
@@ -681,7 +690,8 @@ public Cache secondCache() {
 	}
 
 	@Configuration
-	@Import({GenericCacheConfiguration.class, CacheManagerCustomizersConfiguration.class})
+	@Import({ GenericCacheConfiguration.class,
+			CacheManagerCustomizersConfiguration.class })
 	static class GenericCacheAndCustomizersConfiguration {
 	}
 
@@ -697,7 +707,7 @@ static class RedisCacheConfiguration {
 	}
 
 	@Configuration
-	@Import({RedisCacheConfiguration.class, CacheManagerCustomizersConfiguration.class})
+	@Import({ RedisCacheConfiguration.class, CacheManagerCustomizersConfiguration.class })
 	static class RedisCacheAndCustomizersConfiguration {
 
 	}
@@ -775,8 +785,8 @@ public HazelcastInstance customHazelcastInstance() {
 	}
 
 	@Configuration
-	@ImportAutoConfiguration({CacheAutoConfiguration.class,
-			HazelcastAutoConfiguration.class})
+	@ImportAutoConfiguration({ CacheAutoConfiguration.class,
+			HazelcastAutoConfiguration.class })
 	static class HazelcastAndCacheConfiguration {
 
 	}
@@ -795,7 +805,7 @@ public ConfigurationBuilder configurationBuilder() {
 	}
 
 	@Configuration
-	@Import({GenericCacheConfiguration.class, RedisCacheConfiguration.class})
+	@Import({ GenericCacheConfiguration.class, RedisCacheConfiguration.class })
 	static class CustomCacheManagerConfiguration {
 
 		@Bean
@@ -806,7 +816,7 @@ public CacheManager cacheManager() {
 	}
 
 	@Configuration
-	@Import({GenericCacheConfiguration.class, RedisCacheConfiguration.class})
+	@Import({ GenericCacheConfiguration.class, RedisCacheConfiguration.class })
 	static class CustomCacheManagerFromSupportConfiguration
 			extends CachingConfigurerSupport {
 
@@ -831,7 +841,7 @@ CacheBuilder<Object, Object> cacheBuilder() {
 	}
 
 	@Configuration
-	@Import({GenericCacheConfiguration.class, RedisCacheConfiguration.class})
+	@Import({ GenericCacheConfiguration.class, RedisCacheConfiguration.class })
 	static class CustomCacheResolverConfiguration extends CachingConfigurerSupport {
 
 		@Override
@@ -869,37 +879,44 @@ public CacheManagerCustomizer<ConcurrentMapCacheManager> simpleCacheManagerCusto
 
 		@Bean
 		public CacheManagerCustomizer<SimpleCacheManager> genericCacheManagerCustomizer() {
-			return new CacheManagerTestCustomizer<SimpleCacheManager>() { };
+			return new CacheManagerTestCustomizer<SimpleCacheManager>() {
+			};
 		}
 
 		@Bean
 		public CacheManagerCustomizer<RedisCacheManager> redisCacheManagerCustomizer() {
-			return new CacheManagerTestCustomizer<RedisCacheManager>() { };
+			return new CacheManagerTestCustomizer<RedisCacheManager>() {
+			};
 		}
 
 		@Bean
 		public CacheManagerCustomizer<EhCacheCacheManager> ehCacheCacheManagerCustomizer() {
-			return new CacheManagerTestCustomizer<EhCacheCacheManager>() { };
+			return new CacheManagerTestCustomizer<EhCacheCacheManager>() {
+			};
 		}
 
 		@Bean
 		public CacheManagerCustomizer<HazelcastCacheManager> hazelcastCacheManagerCustomizer() {
-			return new CacheManagerTestCustomizer<HazelcastCacheManager>() { };
+			return new CacheManagerTestCustomizer<HazelcastCacheManager>() {
+			};
 		}
 
 		@Bean
 		public CacheManagerCustomizer<SpringEmbeddedCacheManager> infinispanCacheManagerCustomizer() {
-			return new CacheManagerTestCustomizer<SpringEmbeddedCacheManager>() { };
+			return new CacheManagerTestCustomizer<SpringEmbeddedCacheManager>() {
+			};
 		}
 
 		@Bean
 		public CacheManagerCustomizer<GuavaCacheManager> guavaCacheManagerCustomizer() {
-			return new CacheManagerTestCustomizer<GuavaCacheManager>() { };
+			return new CacheManagerTestCustomizer<GuavaCacheManager>() {
+			};
 		}
 
 	}
 
-	static abstract class CacheManagerTestCustomizer<C extends CacheManager> implements CacheManagerCustomizer<C> {
+	static abstract class CacheManagerTestCustomizer<C extends CacheManager>
+			implements CacheManagerCustomizer<C> {
 
 		private C cacheManager;
 
diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/cache/CacheManagerCustomizerInvokerTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/cache/CacheManagerCustomizerInvokerTests.java
index 1749250ad6e2..38a20031ab0f 100644
--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/cache/CacheManagerCustomizerInvokerTests.java
+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/cache/CacheManagerCustomizerInvokerTests.java
@@ -54,7 +54,8 @@ public void tearDown() {
 	@Test
 	public void customizeSimpleCacheManager() {
 		load(SimpleConfiguration.class, ""spring.cache.type=simple"");
-		ConcurrentMapCacheManager cacheManager = this.context.getBean(ConcurrentMapCacheManager.class);
+		ConcurrentMapCacheManager cacheManager = this.context
+				.getBean(ConcurrentMapCacheManager.class);
 		assertThat(cacheManager.getCacheNames(), containsInAnyOrder(""one"", ""two""));
 		assertThat(cacheManager.getCacheNames(), hasSize(2));
 	}
@@ -68,7 +69,6 @@ public void customizeNoConfigurableApplicationContext() {
 		verifyZeroInteractions(context);
 	}
 
-
 	private void load(Class<?> config, String... environment) {
 		AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext();
 		EnvironmentTestUtils.addEnvironment(applicationContext, environment);
@@ -78,7 +78,6 @@ private void load(Class<?> config, String... environment) {
 		this.context = applicationContext;
 	}
 
-
 	@Configuration
 	@EnableCaching
 	static class SimpleConfiguration {
diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsAutoConfigurationTests.java
index efd134b93fef..b0172f44aac2 100644
--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsAutoConfigurationTests.java
+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsAutoConfigurationTests.java
@@ -471,8 +471,7 @@ protected static class TestConfiguration9 {
 		JmsListenerContainerFactory<?> customListenerContainerFactory(
 				DefaultJmsListenerContainerFactoryConfigurer configurer,
 				ConnectionFactory connectionFactory) {
-			DefaultJmsListenerContainerFactory factory =
-					new DefaultJmsListenerContainerFactory();
+			DefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory();
 			configurer.configure(factory, connectionFactory);
 			factory.setCacheLevel(DefaultMessageListenerContainer.CACHE_CONSUMER);
 			return factory;
diff --git a/spring-boot-devtools/pom.xml b/spring-boot-devtools/pom.xml
index 847201049593..f51219f6c66f 100644
--- a/spring-boot-devtools/pom.xml
+++ b/spring-boot-devtools/pom.xml
@@ -99,7 +99,6 @@
 		<dependency>
 			<groupId>org.eclipse.jetty.websocket</groupId>
 			<artifactId>websocket-client</artifactId>
-			<version>${jetty.version}</version>
 			<scope>test</scope>
 		</dependency>
 		<dependency>
diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedWebappClassLoader.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedWebappClassLoader.java
index f96337d63add..fa807322ad23 100644
--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedWebappClassLoader.java
+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedWebappClassLoader.java
@@ -59,7 +59,7 @@ public synchronized Class<?> loadClass(String name, boolean resolve)
 		checkPackageAccess(name);
 
 		// Perform the actual load
-		boolean delegateLoad = (this.delegate || filter(name));
+		boolean delegateLoad = (this.delegate || filter(name, true));
 
 		if (delegateLoad) {
 			resultClass = (resultClass == null ? loadFromParent(name) : resultClass);",Polishing <enter>  <enter>  - Code formatting <enter>  - Javadoc warnings <enter>  - Deprecation warnings,1
"diff --git a/compiler/build.gradle b/compiler/build.gradle
index f94fef70d0c..8cbb08dd6c1 100644
--- a/compiler/build.gradle
+++ b/compiler/build.gradle
@@ -2,7 +2,7 @@ apply plugin: ""cpp""
 apply plugin: ""com.google.protobuf""
 
 group = ""org.apache.dubbo""
-version = ""1.19.0-SNAPSHOT"" // CURRENT_GRPC_VERSION
+version = ""1.19.0"" // CURRENT_GRPC_VERSION
 
 description = 'The protoc plugin for gRPC Java'",add gpg signing plugin for protobuf compiler,0
"diff --git a/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Attribute.java b/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Attribute.java
index 31ff557d5f..412c82f9fc 100644
--- a/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Attribute.java
+++ b/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Attribute.java
@@ -32,6 +32,10 @@ enum Attribute {
     UNKNOWN(null),
 
     ID(Constants.ID),
+    NAME(Constants.NAME),
+    VALUE(Constants.VALUE),
+    CLASS(Constants.CLASS),
+    PROTOCOL_BINDINGS(Constants.PROTOCOL_BINDINGS),
     ;
 
     private final String name;
diff --git a/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Element.java b/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Element.java
index 6839300ad3..d90516f296 100644
--- a/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Element.java
+++ b/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Element.java
@@ -44,6 +44,8 @@ enum Element {
     PROPERTY(Constants.PROPERTY),
     PROPERTY_NAME(Constants.PROPERTY_NAME),
     PROPERTY_VALUE(Constants.PROPERTY_VALUE),
+    PRE_HANDLER_CHAIN(Constants.PRE_HANDLER_CHAIN),
+    POST_HANDLER_CHAIN(Constants.POST_HANDLER_CHAIN),
     PRE_HANDLER_CHAINS(Constants.PRE_HANDLER_CHAINS),
     POST_HANDLER_CHAINS(Constants.POST_HANDLER_CHAINS),
     HANDLER_CHAIN(Constants.HANDLER_CHAIN),
diff --git a/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/WebservicesSubsystemParser.java b/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/WebservicesSubsystemParser.java
index fad5bbf685..b53b89559d 100644
--- a/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/WebservicesSubsystemParser.java
+++ b/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/WebservicesSubsystemParser.java
@@ -164,6 +164,41 @@ final class WebservicesSubsystemParser implements XMLStreamConstants, XMLElement
         while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
             switch (Namespace.forUri(reader.getNamespaceURI())) {
                 case WEBSERVICES_1_0: {
+                    final Element element = Element.forName(reader.getLocalName());
+                    if (element != Element.ENDPOINT_CONFIG && !encountered.add(element)) {
+                        throw unexpectedElement(reader);
+                    }
+                    switch (element) {
+                        case MODIFY_WSDL_ADDRESS: {
+                            boolean b = Boolean.parseBoolean(parseElementNoAttributes(reader));
+                            subsystem.get(MODIFY_WSDL_ADDRESS).set(b);
+                            break;
+                        }
+                        case WSDL_HOST: {
+                            subsystem.get(WSDL_HOST).set(parseElementNoAttributes(reader));
+                            break;
+                        }
+                        case WSDL_PORT: {
+                            int port = Integer.valueOf(parseElementNoAttributes(reader));
+                            subsystem.get(WSDL_PORT).set(port);
+                            break;
+                        }
+                        case WSDL_SECURE_PORT: {
+                            int port = Integer.valueOf(parseElementNoAttributes(reader));
+                            subsystem.get(WSDL_SECURE_PORT).set(port);
+                            break;
+                        }
+                        case ENDPOINT_CONFIG: {
+                            readEndpointConfigOld(reader, subsystem.get(OP_ADDR), endpointConfigs);
+                            break;
+                        }
+                        default: {
+                            throw unexpectedElement(reader);
+                        }
+                    }
+                    break;
+                }
+                case WEBSERVICES_1_1: {
                     final Element element = Element.forName(reader.getLocalName());
                     if (element != Element.ENDPOINT_CONFIG && !encountered.add(element)) {
                         throw unexpectedElement(reader);
@@ -215,7 +250,7 @@ final class WebservicesSubsystemParser implements XMLStreamConstants, XMLElement
         return reader.getElementText().trim();
     }
 
-    private void readEndpointConfig(XMLExtendedStreamReader reader, ModelNode address, List<ModelNode> operationList) throws XMLStreamException {
+    private void readEndpointConfigOld(XMLExtendedStreamReader reader, ModelNode address, List<ModelNode> operationList) throws XMLStreamException {
         String configName = null;
 
         final EnumSet<Element> encountered = EnumSet.noneOf(Element.class);
@@ -235,11 +270,59 @@ final class WebservicesSubsystemParser implements XMLStreamConstants, XMLElement
                     break;
                 }
                 case PRE_HANDLER_CHAINS: {
-                    parseHandlerChains(reader, configName, operationList, true);
+                    parseHandlerChainsOld(reader, configName, operationList, true);
                     break;
                 }
                 case POST_HANDLER_CHAINS: {
-                    parseHandlerChains(reader, configName, operationList, false);
+                    parseHandlerChainsOld(reader, configName, operationList, false);
+                    break;
+                }
+                case PROPERTY : {
+                    final ModelNode operation = parsePropertyOld(reader, configName);
+                    operationList.add(operation);
+                    break;
+                }
+                default: {
+                    throw unexpectedElement(reader);
+                }
+            }
+        }
+    }
+
+    private void readEndpointConfig(XMLExtendedStreamReader reader, ModelNode address, List<ModelNode> operationList) throws XMLStreamException {
+        String configName = null;
+        final int count = reader.getAttributeCount();
+        for (int i = 0; i < count; i++) {
+            requireNoNamespaceAttribute(reader, i);
+            final String value = reader.getAttributeValue(i);
+            final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));
+            switch (attribute) {
+            case NAME:
+                configName = value;
+                break;
+            default:
+                throw unexpectedAttribute(reader, i);
+            }
+        }
+
+        final ModelNode node = new ModelNode();
+        node.get(OP).set(ADD);
+        node.get(OP_ADDR).set(address).add(ENDPOINT_CONFIG, configName);
+        operationList.add(node);
+        final EnumSet<Element> encountered = EnumSet.noneOf(Element.class);
+        while (reader.nextTag() != END_ELEMENT) {
+            final Element element = Element.forName(reader.getLocalName());
+            if (element != Element.PRE_HANDLER_CHAIN && element != Element.POST_HANDLER_CHAIN && element != Element.PROPERTY
+                    && !encountered.add(element)) {
+                throw unexpectedElement(reader);
+            }
+            switch (element) {
+                case PRE_HANDLER_CHAIN: {
+                    parseHandlerChain(reader, configName, operationList, true);
+                    break;
+                }
+                case POST_HANDLER_CHAIN: {
+                    parseHandlerChain(reader, configName, operationList, false);
                     break;
                 }
                 case PROPERTY : {
@@ -254,7 +337,7 @@ final class WebservicesSubsystemParser implements XMLStreamConstants, XMLElement
         }
     }
 
-    private ModelNode parseProperty(XMLExtendedStreamReader reader, final String configName) throws XMLStreamException {
+    private ModelNode parsePropertyOld(final XMLExtendedStreamReader reader, final String configName) throws XMLStreamException {
         String propertyName = null;
         String propertyValue = null;
         final EnumSet<Element> encountered = EnumSet.noneOf(Element.class);
@@ -286,7 +369,48 @@ final class WebservicesSubsystemParser implements XMLStreamConstants, XMLElement
         return operation;
     }
 
-    private ModelNode parseHandlerChains(final XMLExtendedStreamReader reader, final String configName, final List<ModelNode> operationList, final boolean isPreHandlerChain) throws XMLStreamException {
+    private ModelNode parseProperty(final XMLExtendedStreamReader reader, final String configName) throws XMLStreamException {
+        String propertyName = null;
+        String propertyValue = null;
+        final int count = reader.getAttributeCount();
+        for (int i = 0; i < count; i++) {
+            requireNoNamespaceAttribute(reader, i);
+            final String value = reader.getAttributeValue(i);
+            final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));
+            switch (attribute) {
+            case NAME:
+                propertyName = value;
+                break;
+            case VALUE:
+                propertyValue = value;
+                break;
+            default:
+                throw unexpectedAttribute(reader, i);
+            }
+        }
+
+        final EnumSet<Element> encountered = EnumSet.noneOf(Element.class);
+        while (reader.nextTag() != END_ELEMENT) {
+            final Element element = Element.forName(reader.getLocalName());
+            if (!encountered.add(element)) {
+                throw unexpectedElement(reader);
+            }
+            switch (element) {
+                default: {
+                    throw unexpectedElement(reader);
+                }
+            }
+        }
+        final ModelNode operation = new ModelNode();
+        operation.get(OP).set(ADD);
+        operation.get(OP_ADDR).add(SUBSYSTEM, WSExtension.SUBSYSTEM_NAME).add(ENDPOINT_CONFIG, configName).add(PROPERTY, propertyName);
+        if (propertyValue != null) {
+            operation.get(VALUE).set(propertyValue);
+        }
+        return operation;
+    }
+
+    private ModelNode parseHandlerChainsOld(final XMLExtendedStreamReader reader, final String configName, final List<ModelNode> operationList, final boolean isPreHandlerChain) throws XMLStreamException {
         ModelNode chainsNode = new ModelNode();
         final EnumSet<Element> encountered = EnumSet.noneOf(Element.class);
         while (reader.nextTag() != END_ELEMENT) {
@@ -297,7 +421,7 @@ final class WebservicesSubsystemParser implements XMLStreamConstants, XMLElement
 
             switch (element) {
                 case HANDLER_CHAIN: {
-                    parseHandlerChain(reader, configName, operationList, isPreHandlerChain);
+",Reduce the number of threads in StressUpdateDelete test .,0
"diff --git a/okhttp/src/main/java/okhttp3/HttpUrl.kt b/okhttp/src/main/java/okhttp3/HttpUrl.kt
index f6a7e155bdfb..b6642a885367 100644
--- a/okhttp/src/main/java/okhttp3/HttpUrl.kt
+++ b/okhttp/src/main/java/okhttp3/HttpUrl.kt
@@ -18,10 +18,10 @@ package okhttp3
 import okhttp3.HttpUrl.Companion.toHttpUrl
 import okhttp3.HttpUrl.Companion.toHttpUrlOrNull
 import okhttp3.internal.canParseAsIpAddress
-import okhttp3.internal.decodeHexDigit
 import okhttp3.internal.delimiterOffset
 import okhttp3.internal.indexOfFirstNonAsciiWhitespace
 import okhttp3.internal.indexOfLastNonAsciiWhitespace
+import okhttp3.internal.parseHexDigit
 import okhttp3.internal.publicsuffix.PublicSuffixDatabase
 import okhttp3.internal.toCanonicalHost
 import okio.Buffer
@@ -1741,8 +1741,8 @@ class HttpUrl internal constructor(
       while (i < limit) {
         codePoint = encoded.codePointAt(i)
         if (codePoint == '%'.toInt() && i + 2 < limit) {
-          val d1 = decodeHexDigit(encoded[i + 1])
-          val d2 = decodeHexDigit(encoded[i + 2])
+          val d1 = encoded[i + 1].parseHexDigit()
+          val d2 = encoded[i + 2].parseHexDigit()
           if (d1 != -1 && d2 != -1) {
             writeByte((d1 shl 4) + d2)
             i += 2
@@ -1771,8 +1771,8 @@ class HttpUrl internal constructor(
     private fun String.isPercentEncoded(pos: Int, limit: Int): Boolean {
       return pos + 2 < limit &&
           this[pos] == '%' &&
-          decodeHexDigit(this[pos + 1]) != -1 &&
-          decodeHexDigit(this[pos + 2]) != -1
+          this[pos + 1].parseHexDigit() != -1 &&
+          this[pos + 2].parseHexDigit() != -1
     }
 
     /**
diff --git a/okhttp/src/main/java/okhttp3/internal/Util.kt b/okhttp/src/main/java/okhttp3/internal/Util.kt
index 704fdbd5afee..1d2dcc4eee1a 100644
--- a/okhttp/src/main/java/okhttp3/internal/Util.kt
+++ b/okhttp/src/main/java/okhttp3/internal/Util.kt
@@ -273,10 +273,10 @@ fun checkDuration(name: String, duration: Long, unit: TimeUnit?): Int {
   return millis.toInt()
 }
 
-fun decodeHexDigit(c: Char): Int = when (c) {
-  in '0'..'9' -> c - '0'
-  in 'a'..'f' -> c - 'a' + 10
-  in 'A'..'F' -> c - 'A' + 10
+fun Char.parseHexDigit(): Int = when (this) {
+  in '0'..'9' -> this - '0'
+  in 'a'..'f' -> this - 'a' + 10
+  in 'A'..'F' -> this - 'A' + 10
   else -> -1
 }
 
diff --git a/okhttp/src/main/java/okhttp3/internal/hostnames.kt b/okhttp/src/main/java/okhttp3/internal/hostnames.kt
index 37f15cda0ac3..611b27339ec1 100644
--- a/okhttp/src/main/java/okhttp3/internal/hostnames.kt
+++ b/okhttp/src/main/java/okhttp3/internal/hostnames.kt
@@ -117,8 +117,7 @@ private fun decodeIpv6(input: String, pos: Int, limit: Int): InetAddress? {
     var value = 0
     groupOffset = i
     while (i < limit) {
-      val c = input[i]
-      val hexDigit = decodeHexDigit(c)
+      val hexDigit = input[i].parseHexDigit()
       if (hexDigit == -1) break
       value = (value shl 4) + hexDigit
       i++",Convert hex digit parser to extension function,1
"diff --git a/spring-boot-tools/spring-boot-loader/src/it/executable-jar/pom.xml b/spring-boot-tools/spring-boot-loader/src/it/executable-jar/pom.xml
index 2fffa60044..b32c0e5d4c 100644
--- a/spring-boot-tools/spring-boot-loader/src/it/executable-jar/pom.xml
+++ b/spring-boot-tools/spring-boot-loader/src/it/executable-jar/pom.xml
@@ -63,7 +63,7 @@
 					</descriptors>
 					<archive>
 						<manifest>
-							<mainClass>org.springframework.boot.load.JarLauncher</mainClass>
+							<mainClass>org.springframework.boot.loader.JarLauncher</mainClass>
 						</manifest>
 						<manifestEntries>
 							<Start-Class>org.springframework.boot.load.it.jar.EmbeddedJarStarter</Start-Class>
diff --git a/spring-boot-tools/spring-boot-loader/src/it/executable-war/pom.xml b/spring-boot-tools/spring-boot-loader/src/it/executable-war/pom.xml
index 193173d667..efa6e7b048 100644
--- a/spring-boot-tools/spring-boot-loader/src/it/executable-war/pom.xml
+++ b/spring-boot-tools/spring-boot-loader/src/it/executable-war/pom.xml
@@ -27,7 +27,7 @@
 				<configuration>
 					<archive>
 						<manifest>
-							<mainClass>org.springframework.boot.load.WarLauncher</mainClass>
+							<mainClass>org.springframework.boot.loader.WarLauncher</mainClass>
 						</manifest>
 						<manifestEntries>
 							<Start-Class>org.springframework.boot.load.it.war.embedded.EmbeddedWarStarter</Start-Class>
diff --git a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/ExecutableArchiveLauncher.java b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/ExecutableArchiveLauncher.java
index c50a13e6f5..ed93d835e0 100644
--- a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/ExecutableArchiveLauncher.java
+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/ExecutableArchiveLauncher.java
@@ -16,8 +16,12 @@
 
 package org.springframework.boot.loader;
 
+import java.net.URL;
+import java.net.URLClassLoader;
 import java.util.ArrayList;
+import java.util.LinkedHashSet;
 import java.util.List;
+import java.util.Set;
 import java.util.jar.JarEntry;
 
 import org.springframework.boot.loader.archive.Archive;
@@ -64,6 +68,21 @@ public abstract class ExecutableArchiveLauncher extends Launcher {
 		return archives;
 	}
 
+	@Override
+	protected ClassLoader createClassLoader(URL[] urls) throws Exception {
+		Set<URL> copy = new LinkedHashSet<URL>();
+		ClassLoader loader = getDefaultClassLoader();
+		if (loader instanceof URLClassLoader) {
+			for (URL url : ((URLClassLoader) loader).getURLs()) {
+				copy.add(url);
+			}
+		}
+		for (URL url : urls) {
+			copy.add(url);
+		}
+		return super.createClassLoader(copy.toArray(new URL[copy.size()]));
+	}
+
 	/**
 	 * Determine if the specified {@link JarEntry} is a nested item that should be added
 	 * to the classpath. The method is called once for each entry.
@@ -81,4 +100,20 @@ public abstract class ExecutableArchiveLauncher extends Launcher {
 	protected void postProcessClassPathArchives(List<Archive> archives) throws Exception {
 	}
 
+	private static ClassLoader getDefaultClassLoader() {
+		ClassLoader cl = null;
+		try {
+			cl = Thread.currentThread().getContextClassLoader();
+		}
+		catch (Throwable ex) {
+			// Cannot access thread context ClassLoader - falling back to system class
+			// loader...
+		}
+		if (cl == null) {
+			// No thread context class loader -> use class loader of this class.
+			cl = ExecutableArchiveLauncher.class.getClassLoader();
+		}
+		return cl;
+	}
+
 }
diff --git a/spring-boot-tools/spring-boot-loader/src/test/resources/jars/app.jar b/spring-boot-tools/spring-boot-loader/src/test/resources/jars/app.jar
index c7c485ae5d..fb02c02701 100644
Binary files a/spring-boot-tools/spring-boot-loader/src/test/resources/jars/app.jar and b/spring-boot-tools/spring-boot-loader/src/test/resources/jars/app.jar differ",Removed the builder and made the internal context object mutable . . Also various fix ups from PR review,0
"diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java
index 6e774efcd08d..e6b9c503e59a 100644
--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java
+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java
@@ -31,7 +31,6 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
-import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;
@@ -50,6 +49,8 @@
 import org.springframework.format.FormatterRegistry;
 import org.springframework.http.converter.HttpMessageConverter;
 import org.springframework.util.StringUtils;
+import org.springframework.validation.DefaultMessageCodesResolver;
+import org.springframework.validation.MessageCodesResolver;
 import org.springframework.web.accept.ContentNegotiationManager;
 import org.springframework.web.context.request.RequestContextListener;
 import org.springframework.web.filter.HiddenHttpMethodFilter;
@@ -135,6 +136,9 @@ public static class WebMvcAutoConfigurationAdapter extends WebMvcConfigurerAdapt
 		@Value(""${spring.resources.cachePeriod:}"")
 		private Integer cachePeriod;
 
+		@Value(""${spring.mvc.message-codes-resolver.format:}"")
+		private String messageCodesResolverFormat = """";
+
 		@Value(""${spring.mvc.locale:}"")
 		private String locale = """";
 
@@ -195,6 +199,15 @@ public LocaleResolver localeResolver() {
 			return new FixedLocaleResolver(StringUtils.parseLocaleString(this.locale));
 		}
 
+		@Bean
+		@ConditionalOnMissingBean(MessageCodesResolver.class)
+		@ConditionalOnExpression(""'${spring.mvc.message-codes-resolver.format:}' != ''"")
+		public MessageCodesResolver messageCodesResolver() {
+			DefaultMessageCodesResolver resolver = new DefaultMessageCodesResolver();
+			resolver.setMessageCodeFormatter(DefaultMessageCodesResolver.Format.valueOf(messageCodesResolverFormat));
+			return resolver;
+		}
+		
 		@Override
 		public void addFormatters(FormatterRegistry registry) {
 			for (Converter<?, ?> converter : getBeansOfType(Converter.class)) {
diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfigurationTests.java
index eeef548d041f..9a863f85f058 100644
--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfigurationTests.java
+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfigurationTests.java
@@ -16,6 +16,12 @@
 
 package org.springframework.boot.autoconfigure.web;
 
+import static org.hamcrest.Matchers.equalTo;
+import static org.hamcrest.Matchers.instanceOf;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertThat;
+
 import java.lang.reflect.Field;
 import java.util.LinkedHashMap;
 import java.util.List;
@@ -43,6 +49,7 @@
 import org.springframework.mock.web.MockHttpServletRequest;
 import org.springframework.util.ReflectionUtils;
 import org.springframework.util.StringUtils;
+import org.springframework.validation.MessageCodesResolver;
 import org.springframework.web.servlet.HandlerAdapter;
 import org.springframework.web.servlet.HandlerMapping;
 import org.springframework.web.servlet.LocaleResolver;
@@ -55,12 +62,6 @@
 import org.springframework.web.servlet.resource.ResourceHttpRequestHandler;
 import org.springframework.web.servlet.view.AbstractView;
 
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.instanceOf;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertThat;
-
 /**
  * Tests for {@link WebMvcAutoConfiguration}.
  * 
@@ -180,6 +181,30 @@ public void overrideLocale() throws Exception {
 		assertThat(locale.toString(), equalTo(""en_UK""));
 	}
 
+	@Test(expected = NoSuchBeanDefinitionException.class)
+	public void noMessageCodeResolver() throws Exception {
+		this.context = new AnnotationConfigEmbeddedWebApplicationContext();
+		this.context.register(AllResources.class, Config.class,
+				WebMvcAutoConfiguration.class,
+				HttpMessageConvertersAutoConfiguration.class,
+				PropertyPlaceholderAutoConfiguration.class);
+		this.context.refresh();
+		this.context.getBean(MessageCodesResolver.class);
+	}
+
+	@Test
+	public void overrideMessageCodesFormat() throws Exception {
+		this.context = new AnnotationConfigEmbeddedWebApplicationContext();
+		EnvironmentTestUtils.addEnvironment(this.context,
+				""spring.mvc.message-codes-resolver.format:POSTFIX_ERROR_CODE"");
+		this.context.register(AllResources.class, Config.class,
+				WebMvcAutoConfiguration.class,
+				HttpMessageConvertersAutoConfiguration.class,
+				PropertyPlaceholderAutoConfiguration.class);
+		this.context.refresh();
+		this.context.getBean(MessageCodesResolver.class);
+	}
+
 	@SuppressWarnings(""unchecked"")
 	protected Map<String, List<Resource>> getMappingLocations()
 			throws IllegalAccessException {
diff --git a/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc
index 15abb1e05756..a9232a8f9580 100644
--- a/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc
+++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc
@@ -68,6 +68,7 @@ content into your application; rather pick only the properties that you need.
 	http.mappers.json-pretty-print=false # pretty print JSON
 	http.mappers.json-sort-keys=false # sort keys
 	spring.mvc.locale= # set fixed locale, e.g. en_UK
+	spring.mvc.message-codes-resolver.format= # PREFIX_ERROR_CODE / POSTFIX_ERROR_CODE
 	spring.view.prefix= # MVC view prefix
 	spring.view.suffix= # ... and suffix
 	spring.resources.cache-period= # cache timeouts in headers sent to browser",Add messagecode resolver format based on application property,1
"diff --git a/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/QueueDispatcher.java b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/QueueDispatcher.java
index c9c206c17c8a..bb36cdf6967a 100644
--- a/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/QueueDispatcher.java
+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/QueueDispatcher.java
@@ -18,12 +18,14 @@
 import java.net.HttpURLConnection;
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.LinkedBlockingQueue;
+import java.util.logging.Logger;
 
 /**
  * Default dispatcher that processes a script of responses. Populate the script
  * by calling {@link #enqueueResponse(MockResponse)}.
  */
 public class QueueDispatcher extends Dispatcher {
+  private static final Logger logger = Logger.getLogger(QueueDispatcher.class.getName());
   protected final BlockingQueue<MockResponse> responseQueue = new LinkedBlockingQueue<>();
   private MockResponse failFastResponse;
 
@@ -31,7 +33,7 @@ public class QueueDispatcher extends Dispatcher {
     // To permit interactive/browser testing, ignore requests for favicons.
     final String requestLine = request.getRequestLine();
     if (requestLine != null && requestLine.equals(""GET /favicon.ico HTTP/1.1"")) {
-      System.out.println(""served "" + requestLine);
+      logger.info(""served "" + requestLine);
       return new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_FOUND);
     }",Log favicon request instead of using standard output,1
"diff --git a/src/org/junit/experimental/theories/Theories.java b/src/org/junit/experimental/theories/Theories.java
index e4401fdd052b..71dd830c2cab 100644
--- a/src/org/junit/experimental/theories/Theories.java
+++ b/src/org/junit/experimental/theories/Theories.java
@@ -12,11 +12,12 @@
 import org.junit.experimental.theories.PotentialAssignment.CouldNotGenerateValueException;
 import org.junit.experimental.theories.internal.Assignments;
 import org.junit.experimental.theories.internal.ParameterizedAssertionError;
-import org.junit.internal.runners.InitializationError;
 import org.junit.internal.runners.JUnit4ClassRunner;
 import org.junit.internal.runners.links.WithBeforeAndAfter;
 import org.junit.internal.runners.links.Link;
 import org.junit.internal.runners.model.EachTestNotifier;
+import org.junit.internal.runners.model.ErrorList;
+import org.junit.internal.runners.model.InitializationError;
 import org.junit.internal.runners.model.TestMethod;
 
 @SuppressWarnings(""restriction"")
@@ -26,7 +27,7 @@ public Theories(Class<?> klass) throws InitializationError {
 	}
 
 	@Override
-	protected void collectInitializationErrors(List<Throwable> errors) {
+	protected void collectInitializationErrors(ErrorList errors) {
 	}
 
 	@Override
diff --git a/src/org/junit/internal/requests/ClassRequest.java b/src/org/junit/internal/requests/ClassRequest.java
index 26aeff844e44..54309f980c7e 100644
--- a/src/org/junit/internal/requests/ClassRequest.java
+++ b/src/org/junit/internal/requests/ClassRequest.java
@@ -1,10 +1,10 @@
 package org.junit.internal.requests;
 
 import org.junit.Ignore;
-import org.junit.internal.runners.InitializationError;
 import org.junit.internal.runners.JUnit38ClassRunner;
 import org.junit.internal.runners.JUnit4ClassRunner;
 import org.junit.internal.runners.SuiteMethod;
+import org.junit.internal.runners.model.InitializationError;
 import org.junit.runner.Request;
 import org.junit.runner.RunWith;
 import org.junit.runner.Runner;
diff --git a/src/org/junit/internal/requests/ErrorReportingRequest.java b/src/org/junit/internal/requests/ErrorReportingRequest.java
index bbe79a21f91b..d45f03d1d8ba 100644
--- a/src/org/junit/internal/requests/ErrorReportingRequest.java
+++ b/src/org/junit/internal/requests/ErrorReportingRequest.java
@@ -6,7 +6,7 @@
 
 import org.junit.internal.runners.CompositeRunner;
 import org.junit.internal.runners.ErrorReportingRunner;
-import org.junit.internal.runners.InitializationError;
+import org.junit.internal.runners.model.InitializationError;
 import org.junit.runner.Description;
 import org.junit.runner.Request;
 import org.junit.runner.Runner;
diff --git a/src/org/junit/internal/runners/JUnit4ClassRunner.java b/src/org/junit/internal/runners/JUnit4ClassRunner.java
index 243c365ace0f..4ddf4c45cd61 100644
--- a/src/org/junit/internal/runners/JUnit4ClassRunner.java
+++ b/src/org/junit/internal/runners/JUnit4ClassRunner.java
@@ -1,22 +1,23 @@
 package org.junit.internal.runners;
 
 import java.lang.annotation.Annotation;
-import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.Iterator;
 import java.util.List;
 
-import org.junit.internal.runners.links.WithBeforeAndAfter;
 import org.junit.internal.runners.links.ExpectingException;
 import org.junit.internal.runners.links.IgnoreTest;
+import org.junit.internal.runners.links.IgnoreViolatedAssumptions;
 import org.junit.internal.runners.links.Invoke;
 import org.junit.internal.runners.links.Link;
-import org.junit.internal.runners.links.IgnoreViolatedAssumptions;
 import org.junit.internal.runners.links.Notifying;
+import org.junit.internal.runners.links.WithBeforeAndAfter;
 import org.junit.internal.runners.links.WithTimeout;
-import org.junit.internal.runners.model.ReflectiveCallable;
 import org.junit.internal.runners.model.EachTestNotifier;
+import org.junit.internal.runners.model.ErrorList;
+import org.junit.internal.runners.model.InitializationError;
+import org.junit.internal.runners.model.ReflectiveCallable;
 import org.junit.internal.runners.model.TestClass;
 import org.junit.internal.runners.model.TestMethod;
 import org.junit.runner.Description;
@@ -45,13 +46,12 @@ protected List<TestMethod> getTestMethods() {
 	}
 
 	private void validate() throws InitializationError {
-		List<Throwable> errors= new ArrayList<Throwable>();
+		ErrorList errors= new ErrorList();
 		collectInitializationErrors(errors);
-		if (!errors.isEmpty())
-			throw new InitializationError(errors);
+		errors.assertEmpty();
 	}
 
-	protected void collectInitializationErrors(List<Throwable> errors) {
+	protected void collectInitializationErrors(ErrorList errors) {
 		fTestClass.validateMethodsForDefaultRunner(errors);
 	}
 
diff --git a/src/org/junit/internal/runners/MethodValidator.java b/src/org/junit/internal/runners/MethodValidator.java
deleted file mode 100644
index 76afa19f5f40..000000000000
--- a/src/org/junit/internal/runners/MethodValidator.java
+++ /dev/null
@@ -1,22 +0,0 @@
-package org.junit.internal.runners;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import org.junit.internal.runners.model.TestClass;
-
-public class MethodValidator {
-
-	public final List<Throwable> fErrors= new ArrayList<Throwable>();
-
-	public TestClass fTestClass;
-
-	public MethodValidator(TestClass testClass) {
-		fTestClass = testClass;
-	}
-
-	public void assertValid() throws InitializationError {
-		if (!fErrors.isEmpty())
-			throw new InitializationError(fErrors);
-	}
-}
diff --git a/src/org/junit/internal/runners/model/ErrorList.java b/src/org/junit/internal/runners/model/ErrorList.java
new file mode 100644
index 000000000000..d117169315f2
--- /dev/null
+++ b/src/org/junit/internal/runners/model/ErrorList.java
@@ -0,0 +1,22 @@
+package org.junit.internal.runners.model;
+
+import java.util.ArrayList;
+import java.util.List;
+
+
+public class ErrorList {
+	private final List<Throwable> fErrors= new ArrayList<Throwable>();
+
+	public void assertEmpty() throws InitializationError {
+		if (!fErrors.isEmpty())
+			throw new InitializationError(fErrors);
+	}
+	
+	public void add(Throwable e) {
+		fErrors.add(e);
+	}
+
+	public boolean isEmpty() {
+		return fErrors.isEmpty();
+	}
+}
diff --git a/src/org/junit/internal/runners/InitializationError.java b/src/org/junit/internal/runners/model/InitializationError.java
similarity index 92%
rename from src/org/junit/internal/runners/InitializationError.java
rename to src/org/junit/internal/runners/model/InitializationError.java
index 70c540b05082..599c33fc617d 100644
--- a/src/org/junit/internal/runners/InitializationError.java
+++ b/src/org/junit/internal/runners/model/InitializationError.java
@@ -1,4 +1,4 @@
-package org.junit.internal.runners;
+package org.junit.internal.runners.model;
 
 import java.util.Arrays;
 import java.util.List;
diff --git a/src/org/junit/internal/runners/model/TestClass.java b/src/org/junit/internal/runners/model/TestClass.java
index ace207c7e313..8924dcde9828 100644
--- a/src/org/junit/internal/runners/model/TestClass.java
+++ b/src/org/junit/internal/runners/model/TestClass.java
@@ -83,7 +83,7 @@ public void runProtected(RunNotifier notifier, Description description, Runnable
 		runProtected(new EachTestNotifier(notifier, description), runnable, null);
 	}
 
-	public void validateMethods(Class<? extends Annotation> annotation, boolean isStatic, List<Throwable> errors) {
+	public void validateMethods(Class<? extends Annotation> annotation, boolean isStatic, ErrorList errors) {
 		List<TestMethod> methods= getAnnotatedMethods(annotation);
 		
 		for (TestMethod eachTestMethod : methods) {
@@ -91,12 +91,12 @@ public void validateMethods(Class<? extends Annotation> annotation, boolean isSt
 		}
 	}
 
-	public void validateStaticMethods(List<Throwable> errors) {
+	public void validateStaticMethods(ErrorList errors) {
 		validateMethods(BeforeClass.class, true, errors);
 		validateMethods(AfterClass.class, true, errors);
 	}
 
-	public void validateNoArgConstructor(List<Throwable> errors) {
+	public void validateNoArgConstructor(ErrorList errors) {
 		try {
 			getConstructor();
 		} catch (Exception e) {
@@ -104,7 +104,7 @@ public void validateNoArgConstructor(List<Throwable> errors) {
 		}
 	}
 
-	public void validateInstanceMethods(List<Throwable> errors) {
+	public void validateInstanceMethods(ErrorList errors) {
 		validateMethods(After.class, false, errors);
 		validateMethods(Before.class, false, errors);
 		validateMethods(Test.class, false, errors);
@@ -114,7 +114,7 @@ public void validateInstanceMethods(List<Throwable> errors) {
 			errors.add(new Exception(""No runnable methods""));
 	}
 
-	public void validateMethodsForDefaultRunner(List<Throwable> errors) {
+	public void validateMethodsForDefaultRunner(ErrorList errors) {
 		validateNoArgConstructor(errors);
 		validateStaticMethods(errors);
 		validateInstanceMethods(errors);
diff --git a/src/org/junit/internal/runners/model/TestMethod.java b/src/org/junit/internal/runners/model/TestMethod.java
index 44c21337aecf..ec3169cbddff 100644
--- a/src/org/junit/internal/runners/model/TestMethod.java
+++ b/src/org/junit/internal/runners/model/TestMethod.java
@@ -77,7 +77,7 @@ public Class<?>[] getParameterTypes() {
 		return fMethod.getParameterTypes();
 	}
 
-	public void validate(boolean isStatic, List<Throwable> errors) {
+	public void validate(boolean isStatic, ErrorList errors) {
 		if (Modifier.isStatic(fMethod.getModifiers()) != isStatic) {
 			String state= isStatic ? ""should"" : ""should not"";
 			errors.add(new Exception(""Method "" + fMethod.getName() + ""() ""
diff --git a/src/org/junit/runners/Enclosed.java b/src/org/junit/runners/Enclosed.java
index afe473da9930..3c258e5fbdd9 100644
--- a/src/org/junit/runners/Enclosed.java
+++ b/src/org/junit/runners/Enclosed.java
@@ -1,6 +1,6 @@
 package org.junit.runners;
 
-import org.junit.internal.runners.InitializationError;
+import org.junit.internal.runners.model.InitializationError;
 
 public class Enclosed extends Suite {
 	public Enclosed(Class<?> klass) throws InitializationError {
diff --git a/src/org/junit/runners/Parameterized.java b/src/org/junit/runners/Parameterized.java
index fbd86fec861e..ddf513ca1e29 100644
--- a/src/org/junit/runners/Parameterized.java
+++ b/src/org/junit/runners/Parameterized.java
@@ -12,9 +12,9 @@
 
 import org.junit.Assert;
 import org.junit.internal.runners.CompositeRunner;
-import org.junit.internal.runners.InitializationError;
 import org.junit.internal.runners.JUnit4ClassRunner;
-import org.junit.internal.runners.MethodValidator;
+import org.junit.internal.runners.model.ErrorList;
+import org.junit.internal.runners.model.InitializationError;
 import org.junit.internal.runners.model.TestClass;
 import org.junit.internal.runners.model.TestMethod;
 import org.junit.runner.notification.RunNotifier;
@@ -87,7 +87,7 @@ private Constructor<?> getOnlyConstructor() {
 		}
 		
 		@Override
-		protected void collectInitializationErrors(List<Throwable> errors) {
+		protected void collectInitializationErrors(ErrorList errors) {
 			// do nothing: validated before.
 		}
 		
@@ -108,12 +108,10 @@ public Parameterized(Class<?> klass) throws Throwable {
 		super(klass.getName());
 		fTestClass= new TestClass(klass);
 		
-		// TODO: (Oct 9, 2007 2:18:54 PM) Destroy MethodValidator (I thought I already had)
-
-		MethodValidator methodValidator= new MethodValidator(fTestClass);
-		methodValidator.fTestClass.validateStaticMethods(methodValidator.fErrors);
-		methodValidator.fTestClass.validateInstanceMethods(methodValidator.fErrors);
-		methodValidator.assertValid();
+		ErrorList errors = new ErrorList();
+		fTestClass.validateStaticMethods(errors);
+		fTestClass.validateInstanceMethods(errors);
+		errors.assertEmpty();
 		
 		int i= 0;
 		for (final Object each : getParametersList()) {
diff --git a/src/org/junit/runners/Suite.java b/src/org/junit/runners/Suite.java
index 92fad7bf4a0d..3dd28bbefb15 100644
--- a/src/org/junit/runners/Suite.java
+++ b/src/org/junit/runners/Suite.java
@@ -8,8 +8,8 @@
 import java.util.Set;
 
 import org.junit.internal.runners.CompositeRunner;
-import org.junit.internal.runners.InitializationError;
-import org.junit.internal.runners.MethodValidator;
+import org.junit.internal.runners.model.ErrorList;
+import org.junit.internal.runners.model.InitializationError;
 import org.junit.internal.runners.model.TestClass;
 import org.junit.runner.Request;
 import org.junit.runner.Runner;
@@ -58,9 +58,9 @@ protected Suite(Class<?> klass, Class<?>[] annotatedClasses) throws Initializati
 		removeParent(klass);
 
 		fTestClass= new TestClass(klass);
-		MethodValidator methodValidator= new MethodValidator(fTestClass);
-		methodValidator.fTestClass.validateStaticMethods(methodValidator.fErrors);
-		methodValidator.assertValid();
+		ErrorList errors= new ErrorList();
+		fTestClass.validateStaticMethods(errors);
+		errors.assertEmpty();
 	}
 
 	private Class<?> addParent(Class<?> parent) throws InitializationError {
@@ -80,9 +80,9 @@ private static Class<?>[] getAnnotatedClasses(Class<?> klass) throws Initializat
 		return annotation.value();
 	}
 	
-	protected void validate(MethodValidator methodValidator) {
-		methodValidator.fTestClass.validateStaticMethods(methodValidator.fErrors);
-		methodValidator.fTestClass.validateInstanceMethods(methodValidator.fErrors);
+	protected void validate(ErrorList errors) {
+		fTestClass.validateStaticMethods(errors);
+		fTestClass.validateInstanceMethods(errors);
 	}
 	
 	@Override
diff --git a/src/org/junit/tests/experimental/theories/extendingwithstubs/StubbedTheories.java b/src/org/junit/tests/experimental/theories/extendingwithstubs/StubbedTheories.java
index 661a7bccc7fa..966b79804ed4 100644
--- a/src/org/junit/tests/experimental/theories/extendingwithstubs/StubbedTheories.java
+++ b/src/org/junit/tests/experimental/theories/extendingwithstubs/StubbedTheories.java
@@ -8,7 +8,7 @@
 import org.junit.experimental.theories.ParameterSignature;
 import org.junit.experimental.theories.Theories;
 import org.junit.experimental.theories.internal.Assignments;
-import org.junit.internal.runners.InitializationError;
+import org.junit.internal.runners.model.InitializationError;
 import org.junit.internal.runners.model.TestMethod;
 
 public class StubbedTheories extends Theories {
diff --git a/src/org/junit/tests/running/methods/ParameterizedTestMethodTest.java b/src/org/junit/tests/running/methods/ParameterizedTestMethodTest.java
index 9f6e6b449479..c0e40d562f99 100644
--- a/src/org/junit/tests/running/methods/ParameterizedTestMethodTest.java
+++ b/src/org/junit/tests/running/methods/ParameterizedTestMethodTest.java
@@ -13,8 +13,8 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
-import org.junit.internal.runners.InitializationError;
 import org.junit.internal.runners.JUnit4ClassRunner;
+import org.junit.internal.runners.model.InitializationError;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 import org.junit.runners.Parameterized.Parameters;
diff --git a/src/org/junit/tests/running/methods/TestMethodTest.java b/src/org/junit/tests/running/methods/TestMethodTest.java
index 8045f930142a..19ad7a3ff587 100644
--- a/src/org/junit/tests/running/methods/TestMethodTest.java
+++ b/src/org/junit/tests/running/methods/TestMethodTest.java
@@ -1,6 +1,7 @@
 package org.junit.tests.running.methods;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
 import java.util.Collections;
@@ -14,9 +15,9 @@
 import org.junit.BeforeClass;
 import org.junit.Ignore;
 import org.junit.Test;
-import org.junit.internal.runners.InitializationError;
-import org.junit.internal.runners.MethodValidator;
 import org.junit.internal.runners.JUnit4ClassRunner;
+import org.junit.internal.runners.model.ErrorList;
+import org.junit.internal.runners.model.InitializationError;
 import org.junit.internal.runners.model.TestClass;
 import org.junit.runner.JUnitCore;
 import org.junit.runner.Result;
@@ -121,10 +122,10 @@ public static class Confused {
 	}
 	
 	@Test public void overloaded() {
-		MethodValidator validator= new MethodValidator(new TestClass(Confused.class));
-		validator.fTestClass.validateMethodsForDefaultRunner(validator.fErrors);
-		List<Throwable> errors= validator.fErrors;
-		assertEquals(1, errors.size());
+		TestClass testClass= new TestClass(Confused.class);
+		ErrorList errors= new ErrorList();
+		testClass.validateMethodsForDefaultRunner(errors);
+		assertFalse(errors.isEmpty());
 	}
 	
 	public static class OnlyTestIsIgnored {
diff --git a/src/org/junit/tests/validation/InaccessibleBaseClassTest.java b/src/org/junit/tests/validation/InaccessibleBaseClassTest.java
index 05fd0230963e..8b1533959256 100644
--- a/src/org/junit/tests/validation/InaccessibleBaseClassTest.java
+++ b/src/org/junit/tests/validation/InaccessibleBaseClassTest.java
@@ -1,16 +1,17 @@
 package org.junit.tests.validation;
 
+import static org.junit.Assert.assertFalse;
 import org.junit.Test;
-import org.junit.internal.runners.InitializationError;
-import org.junit.internal.runners.MethodValidator;
+import org.junit.internal.runners.model.ErrorList;
 import org.junit.internal.runners.model.TestClass;
 import org.junit.tests.validation.anotherpackage.Sub;
 
 public class InaccessibleBaseClassTest {	
-	@Test(expected=InitializationError.class)
-	public void inaccessibleBaseClassIsCaughtAtValidation() throws InitializationError {
-		MethodValidator methodValidator= new MethodValidator(new TestClass(Sub.class));
-		methodValidator.fTestClass.validateMethodsForDefaultRunner(methodValidator.fErrors);
-		methodValidator.assertValid();
+	@Test
+	public void inaccessibleBaseClassIsCaughtAtValidation() {
+		TestClass testClass= new TestClass(Sub.class);
+		ErrorList errors= new ErrorList();
+		testClass.validateMethodsForDefaultRunner(errors);
+		assertFalse(errors.isEmpty());
 	}
 }","Removed MethodValidator, replaced with ErrorList, which moved to model package with InitializationError",1
"diff --git a/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/ChildData.java b/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/ChildData.java
index e33cb784..545f9af3 100644
--- a/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/ChildData.java
+++ b/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/ChildData.java
@@ -17,6 +17,7 @@ package com.netflix.curator.framework.recipes.cache;
 
 import org.apache.zookeeper.data.Stat;
 
+@SuppressWarnings({""LoopStatementThatDoesntLoop""})
 public class ChildData implements Comparable<ChildData>
 {
     private final String    path;
@@ -31,9 +32,34 @@ public class ChildData implements Comparable<ChildData>
         this.data = data;
     }
 
-    boolean     isComplete()
+    boolean     isComplete(PathChildrenCacheMode mode)
     {
-        return (path != null) && (stat != null) && (data != null);
+        boolean     isComplete = false;
+        if ( path != null )
+        {
+            switch ( mode )
+            {
+                case CACHE_DATA_AND_STAT:
+                {
+                    isComplete = (stat != null) && (data != null);
+                    break;
+                }
+                
+                case CACHE_DATA:
+                {
+                    isComplete = (data != null);
+                    break;
+                }
+
+                case CACHE_PATHS_ONLY:
+                {
+                    isComplete = true;
+                    break;
+                }
+            }
+        }
+
+        return isComplete;
     }
 
     long        getThisObjectCreationTimeMs()
@@ -79,33 +105,47 @@ public class ChildData implements Comparable<ChildData>
         return path.hashCode();
     }
 
-    public ChildData setPath(String path)
-    {
-        return new ChildData(path, stat, data);
-    }
-
-    public ChildData setStat(Stat stat)
-    {
-        return new ChildData(path, stat, data);
-    }
-
-    public ChildData setData(byte[] data)
-    {
-        return new ChildData(path, stat, data);
-    }
-
+    /**
+     * Returns the full path of the this child
+     *
+     * @return full path
+     */
     public String getPath()
     {
         return path;
     }
 
+    /**
+     * Returns the stat data for this child when the cache mode is {@link PathChildrenCacheMode#CACHE_DATA_AND_STAT}
+     *
+     * @return stat or null
+     */
     public Stat getStat()
     {
         return stat;
     }
 
+    /**
+     * <p>Returns the node data for this child when the cache mode is {@link PathChildrenCacheMode#CACHE_DATA_AND_STAT}
+     * or {@link PathChildrenCacheMode#CACHE_DATA}.</p>
+     *
+     * <p><b>NOTE:</b> the byte array returned is the raw reference of this instance's field. If you change
+     * the values in the array any other callers to this method will see the change.</p>
+     *
+     * @return node data or null
+     */
     public byte[] getData()
     {
         return data;
     }
+
+    ChildData setStat(Stat stat)
+    {
+        return new ChildData(path, stat, data);
+    }
+
+    ChildData setData(byte[] data)
+    {
+        return new ChildData(path, stat, data);
+    }
 }
diff --git a/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCache.java b/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCache.java
index 54835545..80e0d754 100644
--- a/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCache.java
+++ b/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCache.java
@@ -17,13 +17,12 @@ package com.netflix.curator.framework.recipes.cache;
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
-import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.google.common.io.Closeables;
 import com.google.common.util.concurrent.MoreExecutors;
-import com.netflix.curator.framework.api.CuratorEvent;
 import com.netflix.curator.framework.CuratorFramework;
+import com.netflix.curator.framework.api.CuratorEvent;
 import com.netflix.curator.framework.api.CuratorListener;
 import com.netflix.curator.utils.ZKPaths;
 import org.apache.zookeeper.WatchedEvent;
@@ -31,7 +30,6 @@ import org.apache.zookeeper.Watcher;
 import org.apache.zookeeper.data.Stat;
 import java.io.Closeable;
 import java.io.IOException;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.BlockingQueue;
@@ -53,10 +51,13 @@ import java.util.concurrent.ThreadFactory;
  */
 public class PathChildrenCache implements Closeable
 {
-    private final CuratorFramework client;
+    private final CuratorFramework          client;
     private final String                    path;
+    private final PathChildrenCacheMode     mode;
     private final ExecutorService           executorService;
 
+    private static final ChildData          existingDataMarker = new ChildData(null, null, null);
+
     private final BlockingQueue<EventEntry>                         listenerEvents = new LinkedBlockingQueue<EventEntry>();
     private final Map<PathChildrenCacheListener, ListenerEntry>     listeners = Maps.newConcurrentMap();
     private final Map<String, ChildData>                            currentData = Maps.newConcurrentMap();
@@ -127,26 +128,27 @@ public class PathChildrenCache implements Closeable
         }
     }
 
-    private static final int                EXPIRE_INCOMING_TIME_MS = 5 * 60 * 60 * 1000;   // 5 minutes
-
     /**
      * @param client the client
      * @param path path to watch
+     * @param mode caching mode
      */
-    public PathChildrenCache(CuratorFramework client, String path)
+    public PathChildrenCache(CuratorFramework client, String path, PathChildrenCacheMode mode)
     {
-        this(client, path, Executors.defaultThreadFactory());
+        this(client, path, mode, Executors.defaultThreadFactory());
     }
 
     /**
      * @param client the client
      * @param path path to watch
+     * @param mode caching mode
      * @param threadFactory factory to use when creating internal threads
      */
-    public PathChildrenCache(CuratorFramework client, String path, ThreadFactory threadFactory)
+    public PathChildrenCache(CuratorFramework client, String path, PathChildrenCacheMode mode, ThreadFactory threadFactory)
     {
         this.client = client;
         this.path = path;
+        this.mode = mode;
         executorService = Executors.newFixedThreadPool(1, threadFactory);
     }
 
@@ -222,7 +224,7 @@ public class PathChildrenCache implements Closeable
     }
 
     /**
-     * Return a copy of the current data. There are no guarantees of accuracy. This is
+     * Return the current data. There are no guarantees of accuracy. This is
      * merely the most recent view of the data. The data is returned in sorted order.
      *
      * @return list of children and data
@@ -232,6 +234,19 @@ public class PathChildrenCache implements Closeable
         return ImmutableList.copyOf(Sets.<ChildData>newTreeSet(currentData.values()));
     }
 
+    /**
+     * Return the current data for the given path. There are no guarantees of accuracy. This is
+     * merely the most recent view of the data. If there is no child with that path, <code>null</code>
+     * is returned.
+     *
+     * @param fullPath full path to the node to check
+     * @return data or null
+     */
+    public ChildData            getCurrentData(String fullPath)
+    {
+        return currentData.get(fullPath);
+    }
+
     /**
      * Clear out current data and begin a new query on the path
      *
@@ -240,12 +255,12 @@ public class PathChildrenCache implements Closeable
     public void clearAndRefresh() throws Exception
     {
         currentData.clear();
-        incomingData.clear();
         refresh();
     }
 
     private void refresh() throws Exception
     {
+        incomingData.clear();
         client.getChildren().usingWatcher(watcher).inBackground().forPath(path);
     }
 
@@ -331,7 +346,7 @@ public class PathChildrenCache implements Closeable
         {
             case CHILDREN:
             {
-                processChildren(event.getChildren(), true);
+                processChildren(event.getChildren());
                 break;
             }
 
@@ -371,20 +386,13 @@ public class PathChildrenCache implements Closeable
     {
         switch ( watchedEvent.getType() )
         {
-            case NodeCreated:
             case NodeDataChanged:
             {
-                processNodeCreated(ZKPaths.getNodeFromPath(watchedEvent.getPath()));
-                break;
-            }
-
-            case NodeDeleted:
-            {
-                processNodeDeleted(watchedEvent.getPath());
+                processDataChanged(watchedEvent.getPath());
                 break;
             }
 
-            case NodeChildrenChanged:
+            default:
             {
                 refresh();
                 break;
@@ -392,43 +400,31 @@ public class PathChildrenCache implements Closeable
         }
     }
 
-    private void processNodeCreated(String path) throws Exception
+    private void processDataChanged(String path) throws Exception
     {
-        List<String>        l = Lists.newArrayList(path);
-        processChildren(l, false);
-    }
-
-    private void processNodeDeleted(String path)
-    {
-        ChildData       oldData = currentData.remove(path);
-        incomingData.remove(path);
-
-        if ( oldData != null )
-        {
-            listenerEvents.offer(new EventEntry(new PathChildrenCacheEvent(PathChildrenCacheEvent.Type.CHILD_REMOVED, oldData)));
-        }
+        addIncomingPath(path);
     }
 
     private void        checkSetCurrent()
     {
-        Iterator<ChildData>     iterator = incomingData.values().iterator();
-        while ( iterator.hasNext() )
+        for ( Map.Entry<String, ChildData> entry : incomingData.entrySet() )
         {
-            ChildData       data = iterator.next();
-            if ( data.isComplete() )
+            String          path = entry.getKey();
+            ChildData       data = entry.getValue();
+
+            if ( data.isComplete(mode) )
             {
                 boolean     isNew = (currentData.put(data.getPath(), data) == null);
-                iterator.remove();
+                incomingData.remove(path);
 
                 listenerEvents.offer(new EventEntry(new PathChildrenCacheEvent(isNew ? PathChildrenCacheEvent.Type.CHILD_ADDED : PathChildrenCacheEvent.Type.CHILD_UPDATED, data)));
             }
-            else
+            else if ( isTheExistingDataMarker(data) )
             {
-                long        age = System.currentTimeMillis() - data.getThisObjectCreationTimeMs();
-                if ( age >= EXPIRE_INCOMING_TIME_MS )
-                {
-                    iterator.remove();
-                }
+                ChildData       removedData = currentData.remove(path);
+                incomingData.remove(path);
+
+                listenerEvents.offer(new EventEntry(new PathChildrenCacheEvent(PathChildrenCacheEvent.Type.CHILD_REMOVED, removedData)));
             }
         }
     }
@@ -457,23 +453,51 @@ public class PathChildrenCache implements Closeable
         checkSetCurrent();
     }
 
-    private void processChildren(List<String> children, boolean doRetain) throws Exception
+    private void processChildren(List<String> children) throws Exception
     {
-        for ( String child : children )
+        for ( String path : currentData.keySet() )
         {
-            String actualPath = ZKPaths.makePath(path, child);
-            incomingData.put(actualPath, new ChildData(actualPath, null, null));
+            incomingData.put(path, existingDataMarker);
         }
-        if ( doRetain )
+
+        for ( String child : children )
         {
-            currentData.keySet().retainAll(incomingData.keySet());
+            String      actualPath = ZKPaths.makePath(path, child);
+            addIncomingPath(actualPath);
         }
 
-        for ( String child : children )
+        checkSetCurrent();
+    }
+
+    private void addIncomingPath(String actualPath) throws Exception
+    {
+        incomingData.put(actualPath, new ChildData(actualPath, null, null));
+
+        switch ( mode )
         {
-            String actualPath = ZKPaths.makePath(path, child);
-            client.getData().usingWatcher(watcher).inBackground().forPath(actualPath);
-            client.checkExists().usingWatcher(watcher).inBackground().forPath(actualPath);
+            case CACHE_DATA_AND_STAT:
+            {
+                client.checkExists().inBackground().forPath(actualPath);    // to get the stat
+                client.getData().usingWatcher(watcher).inBackground().forPath(actualPath);  // watcher checks for data change
+                break;
+            }
+
+            case CACHE_DATA:
+            {
+                client.getData().usingWatcher(watcher).inBackground().forPath(actualPath);  // watcher checks for data change
+                break;
+            }
+
+            case CACHE_PATHS_ONLY:
+            {
+                // do nothing
+                break;
+            }
         }
     }
+
+    private static boolean isTheExistingDataMarker(ChildData data)
+    {
+        return data == existingDataMarker;
+    }
 }
diff --git a/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCacheMode.java b/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCacheMode.java
new file mode 100644
index 00000000..2f1264ef
--- /dev/null
+++ b/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCacheMode.java
@@ -0,0 +1,25 @@
+package com.netflix.curator.framework.recipes.cache;
+
+/**
+ * Controls which data is cached
+ */
+public enum PathChildrenCacheMode
+{
+    /**
+     * The cache will hold all the children, the data for each child node
+     * and the stat for each child node
+     */
+    CACHE_DATA_AND_STAT,
+
+    /**
+     * The cache will hold all the children and the data for each child node.
+     * {@link ChildData#getStat()} will return <code>null</code>.
+     */
+    CACHE_DATA,
+
+    /**
+     * The cache will hold only the children path names.
+     * {@link ChildData#getStat()} and {@link ChildData#getData()} will both return <code>null</code>.
+     */
+    CACHE_PATHS_ONLY
+}
diff --git a/curator-recipes/src/test/java/com/netflix/curator/framework/recipes/cache/TestPathChildrenCache.java b/curator-recipes/src/test/java/com/netflix/curator/framework/recipes/cache/TestPathChildrenCache.java
index 35c78a8a..f5718ae7 100644
--- a/curator-recipes/src/test/java/com/netflix/curator/framework/recipes/cache/TestPathChildrenCache.java
+++ b/curator-recipes/src/test/java/com/netflix/curator/framework/recipes/cache/TestPathChildrenCache.java
@@ -29,18 +29,104 @@ import java.util.concurrent.TimeUnit;
 public class TestPathChildrenCache extends BaseClassForTests
 {
     @Test
-    public void     testException() throws Exception
+    public void     testModes() throws Exception
     {
         CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));
         client.start();
         try
         {
-            Assert.assertTrue(client.getZookeeperClient().blockUntilConnectedOrTimedOut());
+            client.create().forPath(""/test"", new byte[0]);
+
+            for ( PathChildrenCacheMode mode : PathChildrenCacheMode.values() )
+            {
+                internalTestMode(client, mode);
+
+                client.delete().forPath(""/test/one"");
+                client.delete().forPath(""/test/two"");
+            }
+        }
+        finally
+        {
+            client.close();
+        }
+    }
+
+    private void     internalTestMode(CuratorFramework client, PathChildrenCacheMode testMode) throws Exception
+    {
+        PathChildrenCache       cache = new PathChildrenCache(client, ""/test"", testMode);
+
+        final CountDownLatch    latch = new CountDownLatch(2);
+        cache.addListener
+        (
+            new PathChildrenCacheListener()
+            {
+                @Override
+                public void handleException(CuratorFramework client, Exception exception)
+                {
+                }
+
+                @Override
+                public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception
+                {
+                    if ( event.getType() == PathChildrenCacheEvent.Type.CHILD_ADDED )
+",Call Robolectric . getFakeHttpLayer ( ) . logHttpRequests ( ) to get some hints about what \' s going on internally .,0
"diff --git a/JodaTime/project.properties b/JodaTime/project.properties
index f8b4e692..cca8e169 100644
--- a/JodaTime/project.properties
+++ b/JodaTime/project.properties
@@ -12,4 +12,4 @@ maven.javadoc.public=true
 maven.javadoc.package=false
 maven.javadoc.private=false
 
-maven.jdiff.old.tag=v0_9_900
+maven.jdiff.old.tag=v1_0_000",Add setterPrefix to Builder annotation,0
"diff --git a/pom.xml b/pom.xml
index 4c2bcf40f38..9921afeaafe 100644
--- a/pom.xml
+++ b/pom.xml
@@ -281,9 +281,6 @@
             <properties>
                 <log4j2_version>2.11.1</log4j2_version>
             </properties>
-            <activation>
-                <jdk>[1.8,)</jdk>
-            </activation>
             <build>
                 <plugins>
                     <plugin>",Deactivate maven release profile.,1
"diff --git a/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXMLConverter.java b/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXMLConverter.java
index 98d36887f1..7f1c11ce87 100644
--- a/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXMLConverter.java
+++ b/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXMLConverter.java
@@ -5,6 +5,7 @@
 import java.io.OutputStreamWriter;
 import java.lang.reflect.Type;
 
+import org.simpleframework.xml.core.Persister;
 import org.simpleframework.xml.Serializer;
 
 import retrofit.mime.TypedByteArray;
@@ -22,6 +23,10 @@ public class SimpleXMLConverter implements Converter {
 
   private final Serializer serializer;
 
+  public SimpleXMLConverter() {
+    this(new Persister());
+  }
+
   public SimpleXMLConverter(Serializer serializer) {
     this.serializer = serializer;
   }",Add default constructor to SimpleXmlConverter,1
"diff --git a/src/main/java/org/robolectric/Robolectric.java b/src/main/java/org/robolectric/Robolectric.java
index de8203987..a674be4a6 100644
--- a/src/main/java/org/robolectric/Robolectric.java
+++ b/src/main/java/org/robolectric/Robolectric.java
@@ -1317,7 +1317,6 @@ public class Robolectric {
     ShadowStatFs.reset();
     ShadowTypeface.reset();
     ShadowCursorWindow.reset();
-    //ShadowSQLiteConnection.reset();
   }
 
   public static <T extends Activity> ActivityController<T> buildActivity(Class<T> activityClass) {
diff --git a/src/main/java/org/robolectric/shadows/ShadowSQLiteConnection.java b/src/main/java/org/robolectric/shadows/ShadowSQLiteConnection.java
index 02b8dcfdd..80237a12d 100644
--- a/src/main/java/org/robolectric/shadows/ShadowSQLiteConnection.java
+++ b/src/main/java/org/robolectric/shadows/ShadowSQLiteConnection.java
@@ -11,7 +11,12 @@ import org.robolectric.util.SQLiteLibraryLoader;
 
 import java.io.File;
 import java.util.Map;
+import java.util.concurrent.Callable;
 import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
 import java.util.concurrent.atomic.AtomicInteger;
 
 /**
@@ -31,10 +36,6 @@ public class ShadowSQLiteConnection {
     SQLiteLibraryLoader.load();
   }
 
-  public static void reset() {
-    CONNECTIONS.reset();
-  }
-
   private static SQLiteConnection connection(final int pointer) {
     return CONNECTIONS.getConnection(pointer);
   }
@@ -68,138 +69,150 @@ public class ShadowSQLiteConnection {
   }
 
   @Implementation
-  public static int nativeGetParameterCount(int connectionPtr, int statementPtr) {
+  public static int nativeGetParameterCount(final int connectionPtr, final int statementPtr) {
     if (statementPtr == IGNORED_REINDEX_STMT) { return 0; } // TODO
-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
-    try {
-      return stmt.getBindParameterCount();
-    } catch (SQLiteException e) {
-      rethrow(""Cannot get parameters count in prepared statement"", e);
-      return 0;
-    }
+    return CONNECTIONS.execute(""get parameters count in prepared statement"", new Callable<Integer>() {
+      @Override
+      public Integer call() throws SQLiteException {
+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
+        return stmt.getBindParameterCount();
+      }
+    });
   }
 
   @Implementation
-  public static boolean nativeIsReadOnly(int connectionPtr, int statementPtr) {
+  public static boolean nativeIsReadOnly(final int connectionPtr, final int statementPtr) {
     if (statementPtr == IGNORED_REINDEX_STMT) { return true; } // TODO
-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
-    try {
-      return stmt.isReadOnly();
-    } catch (SQLiteException e) {
-      rethrow(""Cannot call isReadOnly"", e);
-      return false;
-    }
+    return CONNECTIONS.execute(""call isReadOnly"", new Callable<Boolean>() {
+      @Override
+      public Boolean call() throws SQLiteException {
+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
+        return stmt.isReadOnly();
+      }
+    });
   }
 
   @Implementation
-  public static long nativeExecuteForLong(int connectionPtr, int statementPtr) {
-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
-    try {
-      if (!stmt.step()) {
-        throw new SQLiteDoneException();
+  public static long nativeExecuteForLong(final int connectionPtr, final int statementPtr) {
+    return CONNECTIONS.execute(""execute for long"", new Callable<Long>() {
+      @Override
+      public Long call() throws SQLiteException {
+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
+        if (!stmt.step()) {
+          throw new SQLiteDoneException();
+        }
+        return stmt.columnLong(0);
       }
-      return stmt.columnLong(0);
-    } catch (SQLiteException e) {
-      rethrow(""Cannot execute for long"", e);
-      return -1;
-    }
+    });
   }
 
   @Implementation
-  public static void nativeExecute(int connectionPtr, int statementPtr) {
-    if (statementPtr == IGNORED_REINDEX_STMT) { return; }
-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
-    try {
-      stmt.stepThrough();
-    } catch (SQLiteException e) {
-      rethrow(""Cannot execute"", e);
-    }
+  public static void nativeExecute(final int connectionPtr, final int statementPtr) {
+    if (statementPtr == IGNORED_REINDEX_STMT) { return; } // TODO
+    CONNECTIONS.execute(""execute"", new Callable<Object>() {
+      @Override
+      public Object call() throws SQLiteException {
+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
+        stmt.stepThrough();
+        return null;
+      }
+    });
   }
 
   @Implementation
-  public static String nativeExecuteForString(int connectionPtr, int statementPtr) {
-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
-    try {
-      if (!stmt.step()) {
-        throw new SQLiteDoneException();
+  public static String nativeExecuteForString(final int connectionPtr, final int statementPtr) {
+    return CONNECTIONS.execute(""execute for string"", new Callable<String>() {
+      @Override
+      public String call() throws SQLiteException {
+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
+        if (!stmt.step()) {
+          throw new SQLiteDoneException();
+        }
+        return stmt.columnString(0);
       }
-      return stmt.columnString(0);
-    } catch (SQLiteException e) {
-      rethrow(""Cannot execute for string"", e);
-      return null;
-    }
+    });
   }
 
   @Implementation
-  public static int nativeGetColumnCount(int connectionPtr, int statementPtr) {
-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
-    try {
-      return stmt.columnCount();
-    } catch (SQLiteException e) {
-      rethrow(""Cannot get columns count"", e);
-      return 0;
-    }
+  public static int nativeGetColumnCount(final int connectionPtr, final int statementPtr) {
+    return CONNECTIONS.execute(""get columns count"", new Callable<Integer>() {
+      @Override
+      public Integer call() throws SQLiteException {
+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
+        return stmt.columnCount();
+      }
+    });
   }
 
   @Implementation
-  public static String nativeGetColumnName(int connectionPtr, int statementPtr, int index) {
-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
-    try {
-      return stmt.getColumnName(index);
-    } catch (SQLiteException e) {
-      rethrow(""Cannot get column name at index "" + index, e);
-      return null;
-    }
+  public static String nativeGetColumnName(final int connectionPtr, final int statementPtr, final int index) {
+    return CONNECTIONS.execute(""get column name at index "" + index, new Callable<String>() {
+      @Override
+      public String call() throws SQLiteException {
+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
+        return stmt.getColumnName(index);
+      }
+    });
   }
 
   @Implementation
-  public static void nativeBindNull(int connectionPtr, int statementPtr, int index) {
-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
-    try {
-      stmt.bindNull(index);
-    } catch (SQLiteException e) {
-      rethrow(""Cannot bind null at index "" + index, e);
-    }
+  public static void nativeBindNull(final int connectionPtr, final int statementPtr, final int index) {
+    CONNECTIONS.execute(""bind null at index "" + index, new Callable<Object>() {
+      @Override
+      public Object call() throws Exception {
+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
+        stmt.bindNull(index);
+        return null;
+      }
+    });
   }
 
   @Implementation
-  public static void nativeBindLong(int connectionPtr, int statementPtr, int index, long value) {
-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
-    try {
-      stmt.bind(index, value);
-    } catch (SQLiteException e) {
-      rethrow(""Cannot bind long at index "" + index, e);
-    }
+  public static void nativeBindLong(final int connectionPtr, final int statementPtr, final int index, final long value) {
+    CONNECTIONS.execute(""bind long at index "" + index + "" with value "" + value, new Callable<Object>() {
+      @Override
+      public Object call() throws Exception {
+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
+        stmt.bind(index, value);
+        return null;
+      }
+    });
   }
 
   @Implementation
-  public static void nativeBindDouble(int connectionPtr, int statementPtr, int index, double value) {
-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
-    try {
-      stmt.bind(index, value);
-    } catch (SQLiteException e) {
-      rethrow(""Cannot bind double at index "" + index, e);
-    }
+  public static void nativeBindDouble(final int connectionPtr, final int statementPtr, final int index, final double value) {
+    CONNECTIONS.execute(""bind double at index "" + index + "" with value "" + value, new Callable<Object>() {
+      @Override
+      public Object call() throws Exception {
+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
+        stmt.bind(index, value);
+        return null;
+      }
+    });
   }
 
   @Implementation
-  public static void nativeBindString(int connectionPtr, int statementPtr, int index, String value) {
-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
-    try {
-      stmt.bind(index, value);
-    } catch (SQLiteException e) {
-      rethrow(""Cannot bind string at index "" + index, e);
-    }
+  public static void nativeBindString(final int connectionPtr, final int statementPtr, final int index, final String value) {
+    CONNECTIONS.execute(""bind string at index "" + index, new Callable<Object>() {
+      @Override
+      public Object call() throws Exception {
+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
+        stmt.bind(index, value);
+        return null;
+      }
+    });
   }
 
   @Implementation
-  public static void nativeBindBlob(int connectionPtr, int statementPtr, int index, byte[] value) {
-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
-    try {
-      stmt.bind(index, value);
-    } catch (SQLiteException e) {
-      rethrow(""Cannot bind blob at index "" + index, e);
-    }
+  public static void nativeBindBlob(final int connectionPtr, final int statementPtr, final int index, final byte[] value) {
+    CONNECTIONS.execute(""bind blob at index "" + index, new Callable<Object>() {
+      @Override
+      public Object call() throws Exception {
+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
+        stmt.bind(index, value);
+        return null;
+      }
+    });
   }
 
   @Implementation
@@ -210,50 +223,53 @@ public class ShadowSQLiteConnection {
   }
 
   @Implementation
-  public static int nativeExecuteForChangedRowCount(int connectionPtr, int statementPtr) {
-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
-    try {
-      stmt.stepThrough();
-      return connection(connectionPtr).getChanges();
-    } catch (SQLiteException e) {
-      rethrow(""Cannot execute for changed row count"", e);
-      return 0;
-    }
+  public static int nativeExecuteForChangedRowCount(final int connectionPtr, final int statementPtr) {
+    return CONNECTIONS.execute(""execute for changed row count"", new Callable<Integer>() {
+      @Override
+      public Integer call() throws Exception {
+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
+        stmt.stepThrough();
+        return connection(connectionPtr).getChanges();
+      }
+    });
   }
 
   @Implementation
-  public static long nativeExecuteForLastInsertedRowId(int connectionPtr, int statementPtr) {
-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
-    try {
-      stmt.stepThrough();
-      return connection(connectionPtr).getLastInsertId();
-    } catch (SQLiteException e) {
-      rethrow(""Cannot execute for last inserted row ID"", e);
-      return 0;
-    }
+  public static long nativeExecuteForLastInsertedRowId(final int connectionPtr, final int statementPtr) {
+    return CONNECTIONS.execute(""execute for last inserted row ID"", new Callable<Long>() {
+      @Override
+      public Long call() throws Exception {
+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
+        stmt.stepThrough();
+        return connection(connectionPtr).getLastInsertId();
+      }
+    });
   }
 
   @Implementation
-  public static long nativeExecuteForCursorWindow(int connectionPtr, int statementPtr, int windowPtr,
-                                                  int startPos, int requiredPos, boolean countAllRows) {
-
-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
-    try {
-      return ShadowCursorWindow.setData(windowPtr, stmt);
-    } catch (SQLiteException e) {
-      rethrow(""Cannot execute for cursor window"", e);
-      return 0;
-    }
+  public static long nativeExecuteForCursorWindow(final int connectionPtr, final int statementPtr, final int windowPtr,
+                                                  final int startPos, final int requiredPos, final boolean countAllRows) {
+
+    return CONNECTIONS.execute(""execute for cursor window"", new Callable<Integer>() {
+      @Override
+      public Integer call() throws Exception {
+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
+        return ShadowCursorWindow.setData(windowPtr, stmt);
+      }
+    });
+
   }
 
   @Implementation
-  public static void nativeResetStatementAndClearBindings(int connectionPtr, int statementPtr) {
-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
-    try {
-      stmt.reset(true);
-    } catch (SQLiteException e) {
-      rethrow(""Cannot reset statement"", e);
-    }
+  public static void nativeResetStatementAndClearBindings(final int connectionPtr, final int statementPtr) {
+    CONNECTIONS.execute(""reset statement"", new Callable<Object>() {
+      @Override
+      public Object call() throws Exception {
+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
+        stmt.reset(true);
+        return null;
+      }
+    });
   }
 
   @Implementation
@@ -291,11 +307,13 @@ public class ShadowSQLiteConnection {
     private final Map<Integer, SQLiteStatement> statementsMap = new ConcurrentHashMap<Integer, SQLiteStatement>();
     private final Map<Integer, SQLiteConnection> connectionsMap = new ConcurrentHashMap<Integer, SQLiteConnection>();
 
+    private final ExecutorService dbExecutor = Executors.newSingleThreadExecutor();
+
     public SQLiteConnection getConnection(final int pointer) {
       SQLiteConnection connection = connectionsMap.get(pointer);
       if (connection == null) {
         throw new IllegalStateException(""Illegal connection pointer "" + pointer
-            + "". Current posinters for thread "" + Thread.currentThread() + "" "" + connectionsMap.keySet());
+            + "". Current pointers for thread "" + Thread.currentThread() + "" "" + connectionsMap.keySet());
       }
       return connection;
     }
@@ -314,68 +332,134 @@ public class ShadowSQLiteConnection {
       return stmt;
     }
 
-    public int open(String path) {
-      SQLiteConnection dbConnection = IN_MEMORY_PATH.equals(path)
-          ? new SQLiteConnection()
-          : new SQLiteConnection(new File(path));
+    public int open(final String path) {
 
-      try {
-        dbConnection.open();
-      } catch (SQLiteException e) {
-        rethrow(""Cannot open SQLite connection"", e);
-      }
+      SQLiteConnection dbConnection = execute(""open SQLite connection"", new Callable<SQLiteConnection>() {
+        @Override
+        public SQLiteConnection call() throws Exception {
+          SQLiteConnection connection = IN_MEMORY_PATH.equals(path)
+              ? new SQLiteConnection()
+              : new SQLiteConnection(new File(path));
+
+          connection.open();
+
+          return connection;
+        }
+      });
 
       int ptr = pointerCounter.incrementAndGet();
       connectionsMap.put(ptr, dbConnection);
       return ptr;
     }
 
-    public int prepareStatement(int connectionPtr, String sql) {
+    public int prepareStatement(final int connectionPtr, final String sql) {
       // TODO: find a way to create collators
       if (""REINDEX LOCALIZED"".equals(sql)) {
         return IGNORED_REINDEX_STMT;
       }
 
-      SQLiteConnection connection = getConnection(connectionPtr);
-      try {
-        SQLiteStatement stmt = connection.prepare(sql);
-        int pointer = pointerCounter.incrementAndGet();
-        statementsMap.put(pointer, stmt);
-        return pointer;
-      } catch (SQLiteException e) {
-        rethrow(""Cannot prepare statement "" + sql, e);
-        return 0;
-      }
+      SQLiteStatement stmt = execute(""prepare statement"", new Callable<SQLiteStatement>() {
+        @Override
+        public SQLiteStatement call() throws Exception {
+          SQLiteConnection connection = getConnection(connectionPtr);
+          return connection.prepare(sql);
+        }
+      });
+
+      int pointer = pointerCounter.incrementAndGet();
+      statementsMap.put(pointer, stmt);
+      return pointer;
     }
 
-    public void close(int ptr) {
-      SQLiteConnection connection = getConnection(ptr);
-      connection.dispose();
+    public void close(final int ptr) {
+      execute(""close connection"", new Callable<Object>() {
+        @Override
+        public Object call() throws Exception {
+          SQLiteConnection connection = getConnection(ptr);
+          connection.dispose();
+          return null;
+        }
+      });
     }
 
-    public void finalizeStmt(int connectionPtr, int statementPtr) {
+    public void finalizeStmt(final int connectionPtr, final int statementPtr) {
       if (statementPtr == IGNORED_REINDEX_STMT) {
         return;
       }
-      SQLiteStatement stmt = getStatement(connectionPtr, statementPtr);
-      statementsMap.remove(statementPtr);
-      stmt.dispose();
+      execute(""finalize statement"", new Callable<Object>() {
+        @Override
+        public Object call() throws Exception {
+          SQLiteStatement stmt = getStatement(connectionPtr, statementPtr);
+          statementsMap.remove(statementPtr);
+          stmt.dispose();
+          return null;
+        }
+      });
     }
 
     public void cancel(int connectionPtr) {
       getConnection(connectionPtr); // check connection
 
-      SQLiteStatement statement = statementsMap.get(pointerCounter.get());
-      if (statement != null) {
-        statement.cancel();
-      }
+      execute(""cancel"", new Callable<Object>() {
+        @Override
+        public Object call() throws Exception {
+          SQLiteStatement statement = statementsMap.get(pointerCounter.get());
+          if (statement != null) {
+            statement.cancel();
+          }
+          return null;
+        }
+      });
     }
 
-    public void reset() {
-      statementsMap.clear();
-      connectionsMap.clear();
+    public <T> T execute(final String comment, final Callable<T> work) {
+      Future<DbOperationResult<T>> future = dbExecutor.submit(new Callable<DbOperationResult<T>>() {
+        @Override
+        public DbOperationResult<T> call() throws Exception {
+          T result = null;
+          Exception error = null;
+          try {
+            result = work.call();
+          } catch (Exception e) {
+            error = e;
+          }
+          return new DbOperationResult<T>(result, error);
+        }
+      });
+
+      DbOperationResult<T> execResult;
+      try {
+        execResult = future.get();
+
+        if (execResult.error != null) {
+          if (execResult.error instanceof SQLiteException) {
+            rethrow(""Cannot "" + comment, (SQLiteException) execResult.error);
+          } else if (execResult.error instanceof android.database.sqlite.SQLiteException) {
+            throw (android.database.sqlite.SQLiteException) execResult.error;
+          } else {
+            throw new RuntimeException(execResult.error);
+          }
+        }
+
+        return execResult.value;
+
+      } catch (ExecutionException e) {
+        throw new RuntimeException(e);
+      } catch (InterruptedException e) {
+        throw new RuntimeException(e);
+      }
+
     }
 
+    private static class DbOperationResult<T> {
+      final T value;
+      final Exception error;
+
+      DbOperationResult(T value, Exception error) {
+        this.value = value;
+        this.error = error;
+      }
+    }
   }
 
 }
diff --git a/src/test/java/org/robolectric/shadows/SQLiteDatabaseTest.java b/src/test/java/org/robolectric/shadows/SQLiteDatabaseTest.java
index 7f50988e6..8a65d2390 100644
--- a/src/test/java/org/robolectric/shadows/SQLiteDatabaseTest.java
+++ b/src/test/java/org/robolectric/shadows/SQLiteDatabaseTest.java
@@ -15,6 +15,7 @@ import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
 import java.io.File;
+import java.util.concurrent.CountDownLatch;
 
 import static android.database.sqlite.SQLiteDatabase.OPEN_READWRITE;
 import static org.fest.assertions.api.Assertions.assertThat;
@@ -687,6 +688,37 @@ public class SQLiteDatabaseTest extends DatabaseTestBase {
     }
   }
 
+
+  @Test
+  public void shouldBeAbleToBeUsedFromDifferentThread() {
+    final CountDownLatch sync = new CountDownLatch(1);
+    final Throwable[] error = {null};
+
+    new Thread() {
+      @Override
+      public void run() {
+        try {
+          executeQuery(""select * from table_name"");
+        } catch (Throwable e) {
+          e.printStackTrace();
+          error[0] = e;
+        } finally {
+          sync.countDown();
+        }
+      }
+    }
+    .start();
+
+    try {
+      sync.await();
+    }","Remove old autodeps functions . . Summary : Now that ` buck autodeps ` has landed , we have no need for this anymore . . Test Plan : CI .",0
"diff --git a/src/main/java/org/junit/internal/TextListener.java b/src/main/java/org/junit/internal/TextListener.java
index a5cfbf3c574d..e48255b575d7 100644
--- a/src/main/java/org/junit/internal/TextListener.java
+++ b/src/main/java/org/junit/internal/TextListener.java
@@ -5,10 +5,10 @@
 import java.util.List;
 
 import org.junit.runner.Description;
-import org.junit.runner.Ignorance;
 import org.junit.runner.Result;
 import org.junit.runner.notification.Failure;
 import org.junit.runner.notification.RunListener;
+import org.junit.runner.notification.TestRunEvent;
 
 public class TextListener extends RunListener {
 
@@ -60,33 +60,19 @@ protected void printHeader(long runTime) {
 	}
 
 	protected void printFailures(Result result) {
-		printExceptions(""failure"", """", result.getFailures());
+		printEvents(""failure"", """", result.getFailures());
 	}
 	
 	private void printFailedAssumptions(Result result) {
-		printExceptions(""ignored test"", ""IGNORED TEST "", result.getFailedAssumptions());
+		printEvents(""invalid assumption"", ""INVALID ASSUMPTION "", result.getFailedAssumptions());
 	}
 	
 	private void printIgnorances(Result result) {
-		// TODO: (Dec 13, 2007 12:57:04 AM) DUP
-
-		if (result.getIgnorances().size() == 0)
-			return;
-		if (result.getIgnorances().size() == 1)
-			// TODO: (Dec 13, 2007 12:55:01 AM) test this back in
-
-			getWriter().println(""There was "" + result.getIgnorances().size() + "" "" + ""ignored test"" + "":"");
-		else
-			getWriter().println(""There were "" + result.getIgnorances().size() + "" "" + ""ignored test"" + ""s:"");
-		for (Ignorance each : result.getIgnorances()) {
-			// TODO: (Dec 13, 2007 12:57:12 AM) Cheating
-
-			getWriter().println(""IGNORED TEST 1) "" + each.getReason());
-		}
+		printEvents(""ignored test"", ""IGNORED TEST "", result.getIgnorances());
 	}
 
-	private void printExceptions(String exceptionTypeName, String listPrefix,
-			List<? extends Failure> exceptions) {
+	private void printEvents(String exceptionTypeName, String listPrefix,
+			List<? extends TestRunEvent> exceptions) {
 		if (exceptions.size() == 0)
 			return;
 		if (exceptions.size() == 1)
@@ -94,13 +80,13 @@ private void printExceptions(String exceptionTypeName, String listPrefix,
 		else
 			getWriter().println(""There were "" + exceptions.size() + "" "" + exceptionTypeName + ""s:"");
 		int i= 1;
-		for (Failure each : exceptions)
+		for (TestRunEvent each : exceptions)
 			printFailure(each, listPrefix + i++);
 	}
 
-	protected void printFailure(Failure failure, String prefix) {
-		getWriter().println(prefix + "") "" + failure.getTestHeader());
-		getWriter().print(failure.getTrace());
+	protected void printFailure(TestRunEvent each, String prefix) {
+		getWriter().println(prefix + "") "" + each.getTestHeader());
+		getWriter().print(each.getTrace());
 	}
 
 	protected void printFooter(Result result) {
diff --git a/src/main/java/org/junit/runner/Ignorance.java b/src/main/java/org/junit/runner/Ignorance.java
index 2589b39280f8..9e0cb94e28d5 100644
--- a/src/main/java/org/junit/runner/Ignorance.java
+++ b/src/main/java/org/junit/runner/Ignorance.java
@@ -1,20 +1,26 @@
 package org.junit.runner;
 
+import org.junit.runner.notification.TestRunEvent;
+
 // TODO: (Dec 12, 2007 2:39:57 PM) does this belong here?
 
-public class Ignorance {
+public class Ignorance extends TestRunEvent {
 
 	private final String fReason;
+	private final Description fDescription;
 
 	public Ignorance(Description description, String reason) {
+		fDescription= description;
 		fReason= reason;
-		// TODO: (Dec 13, 2007 12:57:49 AM) Do I use description?  Do I in failure?
-
-		// TODO Auto-generated constructor stub
 	}
 
-	public String getReason() {
-		return fReason;
+	@Override
+	public String getTestHeader() {
+		return fDescription + "": "" + fReason;
 	}
 
+	@Override
+	public String getTrace() {
+		return """";
+	}
 }
diff --git a/src/main/java/org/junit/runner/Result.java b/src/main/java/org/junit/runner/Result.java
index 1d486c8fa369..3f70a117c48e 100644
--- a/src/main/java/org/junit/runner/Result.java
+++ b/src/main/java/org/junit/runner/Result.java
@@ -127,7 +127,7 @@ public RunListener createListener() {
 
 	// TODO: (Dec 12, 2007 2:40:57 PM) sort members
 
-	public int getUnrunnableCount() {
+	public int getFailedAssumptionCount() {
 		return fUnrunnables.size();
 	}
 
diff --git a/src/main/java/org/junit/runner/notification/Failure.java b/src/main/java/org/junit/runner/notification/Failure.java
index 45eb178c2e17..6773b7809fbc 100644
--- a/src/main/java/org/junit/runner/notification/Failure.java
+++ b/src/main/java/org/junit/runner/notification/Failure.java
@@ -12,7 +12,7 @@
  * test (for example, if a {@link org.junit.BeforeClass} method is not static), it may describe
  * something other than a single test.
  */
-public class Failure {
+public class Failure extends TestRunEvent {
 	private final Description fDescription;
 	private Throwable fThrownException;
 
@@ -29,6 +29,7 @@ public Failure(Description description, Throwable thrownException) {
 	/**
 	 * @return a user-understandable label for the test
 	 */
+	@Override
 	public String getTestHeader() {
 		return fDescription.getDisplayName();
 	}
@@ -59,6 +60,7 @@ public String toString() {
 	 * Convenience method
 	 * @return the printed form of the exception
 	 */
+	@Override
 	public String getTrace() {
 		StringWriter stringWriter= new StringWriter();
 		PrintWriter writer= new PrintWriter(stringWriter);
diff --git a/src/main/java/org/junit/runner/notification/TestRunEvent.java b/src/main/java/org/junit/runner/notification/TestRunEvent.java
new file mode 100644
index 000000000000..b01c0e8ebe37
--- /dev/null
+++ b/src/main/java/org/junit/runner/notification/TestRunEvent.java
@@ -0,0 +1,17 @@
+package org.junit.runner.notification;
+
+/**
+ * An ignored test, invalid assumption, or test failure to notify the user about
+ */
+public abstract class TestRunEvent {
+	/**
+	 * @return a user-understandable label for the test
+	 */
+	public abstract String getTestHeader();
+
+	/**
+	 * Convenience method
+	 * @return the printed form of the exception, if any
+	 */
+	public abstract String getTrace();
+}
diff --git a/src/main/java/org/junit/runners/Suite.java b/src/main/java/org/junit/runners/Suite.java
index f3892a80d2fd..205bb776d045 100644
--- a/src/main/java/org/junit/runners/Suite.java
+++ b/src/main/java/org/junit/runners/Suite.java
@@ -67,12 +67,6 @@ private Class<?> addParent(Class<?> parent) throws InitializationError {
 		private void removeParent(Class<?> klass) {
 			parents.remove(klass);
 		}
-		
-		@Override
-		public String toString() {
-			// TODO: (Dec 31, 2007 9:10:05 AM) untested
-			return parents.toString();
-		}
 	}
 
 	// To prevent test writers from hanging themselves, we need to shorten the rope we hand them.
diff --git a/src/test/java/org/junit/tests/experimental/AssumptionTest.java b/src/test/java/org/junit/tests/experimental/AssumptionTest.java
index cc1fa7bac61f..5adb18fdc63d 100644
--- a/src/test/java/org/junit/tests/experimental/AssumptionTest.java
+++ b/src/test/java/org/junit/tests/experimental/AssumptionTest.java
@@ -32,10 +32,15 @@ public void assumptionsFail() {
 	public void failedAssumptionsMeanIgnored() {
 		Result result= JUnitCore.runClasses(HasFailingAssumption.class);
 		assertThat(result.getRunCount(), is(0));
-		assertThat(result.getUnrunnableCount(), is(1));
+		assertThat(result.getFailedAssumptionCount(), is(1));
 		assertThat(result.getFailureCount(), is(0));
 	}
 
+	@Test
+	public void failingAssumptionsPrint() {
+		assertThat(testResult(HasFailingAssumption.class).toString(), containsString(""invalid assumption""));
+		assertThat(testResult(HasFailingAssumption.class).toString(), containsString(""INVALID ASSUMPTION 1)""));
+	}
 
 	public static class HasPassingAssumption {
 		@Test
diff --git a/src/test/java/org/junit/tests/experimental/theories/runner/WhenNoParametersMatch.java b/src/test/java/org/junit/tests/experimental/theories/runner/WhenNoParametersMatch.java
index 4297746529ad..eb6d87d711a9 100644
--- a/src/test/java/org/junit/tests/experimental/theories/runner/WhenNoParametersMatch.java
+++ b/src/test/java/org/junit/tests/experimental/theories/runner/WhenNoParametersMatch.java
@@ -43,6 +43,6 @@ public void showFailedAssumptionsWhenNoParametersFound(int data,
 
 		assertThat(result, containsString(matcher.toString()));
 		assertThat(result, containsString("""" + data));
-		assertThat(result, containsString(""ignored test:""));
+		assertThat(result, containsString(""invalid assumption:""));
 	}
 }
\ No newline at end of file
diff --git a/src/test/java/org/junit/tests/running/classes/IgnoreClassTest.java b/src/test/java/org/junit/tests/running/classes/IgnoreClassTest.java
index 6d6c4e7b74a7..0fb135b6088f 100644
--- a/src/test/java/org/junit/tests/running/classes/IgnoreClassTest.java
+++ b/src/test/java/org/junit/tests/running/classes/IgnoreClassTest.java
@@ -31,4 +31,9 @@ public class IgnoreClassTest {
 		assertThat(testResult(IgnoreMe.class).toString(),
 				containsString(""For a good reason""));
 	}
+	
+	@Test public void includeClassNameWhenClassIsIgnored() {
+		assertThat(testResult(IgnoreMe.class).toString(),
+				containsString("") "" + IgnoreMe.class.getName()));
+	}
 }","Invalid assumptions, failed tests, and ignored tests now all print similarly",1
"diff --git a/maven-embedder/src/main/java/org/apache/maven/embedder/ContainerCustomizer.java b/maven-embedder/src/main/java/org/apache/maven/embedder/ContainerCustomizer.java
index cfe8128f4..a16a7f6c7 100644
--- a/maven-embedder/src/main/java/org/apache/maven/embedder/ContainerCustomizer.java
+++ b/maven-embedder/src/main/java/org/apache/maven/embedder/ContainerCustomizer.java
@@ -14,18 +14,21 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 import org.codehaus.plexus.PlexusContainer;
 
 /**
  * Instances of this interface can be user upon start of the embedder to customize
  * the components in the plexus container.
+ *
  * @author mkleint
  */
-public interface ContainerCustomizer {
+public interface ContainerCustomizer
+{
     /**
      * callback from embedder's start() method that allows to customize the components
      * in the container.
      */
-    void customize(PlexusContainer container);
-    
+    void customize( PlexusContainer container );
+
 }
diff --git a/maven-embedder/src/main/java/org/apache/maven/embedder/DefaultMavenEmbedRequest.java b/maven-embedder/src/main/java/org/apache/maven/embedder/DefaultMavenEmbedRequest.java
index 5aae1227c..2c6edb312 100644
--- a/maven-embedder/src/main/java/org/apache/maven/embedder/DefaultMavenEmbedRequest.java
+++ b/maven-embedder/src/main/java/org/apache/maven/embedder/DefaultMavenEmbedRequest.java
@@ -19,16 +19,20 @@
 import java.net.URL;
 import java.util.ArrayList;
 import java.util.List;
+
 import org.apache.maven.settings.Settings;
 
 /**
  * Default implementation of MavenEmbedRequest intefrace.
+ *
  * @author mkleint
  */
-public class DefaultMavenEmbedRequest implements MavenEmbedRequest {
+public class DefaultMavenEmbedRequest
+    implements MavenEmbedRequest
+{
 
     private List inactives;
-    
+
     private List actives;
 
     private Settings settings;
@@ -39,68 +43,85 @@ public class DefaultMavenEmbedRequest implements MavenEmbedRequest {
 
     private ContainerCustomizer customizer;
 
-    /** Creates a new instance of DefaultMavenEmbedRequest */
-    public DefaultMavenEmbedRequest() {
+    /**
+     * Creates a new instance of DefaultMavenEmbedRequest
+     */
+    public DefaultMavenEmbedRequest()
+    {
     }
-   
-    public MavenEmbedRequest addActiveProfile(String profile) {
-        getActiveProfiles().add(profile);
+
+    public MavenEmbedRequest addActiveProfile( String profile )
+    {
+        getActiveProfiles().add( profile );
         return this;
     }
 
-    public MavenEmbedRequest addInactiveProfile(String profile) {
-        getInactiveProfiles().add(profile);
+    public MavenEmbedRequest addInactiveProfile( String profile )
+    {
+        getInactiveProfiles().add( profile );
         return this;
     }
 
-    public MavenEmbedRequest addActiveProfiles(List profiles) {
-        getActiveProfiles().addAll(profiles);
+    public MavenEmbedRequest addActiveProfiles( List profiles )
+    {
+        getActiveProfiles().addAll( profiles );
         return this;
     }
 
-    public MavenEmbedRequest addInactiveProfiles(List profiles) {
-        getInactiveProfiles().addAll(profiles);
+    public MavenEmbedRequest addInactiveProfiles( List profiles )
+    {
+        getInactiveProfiles().addAll( profiles );
         return this;
     }
 
-    public List getActiveProfiles() {
-        if (actives == null) {
+    public List getActiveProfiles()
+    {
+        if ( actives == null )
+        {
             actives = new ArrayList();
         }
         return actives;
     }
 
-    public List getInactiveProfiles() {
-        if (inactives == null) {
+    public List getInactiveProfiles()
+    {
+        if ( inactives == null )
+        {
             inactives = new ArrayList();
         }
         return inactives;
     }
 
-    public MavenEmbedRequest setUserSettingsFile(File user) {
+    public MavenEmbedRequest setUserSettingsFile( File user )
+    {
         userSettings = user;
         return this;
     }
 
-    public MavenEmbedRequest setGlobalSettingsFile(File global) {
+    public MavenEmbedRequest setGlobalSettingsFile( File global )
+    {
         globalSettings = global;
         return this;
     }
 
-    public File getUserSettingsFile() {
+    public File getUserSettingsFile()
+    {
         return userSettings;
     }
 
-    public File getGlobalSettingsFile() {
+    public File getGlobalSettingsFile()
+    {
         return globalSettings;
     }
 
-    public MavenEmbedRequest setConfigurationCustomizer(ContainerCustomizer customizer) {
+    public MavenEmbedRequest setConfigurationCustomizer( ContainerCustomizer customizer )
+    {
         this.customizer = customizer;
         return this;
     }
 
-    public ContainerCustomizer getContainerCustomizer() {
+    public ContainerCustomizer getContainerCustomizer()
+    {
         return",improve db migration to avoid deleting special snapshots ( like pacbase projects ),0
"diff --git a/blueocean-dashboard/src/main/js/components/PipelineRunGraph.jsx b/blueocean-dashboard/src/main/js/components/PipelineRunGraph.jsx
index ab4fd14ea..cdfaad2e6 100644
--- a/blueocean-dashboard/src/main/js/components/PipelineRunGraph.jsx
+++ b/blueocean-dashboard/src/main/js/components/PipelineRunGraph.jsx
@@ -1,7 +1,7 @@
 import React, { Component, PropTypes } from 'react';
 import { PipelineGraph } from '@jenkins-cd/design-language';
 
-const { string, array, object, any, func } = PropTypes;
+const { string, array, any, func } = PropTypes;
 
 
 function badNode(jenkinsNode) {
@@ -149,22 +149,6 @@ export default class PipelineRunGraph extends Component {
                   stages={graphNodes}
                   onNodeClick={
                     (name, id) => {
-                        const pathname = this.props.location.pathname;
-                        // if path ends with pipeline we simply add the node id
-                        if (pathname.endsWith('pipeline/')) {
-                            this.props.router.push(`${pathname}${id}`);
-                        } else if (pathname.endsWith('pipeline')) {
-                            this.props.router.push(`${pathname}/${id}`);
-                        } else {
-                            // remove last bit and replace it with node
-                            const pathArray = pathname.split('/');
-                            pathArray.pop();
-                            if (pathname.endsWith('/')) {
-                                pathArray.pop();
-                            }
-                            pathArray.shift();
-                            this.props.router.push(`${pathArray.join('/')}/${id}`);
-                        }
                         this.props.callback(id);
                     }
                   }
@@ -181,6 +165,4 @@ PipelineRunGraph.propTypes = {
     nodes: array,
     node: any,
     callback: func,
-    router: object.isRequired, // From react-router
-    location: object.isRequired, // From react-router
 };
diff --git a/blueocean-dashboard/src/main/js/components/RunDetailsPipeline.jsx b/blueocean-dashboard/src/main/js/components/RunDetailsPipeline.jsx
index 41169d006..f609ef2cc 100644
--- a/blueocean-dashboard/src/main/js/components/RunDetailsPipeline.jsx
+++ b/blueocean-dashboard/src/main/js/components/RunDetailsPipeline.jsx
@@ -63,7 +63,6 @@ export class RunDetailsPipeline extends Component {
                             // if the step_stage_id has changed we need to change the focus
                             if (event.pipeline_step_stage_id !== this.mergedConfig.node) {
                                 delete this.mergedConfig.node;
-                                console.log('only nodes', this.mergedConfig.node);
                                 fetchNodes({ ...this.mergedConfig, refetch });
                             } else {
                                 // console.log('only steps');
@@ -97,14 +96,12 @@ export class RunDetailsPipeline extends Component {
     componentDidMount() {
         const onScrollHandler = (elem) => {
             if (elem.deltaY < 0 && this.state.followAlong) {
-                console.log('this.setState({ followAlong: false });');
                 this.setState({ followAlong: false });
             }
         };
 
         const _handleKeys = (event) => {
             if (event.keyCode === 38 && this.state.followAlong) {
-                console.log('this.setState({ followAlong: false });');
                 this.setState({ followAlong: false });
             }
         };
@@ -113,18 +110,15 @@ export class RunDetailsPipeline extends Component {
         document.addEventListener('keydown', _handleKeys, false);
     }
 
-    // shouldComponentUpdate(nextProps, nextState) {
-    // }
-
     componentWillReceiveProps(nextProps) {
         const followAlong = this.state.followAlong;
         this.mergedConfig = this.generateConfig({ ...nextProps, followAlong });
 
-        // console.log('       this.pipelineListener', this.mergedConfig, this.props);
         if (!this.state.followAlong && this.timeout) {
             // console.log('clearTO');
             clearTimeout(this.timeout);
         }
+
         const nodeAction = calculateNode(this.props, nextProps, this.mergedConfig);
         if (nodeAction && nodeAction.action) {
             // use updated config
@@ -145,8 +139,8 @@ export class RunDetailsPipeline extends Component {
                 if (Number(newStart) > 0) {
                     // kill current  timeout if any
                     // console.log('prefollow', this.state.followAlong);
-                    clearTimeout(this.timeout);
                     if (this.state.followAlong) {
+                        clearTimeout(this.timeout);
                         // console.log('follow', this.state.followAlong);
                         this.timeout = setTimeout(() => fetchLog({ ...logGeneral, newStart }), 1000);
                     }
@@ -156,7 +150,6 @@ export class RunDetailsPipeline extends Component {
     }
 
     componentWillUnmount() {
-        // console.log('unmounting');
         if (this.pipelineListener) {
             sse.unsubscribe(this.pipelineListener);
             delete this.pipelineListener;
@@ -167,15 +160,12 @@ export class RunDetailsPipeline extends Component {
 
     generateConfig(props) {
         const {
-            location,
             config = {},
         } = this.context;
         const followAlong = this.state.followAlong;
         const {
-            steps,
             isMultiBranch,
             params: { pipeline: name, branch, runId, node: nodeParam },
-            result,
         } = props;
         // we would use default properties however the node can be null so no default properties will be triggered
         let { nodeReducer } = props;
@@ -183,43 +173,12 @@ export class RunDetailsPipeline extends Component {
             nodeReducer = { id: null, displayName: 'Steps' };
         }
         // if we have a node param we do not want the calculation of the focused node
-        let node = nodeParam || nodeReducer.id;
-        if (followAlong) {
-            node = nodeReducer.id;
-        }
-        // however if we follow along we actually do want to change the focus
-        if (result.state === 'RUNNING' && nodeReducer && nodeReducer.id > Number(node)) {
-            console.log('leo', nodeReducer, steps, followAlong, location);
-            const pathname = location.pathname;
-            // if path ends with pipeline we simply add the node id
-            let xxx;
-            if (pathname.endsWith('pipeline/')) {
-                // router.push(`${pathname}${node}`);
-                xxx = `${pathname}${nodeReducer.id}`;
-            } else if (pathname.endsWith('pipeline')) {
-                // router.push(`${pathname}/${node}`);
-                xxx = `${pathname}/${nodeReducer.id}`;
-            } else {
-                // remove last bit and replace it with node
-                const pathArray = pathname.split('/');
-                pathArray.pop();
-                if (pathname.endsWith('/')) {
-                    pathArray.pop();
-                }
-                pathArray.shift();
-                // router.push(`${pathArray.join('/')}/${node}`);
-                xxx = `${pathArray.join('/')}/${nodeReducer.id}`;
-            }
-            console.log('xxx', xxx);
-        }
+        const node = nodeParam || nodeReducer.id;
+
         const mergedConfig = { ...config, name, branch, runId, isMultiBranch, node, nodeReducer, followAlong };
         return mergedConfig;
     }
 
-    nodeInformation() {
-
-    }
-
     render() {
         const {
             location,
@@ -244,43 +203,61 @@ export class RunDetailsPipeline extends Component {
             || (resultRun.toLowerCase() === 'running' && followAlong)
         ;
 
-
         const nodeKey = calculateNodeBaseUrl(this.mergedConfig);
         const key = calculateStepsBaseUrl(this.mergedConfig);
         const logGeneral = calculateRunLogURLObject(this.mergedConfig);
         const log = logs ? logs[logGeneral.url] : null;
-        // console.log('merged', this.mergedConfig.node, key);
         let title = this.mergedConfig.nodeReducer.displayName;
         if (log) {
             title = 'Logs';
         } else if (this.mergedConfig.nodeReducer.id !== null) {
             title = `Steps - ${title}`;
         }
-        /*
-        const stopFollowing = (event) => {
-            console.log(this.refs, event, !followAlong);
-            this.setState({ followAlong: !followAlong });
-        };
-        */
         const currentSteps = steps ? steps[key] : null;
-        console.log('steps to render', key, steps, nodeKey);
-        if (steps && steps[key]) {
-            console.log('steps to render found', steps[key]);
-        }
         const afterClick = (id) => {
             const nodeInfo = nodes[nodeKey].model.filter((item) => item.id === id)[0];
-            console.log('clickID', id, nodeInfo);
+            const pathname = location.pathname;
+            let newPath;
+            // if path ends with pipeline we simply add the node id
+            if (pathname.endsWith('pipeline/')) {
+                if (nodeInfo.state === 'FINISHED') {
+                    newPath = `${pathname}${id}`;
+                } else {
+                    newPath = pathname;
+                }
+            } else if (pathname.endsWith('pipeline')) {
+                if (nodeInfo.state === 'FINISHED') {
+                    newPath = `${pathname}/${id}`;
+                } else {
+                    newPath = pathname;
+                }
+            } else {
+                // remove last bit and replace it with node
+                const pathArray = pathname.split('/');
+                pathArray.pop();
+                if (pathname.endsWith('/')) {
+                    pathArray.pop();
+                }
+                pathArray.shift();
+                if (nodeInfo.state !== 'FINISHED') {
+                    newPath = pathArray.join('/');
+                } else {
+                    newPath = `${pathArray.join('/')}/${id}`;
+                }
+            }
+            if (nodeInfo.state === 'FINISHED' && followAlong) {
+                this.setState({ followAlong: false });
+            }
             if (nodeInfo.state !== 'FINISHED' && !followAlong) {
                 this.setState({ followAlong: true });
             }
+            router.push(newPath);
         };
         return (
             <div ref=""scrollArea"">
                 { nodes && nodes[nodeKey] && <Extensions.Renderer
                   extensionPoint=""jenkins.pipeline.run.result""
                   callback={afterClick}
-                  router={router}
-                  location={location}
                   nodes={nodes[nodeKey].model}
                   pipelineName={name}
                   branchName={isMultiBranch ? branch : undefined}
diff --git a/blueocean-dashboard/src/main/js/components/Step.jsx b/blueocean-dashboard/src/main/js/components/Step.jsx
index e6a1984c8..444a2c49e 100644
--- a/blueocean-dashboard/src/main/js/components/Step.jsx
+++ b/blueocean-dashboard/src/main/js/components/Step.jsx
@@ -18,13 +18,9 @@ export default class Node extends Component {
 
     componentWillReceiveProps(nextProps) {
         const { node, logs, nodesBaseUrl, fetchLog, followAlong } = nextProps;
-        if (followAlong) {
-            // kill current timeout if any
-            this.clearThisTimeout();
-        }
         const { config = {} } = this.context;
         const mergedConfig = { ...config, node, nodesBaseUrl };
-        if (logs !== this.props.logs) {
+        if (logs && logs !== this.props.logs) {
             const key = calculateLogUrl(mergedConfig);
             const log = logs ? logs[key] : null;
             if (log && log !== null) {
@@ -32,10 +28,9 @@ export default class Node extends Component {
                 // kill current  timeout if any
                 this.clearThisTimeout();
                 if (number > 0 && followAlong) {
-                    // we turn on refetch so we always fetch a new Node result
-                    const refetch = true;
                     mergedConfig.newStart = log.newStart;
-                    this.timeout = setTimeout(() => fetchLog({ ...mergedConfig, refetch }), 1000);
+                    this.clearThisTimeout();
+                    this.timeout = setTimeout(() => fetchLog({ ...mergedConfig }), 1000);
                 }
             }
         }
@@ -70,11 +65,8 @@ export default class Node extends Component {
         const resultRun = result === 'UNKNOWN' || !result ? state : result;
         const log = logs ? logs[calculateLogUrl({ ...config, node, nodesBaseUrl })] : null;
         const getLogForNode = () => {
-// console.log('ddd',followAlong, log)
-            if (!log || followAlong) {
-                // we turn on refetch so we always fetch a new Node result
-                const refetch = true;
-                fetchLog({ ...config, node, nodesBaseUrl, refetch });
+            if (!log || !log.logArray) {
+                fetchLog({ ...config, node, nodesBaseUrl });
             }
         };
         const runResult = resultRun.toLowerCase();
diff --git a/blueocean-dashboard/src/main/js/components/Steps.jsx b/blueocean-dashboard/src/main/js/components/Steps.jsx
index 0f8ac1456..33bb01cb8 100644
--- a/blueocean-dashboard/src/main/js/components/Steps.jsx
+++ b/blueocean-dashboard/src/main/js/components/Steps.jsx
@@ -12,7 +12,6 @@ export default class Nodes extends Component {
             model,
             nodesBaseUrl,
         } = nodeInformation;
-        console.log('renderSteps', model, nodesBaseUrl);
         return (<div>
             {
               model.map((item, index) =>
diff --git a/blueocean-dashboard/src/main/js/redux/actions.js b/blueocean-dashboard/src/main/js/redux/actions.js
index b8b32e76d..21e23a5f2 100644
--- a/blueocean-dashboard/src/main/js/redux/actions.js
+++ b/blueocean-dashboard/src/main/js/redux/actions.js
@@ -61,7 +61,6 @@ export const actionHandlers = {
         return state.set('currentRuns', payload);
     },
     [ACTION_TYPES.SET_NODE](state, { payload }): State {
-",Expose some proxy settings to GCS Processors .,0
"diff --git a/codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java b/codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java
index 805b9e414c..b80a99f77c 100644
--- a/codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java
+++ b/codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java
@@ -14,7 +14,6 @@
  */
 package io.netty.handler.codec;
 
-import io.netty.util.collection.CollectionUtils;
 import io.netty.util.collection.IntObjectHashMap;
 import io.netty.util.collection.IntObjectMap;
 import io.netty.util.concurrent.FastThreadLocal;
@@ -1147,7 +1146,7 @@ public class DefaultHeaders<T> implements Headers<T> {
         // because we want to force the keyComparator to be used for all comparisons
         List<T> namesList = namesList();
         List<T> otherNamesList = h2.namesList();
-        if (!CollectionUtils.equals(namesList, otherNamesList, keyComparator)) {
+        if (!equals(namesList, otherNamesList, keyComparator)) {
             return false;
         }
 
@@ -1156,7 +1155,7 @@ public class DefaultHeaders<T> implements Headers<T> {
         Set<T> names = new TreeSet<T>(keyComparator);
         names.addAll(namesList);
         for (T name : names) {
-            if (!CollectionUtils.equals(getAll(name), h2.getAll(name), valueComparator)) {
+            if (!equals(getAll(name), h2.getAll(name), valueComparator)) {
                 return false;
             }
         }
@@ -1164,6 +1163,31 @@ public class DefaultHeaders<T> implements Headers<T> {
         return true;
     }
 
+    /**
+     * Compare two lists using the {@code comparator} for all comparisons (not using the equals() operator)
+     * @param lhs Left hand side
+     * @param rhs Right hand side
+     * @param comparator Comparator which will be used for all comparisons (equals() on objects will not be used)
+     * @return True if {@code lhs} == {@code rhs} according to {@code comparator}. False otherwise.
+     */
+    private static <T> boolean equals(List<T> lhs, List<T> rhs, Comparator<? super T> comparator) {
+        final int lhsSize = lhs.size();
+        if (lhsSize != rhs.size()) {
+            return false;
+        }
+
+        // Don't use a TreeSet to do the comparison.  We want to force the comparator
+        // to be used instead of the object's equals()
+        Collections.sort(lhs, comparator);
+        Collections.sort(rhs, comparator);
+        for (int i = 0; i < lhsSize; ++i) {
+            if (comparator.compare(lhs.get(i), rhs.get(i)) != 0) {
+                return false;
+            }
+        }
+        return true;
+    }
+
     @Override
     public int hashCode() {
         int result = 1;
diff --git a/common/src/main/java/io/netty/util/collection/CollectionUtils.java b/common/src/main/java/io/netty/util/collection/CollectionUtils.java
deleted file mode 100644
index b9e11044c4..0000000000
--- a/common/src/main/java/io/netty/util/collection/CollectionUtils.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/*
- * Copyright 2014 The Netty Project
- *
- * The Netty Project licenses this file to you under the Apache License, version 2.0 (the
- * ""License""); you may not use this file except in compliance with the License. You may obtain a
- * copy of the License at:
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the License
- * is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
- * or implied. See the License for the specific language governing permissions and limitations under
- * the License.
- */
-package io.netty.util.collection;
-
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.List;
-
-/**
- * Provides utilities for the primitive collection types that are not supplied by the JDK
- */
-public final class CollectionUtils {
-
-    private CollectionUtils() { }
-
-    /**
-     * Compare two lists using the {@code comparator} for all comparisons (not using the equals() operator)
-     * @param lhs Left hand side
-     * @param rhs Right hand side
-     * @param comparator Comparator which will be used for all comparisons (equals() on objects will not be used)
-     * @return True if {@code lhs} == {@code rhs} according to {@code comparator}. False otherwise.
-     */
-    public static <T> boolean equals(List<T> lhs, List<T> rhs, Comparator<? super T> comparator) {
-        final int lhsSize = lhs.size();
-        if (lhsSize != rhs.size()) {
-            return false;
-        }
-
-        // Don't use a TreeSet to do the comparison.  We want to force the comparator
-        // to be used instead of the object's equals()
-        Collections.sort(lhs, comparator);
-        Collections.sort(rhs, comparator);
-        for (int i = 0; i < lhsSize; ++i) {
-            if (comparator.compare(lhs.get(i), rhs.get(i)) != 0) {
-                return false;
-            }
-        }
-        return true;
-    }
-}","allocate more height ( 150px ) , scroll inline note into view ; don \' t write empty footnote",0
"diff --git a/src/org/junit/experimental/theories/Theories.java b/src/org/junit/experimental/theories/Theories.java
index cf9369c9f93e..1c0cb0454a14 100644
--- a/src/org/junit/experimental/theories/Theories.java
+++ b/src/org/junit/experimental/theories/Theories.java
@@ -14,7 +14,7 @@
 import org.junit.experimental.theories.internal.ParameterizedAssertionError;
 import org.junit.internal.runners.InitializationError;
 import org.junit.internal.runners.JUnit4ClassRunner;
-import org.junit.internal.runners.links.BeforeAndAfter;
+import org.junit.internal.runners.links.WithBeforeAndAfter;
 import org.junit.internal.runners.links.Link;
 import org.junit.internal.runners.model.Roadie;
 import org.junit.internal.runners.model.TestMethod;
@@ -40,25 +40,23 @@ protected List<TestMethod> getTestMethods() {
 
 	@Override
 	protected Link chain(final TestMethod method) {
-		// TODO: (Oct 8, 2007 10:46:52 AM) verbs for classes?
-
-		return notifier(new Link() {
+		return notifying(method, new Link() {
 			@Override
 			public void run(Roadie context) {
 				// TODO: (Oct 5, 2007 11:23:04 AM) handle more gracefully
 
 				try {
-					handleExceptions(anchor(method), method).run(context);
+					possiblyExpectingExceptions(method, invoke(method)).run(context);
 				} catch (Throwable e) {
 					// TODO: (Oct 5, 2007 11:23:47 AM) Don't make addFailure be public
 					context.addFailure(e);
 				}
 			}
-		}, method);
+		});
 	}
 
 	@Override
-	protected TheoryAnchor anchor(TestMethod method) {
+	protected TheoryAnchor invoke(TestMethod method) {
 		return new TheoryAnchor(method);
 	}
 
@@ -107,9 +105,7 @@ protected void runWithCompleteAssignment(final Assignments complete)
 						.getConstructor().newInstance();
 				final Roadie thisContext= complete.getContext()
 						.withNewInstance(freshInstance);
-				// TODO: (Oct 8, 2007 10:42:56 AM) MethodRunner should not be a JavaElement
-
-				new BeforeAndAfter(new Link() {
+				new WithBeforeAndAfter(new Link() {
 					@Override
 					public void run(Roadie context) throws Throwable {
 							invokeWithActualParameters(freshInstance, complete);
diff --git a/src/org/junit/internal/runners/JUnit4ClassRunner.java b/src/org/junit/internal/runners/JUnit4ClassRunner.java
index 9b2c8a598bfc..94e3d1e190ea 100644
--- a/src/org/junit/internal/runners/JUnit4ClassRunner.java
+++ b/src/org/junit/internal/runners/JUnit4ClassRunner.java
@@ -7,14 +7,14 @@
 import java.util.Iterator;
 import java.util.List;
 
-import org.junit.internal.runners.links.BeforeAndAfter;
-import org.junit.internal.runners.links.ExpectedException;
-import org.junit.internal.runners.links.Ignored;
-import org.junit.internal.runners.links.InvokeMethod;
+import org.junit.internal.runners.links.WithBeforeAndAfter;
+import org.junit.internal.runners.links.ExpectingException;
+import org.junit.internal.runners.links.IgnoreTest;
+import org.junit.internal.runners.links.Invoke;
 import org.junit.internal.runners.links.Link;
-import org.junit.internal.runners.links.NoExpectedException;
-import org.junit.internal.runners.links.Notifier;
-import org.junit.internal.runners.links.Timeout;
+import org.junit.internal.runners.links.ExpectingNoException;
+import org.junit.internal.runners.links.Notifying;
+import org.junit.internal.runners.links.WithTimeout;
 import org.junit.internal.runners.model.ReflectiveCallable;
 import org.junit.internal.runners.model.Roadie;
 import org.junit.internal.runners.model.TestClass;
@@ -66,35 +66,10 @@ public void run() {
 
 	protected void runMethods(final RunNotifier notifier) {
 		for (TestMethod method : fTestMethods)
-			invokeTestMethod(method, notifier);
+			runMethod(method, notifier);
 	}
 
-	@Override
-	public Description getDescription() {
-		Description spec= Description.createSuiteDescription(getName(),
-				classAnnotations());
-		List<TestMethod> testMethods= fTestMethods;
-		// TODO: (Oct 8, 2007 10:32:57 AM) Why doesn't Eclipse quickfix types in
-		// new-style for loops?
-
-		for (TestMethod method : testMethods)
-			spec.addChild(methodDescription(method));
-		return spec;
-	}
-
-	protected Annotation[] classAnnotations() {
-		return fTestClass.getJavaClass().getAnnotations();
-	}
-
-	protected String getName() {
-		return getTestClass().getName();
-	}
-
-	protected Object createTest() throws Exception {
-		return getTestClass().getConstructor().newInstance();
-	}
-
-	protected void invokeTestMethod(TestMethod method, RunNotifier notifier) {
+	protected void runMethod(TestMethod method, RunNotifier notifier) {
 		Description description= methodDescription(method);
 		Object test;
 		try {
@@ -111,15 +86,88 @@ protected Object runReflectiveCall() throws Throwable {
 		run(new Roadie(notifier, description, test), method);
 	}
 
-	protected String testName(TestMethod method) {
-		return method.getName();
+	protected Object createTest() throws Exception {
+		return fTestClass.getConstructor().newInstance();
 	}
 
 	protected Description methodDescription(TestMethod method) {
-		return Description.createTestDescription(getTestClass().getJavaClass(),
+		return Description.createTestDescription(fTestClass.getJavaClass(),
 				testName(method), method.getMethod().getAnnotations());
 	}
 
+	protected String testName(TestMethod method) {
+		return method.getName();
+	}
+	
+	public void run(Roadie context, TestMethod method) {
+		try {
+			chain(method).run(context);
+		} catch (StoppedByUserException e) {
+			throw e;
+		} catch (Throwable e) {
+			throw new RuntimeException(""Unexpected error running tests"", e);
+		}
+	}
+
+	protected Link chain(TestMethod method) {
+		// TODO: (Oct 5, 2007 11:09:00 AM) Rename Link
+
+		Link link= invoke(method);
+		link= possiblyExpectingExceptions(method, link);
+		link= withPotentialTimeout(method, link);
+		link= withBeforeAndAfter(method, link);
+		return notifying(method, link);
+	}
+	
+	protected Link invoke(TestMethod method) {
+		return new Invoke(method);
+	}
+
+	protected Link possiblyExpectingExceptions(TestMethod method, Link next) {
+		return method.expectsException()
+			? new ExpectingException(next, method.getExpectedException())
+			: new ExpectingNoException(next);
+	}
+
+	protected Link withPotentialTimeout(TestMethod method, Link next) {
+		long timeout= method.getTimeout();
+		return timeout > 0
+			? new WithTimeout(next, timeout)
+			: next;
+	}
+
+	protected Link withBeforeAndAfter(TestMethod method, Link link) {
+		link= new WithBeforeAndAfter(link, method);
+		return link;
+	}
+
+	protected Link notifying(TestMethod method, Link link) {
+		if (method.isIgnored())
+			return new IgnoreTest();
+		return new Notifying(link);
+	}
+
+	@Override
+	public Description getDescription() {
+		Description spec= Description.createSuiteDescription(getName(),
+				classAnnotations());
+		List<TestMethod> testMethods= fTestMethods;
+		// TODO: (Oct 8, 2007 10:32:57 AM) Why doesn't Eclipse quickfix types in
+		// new-style for loops?
+
+		for (TestMethod method : testMethods)
+			spec.addChild(methodDescription(method));
+		return spec;
+	}
+
+	protected String getName() {
+		return fTestClass.getName();
+	}
+	
+	protected Annotation[] classAnnotations() {
+		return fTestClass.getJavaClass().getAnnotations();
+	}
+
 	public void filter(Filter filter) throws NoTestsRemainException {
 		for (Iterator<TestMethod> iter= fTestMethods.iterator(); iter.hasNext();) {
 			TestMethod method= iter.next();
@@ -142,50 +190,4 @@ public int compare(TestMethod o1, TestMethod o2) {
 	protected TestClass getTestClass() {
 		return fTestClass;
 	}
-	
-	public Link timeout(Link next, TestMethod method) {
-		long timeout= method.getTimeout();
-		return timeout > 0
-			? new Timeout(next, timeout)
-			: next;
-	}
-
-	public Link handleExceptions(Link next, TestMethod method) {
-		return method.expectsException()
-			? new ExpectedException(next, method.getExpectedException())
-			: new NoExpectedException(next);
-	}
-	
-	protected Link anchor(TestMethod method) {
-		return new InvokeMethod(method);
-	}
-	
-	public void run(Roadie context, TestMethod method) {
-		try {
-			chain(method).run(context);
-		} catch (StoppedByUserException e) {
-			throw e;
-		} catch (Throwable e) {
-			throw new RuntimeException(""Unexpected error running tests"", e);
-		}
-	}
-
-	protected Link chain(TestMethod method) {
-		// TODO: (Oct 5, 2007 11:09:00 AM) Rename Link
-
-		Link link= anchor(method);
-		link= handleExceptions(link, method);
-		link= timeout(link, method);
-		// TODO: (Oct 8, 2007 10:45:34 AM) parallelize (make beforeAndAfter method)
-		// TODO: (Oct 8, 2007 10:54:54 AM) sort methods
-
-		link= new BeforeAndAfter(link, method);
-		return notifier(link, method);
-	}
-
-	protected Link notifier(Link link, TestMethod method) {
-		if (method.isIgnored())
-			return new Ignored();
-		return new Notifier(link);
-	}
 }
\ No newline at end of file
diff --git a/src/org/junit/internal/runners/links/ExpectedException.java b/src/org/junit/internal/runners/links/ExpectingException.java
similarity index 81%
rename from src/org/junit/internal/runners/links/ExpectedException.java
rename to src/org/junit/internal/runners/links/ExpectingException.java
index 3a1e958c1d92..23114aa0b480 100644
--- a/src/org/junit/internal/runners/links/ExpectedException.java
+++ b/src/org/junit/internal/runners/links/ExpectingException.java
@@ -6,11 +6,11 @@
 import org.junit.Assume.AssumptionViolatedException;
 import org.junit.internal.runners.model.Roadie;
 
-public class ExpectedException extends Link {
+public class ExpectingException extends Link {
 	private Link fNext;
 	private final Class<? extends Throwable> fExpected;
 	
-	public ExpectedException(Link next, Class<? extends Throwable> expected) {
+	public ExpectingException(Link next, Class<? extends Throwable> expected) {
 		fNext= next;
 		fExpected= expected;
 	}
@@ -24,7 +24,6 @@ public void run(Roadie context) {
 		} catch (AssumptionViolatedException e) {
 			// Do nothing
 		} catch (Throwable e) {
-			// TODO: (Oct 8, 2007 10:51:42 AM) Do I need isUnexpected?
 			if (!fExpected.isAssignableFrom(e.getClass())) {
 				String message= ""Unexpected exception, expected<""
 							+ fExpected.getName() + ""> but was<""
diff --git a/src/org/junit/internal/runners/links/NoExpectedException.java b/src/org/junit/internal/runners/links/ExpectingNoException.java
similarity index 79%
rename from src/org/junit/internal/runners/links/NoExpectedException.java
rename to src/org/junit/internal/runners/links/ExpectingNoException.java
index c540947f34cc..30fb6e919ad7 100644
--- a/src/org/junit/internal/runners/links/NoExpectedException.java
+++ b/src/org/junit/internal/runners/links/ExpectingNoException.java
@@ -6,9 +6,9 @@
 import org.junit.Assume.AssumptionViolatedException;
 import org.junit.internal.runners.model.Roadie;
 
-public class NoExpectedException extends Link {
+public class ExpectingNoException extends Link {
 	Link fNext;
-	public NoExpectedException(Link next) {
+	public ExpectingNoException(Link next) {
 		fNext= next;
 	}
 	
diff --git a/src/org/junit/internal/runners/links/Ignored.java b/src/org/junit/internal/runners/links/IgnoreTest.java
similarity index 83%
rename from src/org/junit/internal/runners/links/Ignored.java
rename to src/org/junit/internal/runners/links/IgnoreTest.java
index 2feb06a19945..48578acbcaa6 100644
--- a/src/org/junit/internal/runners/links/Ignored.java
+++ b/src/org/junit/internal/runners/links/IgnoreTest.java
@@ -5,7 +5,7 @@
 
 import org.junit.internal.runners.model.Roadie;
 
-public class Ignored extends Link {
+public class IgnoreTest extends Link {
 	@Override
 	public void run(Roadie context) throws Throwable {
 		context.fireTestIgnored();
diff --git a/src/org/junit/internal/runners/links/InvokeMethod.java b/src/org/junit/internal/runners/links/Invoke.java
similarity index 80%
rename from src/org/junit/internal/runners/links/InvokeMethod.java
rename to src/org/junit/internal/runners/links/Invoke.java
index 299e3da9aa38..4f8301bc9f35 100644
--- a/src/org/junit/internal/runners/links/InvokeMethod.java
+++ b/src/org/junit/internal/runners/links/Invoke.java
@@ -6,10 +6,10 @@
 import org.junit.internal.runners.model.Roadie;
 import org.junit.internal.runners.model.TestMethod;
 
-public class InvokeMethod extends Link {
+public class Invoke extends Link {
 	private final TestMethod fTestMethod;
 	
-	public InvokeMethod(TestMethod testMethod) {
+	public Invoke(TestMethod testMethod) {
 		fTestMethod= testMethod;
 	}
 	
diff --git a/src/org/junit/internal/runners/links/Notifier.java b/src/org/junit/internal/runners/links/Notifying.java
similarity index 83%
rename from src/org/junit/internal/runners/links/Notifier.java
rename to src/org/junit/internal/runners/links/Notifying.java
index cd77a099decb..39236a9a8c33 100644
--- a/src/org/junit/internal/runners/links/Notifier.java
+++ b/src/org/junit/internal/runners/links/Notifying.java
@@ -5,10 +5,10 @@
 
 import org.junit.internal.runners.model.Roadie;
 
-public class Notifier extends Link {
+public class Notifying extends Link {
 	private final Link fNext;
 
-	public Notifier(Link next) {
+	public Notifying(Link next) {
 		fNext= next;
 	}
 
diff --git a/src/org/junit/internal/runners/links/BeforeAndAfter.java b/src/org/junit/internal/runners/links/WithBeforeAndAfter.java
similarity index 80%
rename from src/org/junit/internal/runners/links/BeforeAndAfter.java
rename to src/org/junit/internal/runners/links/WithBeforeAndAfter.java
index 4c128bc5e431..48ae7811dd37 100644
--- a/src/org/junit/internal/runners/links/BeforeAndAfter.java
+++ b/src/org/junit/internal/runners/links/WithBeforeAndAfter.java
@@ -7,11 +7,11 @@
 import org.junit.internal.runners.model.Roadie;
 
 
-public class BeforeAndAfter extends Link {
+public class WithBeforeAndAfter extends Link {
 	private final Link fNext;
 	private final TestElement fElement;
 	
-	public BeforeAndAfter(Link next, TestElement element) {
+	public WithBeforeAndAfter(Link next, TestElement element) {
 		fNext= next;
 		fElement = element;
 	}
diff --git a/src/org/junit/internal/runners/links/Timeout.java b/src/org/junit/internal/runners/links/WithTimeout.java
similarity index 94%
rename from src/org/junit/internal/runners/links/Timeout.java
rename to src/org/junit/internal/runners/links/WithTimeout.java
index 761073d57bed..ba6dadd21ed6 100644
--- a/src/org/junit/internal/runners/links/Timeout.java
+++ b/src/org/junit/internal/runners/links/WithTimeout.java
@@ -13,11 +13,11 @@
 
 import org.junit.internal.runners.model.Roadie;
 
-public class Timeout extends Link {
+public class WithTimeout extends Link {
 	private Link fNext;
 	private final long fTimeout;
 
-	public Timeout(Link next, long timeout) {
+	public WithTimeout(Link next, long timeout) {
 		fNext= next;
 		fTimeout= timeout;
 	}
diff --git a/src/org/junit/internal/runners/model/TestClass.java b/src/org/junit/internal/runners/model/TestClass.java
index bd75f3948178..9ff18e2c3b0e 100644
--- a/src/org/junit/internal/runners/model/TestClass.java
+++ b/src/org/junit/internal/runners/model/TestClass.java
@@ -43,7 +43,7 @@ public List<TestMethod> getAnnotatedMethods(Class<? extends Annotation> annotati
 			for (Method eachMethod : methods) {
 				Annotation annotation= eachMethod.getAnnotation(annotationClass);
 				TestMethod testMethod= new TestMethod(eachMethod, this);
-				if (annotation != null && ! isShadowed(testMethod, results))
+				if (annotation != null && ! testMethod.isShadowedBy(results))
 					results.add(testMethod);
 			}
 		}
@@ -56,16 +56,6 @@ private boolean runsTopToBottom(Class< ? extends Annotation> annotation) {
 		return annotation.equals(Before.class) || annotation.equals(BeforeClass.class);
 	}
 	
-	private boolean isShadowed(TestMethod method, List<TestMethod> results) {
-		// TODO: (Oct 8, 2007 3:18:15 PM) push to InvokedMethod
-
-		for (TestMethod each : results) {
-			if (method.isShadowedBy(each))
-				return true;
-		}
-		return false;
-	}
-
 	private List<Class<?>> getSuperClasses(Class< ?> testClass) {
 		ArrayList<Class<?>> results= new ArrayList<Class<?>>();
 		Class<?> current= testClass;
diff --git a/src/org/junit/internal/runners/model/TestMethod.java b/src/org/junit/internal/runners/model/TestMethod.java
index 0b26892dd775..7e9b34d42bad 100644
--- a/src/org/junit/internal/runners/model/TestMethod.java
+++ b/src/org/junit/internal/runners/model/TestMethod.java
@@ -1,6 +1,5 @@
 package org.junit.internal.runners.model;
 
-import java.lang.annotation.Annotation;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.util.List;
@@ -30,10 +29,6 @@ public Class<? extends Throwable> getExpectedException() {
 			return annotation.expected();
 	}
 
-	boolean isUnexpected(Throwable exception) {
-		return !getExpectedException().isAssignableFrom(exception.getClass());
-	}
-
 	public boolean expectsException() {
 		return getExpectedException() != null;
 	}
@@ -83,12 +78,6 @@ public Class<?>[] getParameterTypes() {
 		return fMethod.getParameterTypes();
 	}
 
-	public Annotation[][] getParameterAnnotations() {
-		// TODO: (Oct 8, 2007 10:59:57 AM) can I push this out without futzing structure?
-	
-		return fMethod.getParameterAnnotations();
-	}
-
 	public void validate(boolean isStatic, List<Throwable> errors) {
 		if (Modifier.isStatic(fMethod.getModifiers()) != isStatic) {
 			String state= isStatic ? ""should"" : ""should not"";
@@ -120,4 +109,12 @@ public boolean isShadowedBy(TestMethod each) {
 		}
 		return true;
 	}
+
+	boolean isShadowedBy(List<TestMethod> results) {
+		for (TestMethod each : results) {
+			if (isShadowedBy(each))
+				return true;
+		}
+		return false;
+	}
 }
\ No newline at end of file
diff --git a/src/org/junit/tests/experimental/theories/extendingwithstubs/StubbedTheories.java b/src/org/junit/tests/experimental/theories/extendingwithstubs/StubbedTheories.java
index 856d31ded80a..facb74c95df0 100644
--- a/src/org/junit/tests/experimental/theories/extendingwithstubs/StubbedTheories.java
+++ b/src/org/junit/tests/experimental/theories/extendingwithstubs/StubbedTheories.java
@@ -17,7 +17,7 @@ public StubbedTheories(Class<?> klass) throws InitializationError {
 	}
 
 	@Override
-	protected TheoryAnchor anchor(TestMethod method) {
+	protected TheoryAnchor invoke(TestMethod method) {
 		return new StubbedTheoryAnchor(method);
 	}","- Renamed link classes. <enter>   Absolute actions are verbs: IgnoreTest, Invoke. <enter>   ActionModifiers are modifying phrases: ExpectingException, WithTimeout, etc. <enter>  <enter> - Moved isShadowedBy(List) to TestMethod",1
"diff --git a/dubbo-rpc/dubbo-rpc-grpc/src/main/java/org/apache/dubbo/rpc/protocol/grpc/GrpcProtocol.java b/dubbo-rpc/dubbo-rpc-grpc/src/main/java/org/apache/dubbo/rpc/protocol/grpc/GrpcProtocol.java
index 83aaf7b8cbc..8a1188fe681 100644
--- a/dubbo-rpc/dubbo-rpc-grpc/src/main/java/org/apache/dubbo/rpc/protocol/grpc/GrpcProtocol.java
+++ b/dubbo-rpc/dubbo-rpc-grpc/src/main/java/org/apache/dubbo/rpc/protocol/grpc/GrpcProtocol.java
@@ -93,7 +93,9 @@ protected <T> Runnable doExport(T proxiedImpl, Class<T> type, URL url) throws Rp
         }
         grpcServer.getRegistry().addService((BindableService) originalImpl, url.getServiceKey());
 
-        grpcServer.start();
+        if (!grpcServer.isStarted()) {
+            grpcServer.start();
+        }
 
         return () -> grpcServer.getRegistry().removeService(url.getServiceKey());
     }
@@ -167,6 +169,7 @@ public class GrpcRemotingServer extends RemotingServerAdapter {
 
         private Server originalServer;
         private DubboHandlerRegistry handlerRegistry;
+        private volatile boolean started;
 
         public GrpcRemotingServer(Server server, DubboHandlerRegistry handlerRegistry) {
             this.originalServer = server;
@@ -176,6 +179,7 @@ public GrpcRemotingServer(Server server, DubboHandlerRegistry handlerRegistry) {
         public void start() throws RpcException {
             try {
                 originalServer.start();
+                started = true;
             } catch (IOException e) {
                 throw new RpcException(""Starting gRPC server failed. "", e);
             }
@@ -190,6 +194,10 @@ public Object getDelegateServer() {
             return originalServer;
         }
 
+        public boolean isStarted() {
+            return started;
+        }
+
         @Override
         public void close() {
             originalServer.shutdown();",add start status for gRPC server,1
"diff --git a/src/com/android/launcher3/DropTarget.java b/src/com/android/launcher3/DropTarget.java
index c1aed9812c..b27abc4369 100644
--- a/src/com/android/launcher3/DropTarget.java
+++ b/src/com/android/launcher3/DropTarget.java
@@ -28,6 +28,7 @@ import com.android.launcher3.folder.FolderNameProvider;
 import com.android.launcher3.logging.InstanceId;
 import com.android.launcher3.logging.InstanceIdSequence;
 import com.android.launcher3.model.data.ItemInfo;
+import com.android.launcher3.util.Executors;
 
 /**
  * Interface defining an object that can receive a drag.
@@ -84,7 +85,9 @@ public interface DropTarget {
 
         public DragObject(Context context) {
             if (FeatureFlags.FOLDER_NAME_SUGGEST.get()) {
-                folderNameProvider = FolderNameProvider.newInstance(context);
+                Executors.MODEL_EXECUTOR.post(() -> {
+                    folderNameProvider = FolderNameProvider.newInstance(context);
+                });
             }
         }
 
diff --git a/src/com/android/launcher3/folder/Folder.java b/src/com/android/launcher3/folder/Folder.java
index 7998c2d50e..301f79c405 100644
--- a/src/com/android/launcher3/folder/Folder.java
+++ b/src/com/android/launcher3/folder/Folder.java
@@ -1005,7 +1005,8 @@ public class Folder extends AbstractFloatingView implements ClipPathView, DragSo
         if (!items.isEmpty()) {
             mLauncher.getModelWriter().moveItemsInDatabase(items, mInfo.id, 0);
         }
-        if (FeatureFlags.FOLDER_NAME_SUGGEST.get() && !isBind) {
+        if (FeatureFlags.FOLDER_NAME_SUGGEST.get() && !isBind
+                && total > 1 /* no need to update if there's one icon */) {
             Executors.MODEL_EXECUTOR.post(() -> {
                 FolderNameInfo[] nameInfos =
                         new FolderNameInfo[FolderNameProvider.SUGGEST_MAX];
diff --git a/src/com/android/launcher3/folder/FolderIcon.java b/src/com/android/launcher3/folder/FolderIcon.java
index b40b1e2ebc..7af4664a05 100644
--- a/src/com/android/launcher3/folder/FolderIcon.java
+++ b/src/com/android/launcher3/folder/FolderIcon.java
@@ -409,7 +409,7 @@ public class FolderIcon extends FrameLayout implements FolderListener, IconLabel
             FolderNameInfo[] nameInfos =
                     new FolderNameInfo[FolderNameProvider.SUGGEST_MAX];
             if (FeatureFlags.FOLDER_NAME_SUGGEST.get()) {
-                Executors.UI_HELPER_EXECUTOR.post(() -> {
+                Executors.MODEL_EXECUTOR.post(() -> {
                     d.folderNameProvider.getSuggestedFolderName(
                             getContext(), mInfo.contents, nameInfos);
                     showFinalView(finalIndex, item, nameInfos, d.logInstanceId);
diff --git a/src/com/android/launcher3/folder/FolderNameProvider.java b/src/com/android/launcher3/folder/FolderNameProvider.java
index 7731e6e3f3..2be0bcee17 100644
--- a/src/com/android/launcher3/folder/FolderNameProvider.java
+++ b/src/com/android/launcher3/folder/FolderNameProvider.java
@@ -31,6 +31,7 @@ import com.android.launcher3.model.data.AppInfo;
 import com.android.launcher3.model.data.FolderInfo;
 import com.android.launcher3.model.data.WorkspaceItemInfo;
 import com.android.launcher3.util.IntSparseArrayMap;
+import com.android.launcher3.util.Preconditions;
 import com.android.launcher3.util.ResourceBasedOverride;
 
 import java.util.ArrayList;
@@ -64,6 +65,7 @@ public class FolderNameProvider implements ResourceBasedOverride {
     public static FolderNameProvider newInstance(Context context) {
         FolderNameProvider fnp = Overrides.getObject(FolderNameProvider.class,
                 context.getApplicationContext(), R.string.folder_name_provider_class);
+        Preconditions.assertWorkerThread();
         fnp.load(context);
 
         return fnp;
@@ -71,6 +73,7 @@ public class FolderNameProvider implements ResourceBasedOverride {
 
     public static FolderNameProvider newInstance(Context context, List<AppInfo> appInfos,
             IntSparseArrayMap<FolderInfo> folderInfos) {
+        Preconditions.assertWorkerThread();
         FolderNameProvider fnp = Overrides.getObject(FolderNameProvider.class,
                 context.getApplicationContext(), R.string.folder_name_provider_class);
         fnp.load(appInfos, folderInfos);
@@ -94,7 +97,7 @@ public class FolderNameProvider implements ResourceBasedOverride {
     public void getSuggestedFolderName(Context context,
             ArrayList<WorkspaceItemInfo> workspaceItemInfos,
             FolderNameInfo[] nameInfos) {
-
+        Preconditions.assertWorkerThread();
         if (DEBUG) {
             Log.d(TAG, ""getSuggestedFolderName:"" + Arrays.toString(nameInfos));
         }",Add support for addtional props upon showing custom tabs,0
"diff --git a/v7/appcompat/res/values-v24/styles_base.xml b/v7/appcompat/res/values-v24/styles_base.xml
deleted file mode 100644
index dca71dd331b..00000000000
--- a/v7/appcompat/res/values-v24/styles_base.xml
+++ /dev/null
@@ -1,22 +0,0 @@
-<?xml version=""1.0"" encoding=""utf-8""?>
-<!--
-     Copyright (C) 2016 The Android Open Source Project
-
-     Licensed under the Apache License, Version 2.0 (the ""License"");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an ""AS IS"" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
--->
-
-<resources>
-
-    <style name=""Base.Widget.AppCompat.SeekBar.Discrete"" parent=""android:Widget.Material.SeekBar.Discrete"" />
-
-</resources>",Adjusted scoping on method reference stuff,0
"diff --git a/libraries/SoftwareSerial/examples/SoftwareSerialExample/SoftwareSerialExample.ino b/libraries/SoftwareSerial/examples/SoftwareSerialExample/SoftwareSerialExample.ino
index 69bcc01a1..6101bb1ad 100644
--- a/libraries/SoftwareSerial/examples/SoftwareSerialExample/SoftwareSerialExample.ino
+++ b/libraries/SoftwareSerial/examples/SoftwareSerialExample/SoftwareSerialExample.ino
@@ -5,11 +5,20 @@
  Receives from software serial, sends to hardware serial.
  
  The circuit: 
- * RX is digital pin 2 (connect to TX of other device)
- * TX is digital pin 3 (connect to RX of other device)
+ * RX is digital pin 10 (connect to TX of other device)
+ * TX is digital pin 11 (connect to RX of other device)
+ 
+ Note:
+ Not all pins on the Mega and Mega 2560 support change interrupts, 
+ so only the following can be used for RX: 
+ 10, 11, 12, 13, 50, 51, 52, 53, 62, 63, 64, 65, 66, 67, 68, 69
+ 
+ Not all pins on the Leonardo support change interrupts, 
+ so only the following can be used for RX: 
+ 8, 9, 10, 11, 14 (MISO), 15 (SCK), 16 (MOSI).
  
  created back in the mists of time
- modified 9 Apr 2012
+ modified 25 May 2012
  by Tom Igoe
  based on Mikal Hart's example
  
@@ -18,17 +27,17 @@
  */
 #include <SoftwareSerial.h>
 
-SoftwareSerial mySerial(2, 3); // RX, TX
+SoftwareSerial mySerial(10, 11); // RX, TX
 
 void setup()  
 {
- // Open serial communications and wait for port to open:
+  // Open serial communications and wait for port to open:
   Serial.begin(57600);
-   while (!Serial) {
+  while (!Serial) {
     ; // wait for serial port to connect. Needed for Leonardo only
   }
 
-  
+
   Serial.println(""Goodnight moon!"");
 
   // set the data rate for the SoftwareSerial port
@@ -43,3 +52,4 @@ void loop() // run over and over
   if (Serial.available())
     mySerial.write(Serial.read());
 }
+
diff --git a/libraries/SoftwareSerial/examples/TwoPortReceive/TwoPortReceive.ino b/libraries/SoftwareSerial/examples/TwoPortReceive/TwoPortReceive.ino
index d9f8f453f..d607ee622 100644
--- a/libraries/SoftwareSerial/examples/TwoPortReceive/TwoPortReceive.ino
+++ b/libraries/SoftwareSerial/examples/TwoPortReceive/TwoPortReceive.ino
@@ -16,8 +16,17 @@
  * First serial device's TX attached to digital pin 2, RX to pin 3
  * Second serial device's TX attached to digital pin 4, RX to pin 5
  
+ Note:
+ Not all pins on the Mega and Mega 2560 support change interrupts, 
+ so only the following can be used for RX: 
+ 10, 11, 12, 13, 50, 51, 52, 53, 62, 63, 64, 65, 66, 67, 68, 69
+ 
+ Not all pins on the Leonardo support change interrupts, 
+ so only the following can be used for RX: 
+ 8, 9, 10, 11, 14 (MISO), 15 (SCK), 16 (MOSI).
+ 
  created 18 Apr. 2011
- modified 9 Apr 2012
+ modified 25 May 2012
  by Tom Igoe
  based on Mikal Hart's twoPortRXExample
  
@@ -26,11 +35,12 @@
  */
 
 #include <SoftwareSerial.h>
-// software serial #1: TX = digital pin 2, RX = digital pin 3
-SoftwareSerial portOne(2, 3);
+// software serial #1: TX = digital pin 10, RX = digital pin 11
+SoftwareSerial portOne(10,11);
 
-// software serial #2: TX = digital pin 4, RX = digital pin 5
-SoftwareSerial portTwo(4, 5);
+// software serial #2: TX = digital pin 8, RX = digital pin 9
+// on the Mega, use other pins instead, since 8 and 9 don't work on the Mega
+SoftwareSerial portTwo(8,9);
 
 void setup()
 {",Add method to rest api interceptors to allow enhancing the DeploymentBuilder,0
"diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java b/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java
index a7c6d691ad84..c06f480eb8e5 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java
@@ -151,7 +151,14 @@ private static Platform findPlatform() {
     Method setUseSessionTickets;
     Method setHostname;
     try {
-      openSslSocketClass = Class.forName(""org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl"");
+      try {
+        openSslSocketClass = Class.forName(""com.android.org.conscrypt.OpenSSLSocketImpl"");
+      } catch (ClassNotFoundException ignored) {
+        // Older platform before being unbundled.
+        openSslSocketClass = Class.forName(
+            ""org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl"");
+      }
+
       setUseSessionTickets = openSslSocketClass.getMethod(""setUseSessionTickets"", boolean.class);
       setHostname = openSslSocketClass.getMethod(""setHostname"", String.class);",Add current AOSP class name for OpenSSLSocketImpl <enter>  <enter> AOSP moved OpenSSLSocketImpl to com.android.org.conscrypt.* so add that <enter> as the first choice for unbundled apps. <enter>  <enter> Change-Id: I7bad6533dcb86ee1cac3b15f42dd386bd651eaed,1
"diff --git a/pom.xml b/pom.xml
index 56c9f00dde..70f5f1bdd8 100644
--- a/pom.xml
+++ b/pom.xml
@@ -57,7 +57,7 @@
     <!-- Converter Dependencies -->
     <protobuf.version>2.5.0</protobuf.version>
     <jackson.version>2.4.3</jackson.version>
-    <wire.version>1.5.1</wire.version>
+    <wire.version>1.5.2</wire.version>
     <simplexml.version>2.7.1</simplexml.version>
 
     <!-- Test Dependencies -->",Bump Wire dependency.,1
"diff --git a/mod/jodd/src/jodd/datetime/format/AbstractFormatter.java b/mod/jodd/src/jodd/datetime/format/AbstractFormatter.java
index f78ae3b60..f86f7b8fc 100644
--- a/mod/jodd/src/jodd/datetime/format/AbstractFormatter.java
+++ b/mod/jodd/src/jodd/datetime/format/AbstractFormatter.java
@@ -237,4 +237,42 @@ public abstract class AbstractFormatter implements JdtFormatter {
 		}
 		throw new IllegalArgumentException(""Value too big: "" + value);
 	}
+
+	/**
+	 * Prints 4 digits and optional minus sign.
+	 */
+	protected static String printPad4(int value) {
+		char[] result = new char[5];
+		int count = 0;
+
+		if (value < 0) {
+			result[count++] = '-';
+			value = -value;
+		}
+
+		String str = Integer.toString(value);
+
+		if (value < 10) {
+			result[count++] = '0';
+			result[count++] = '0';
+			result[count++] = '0';
+			result[count++] = str.charAt(0);
+		} else if (value < 100) {
+			result[count++] = '0';
+			result[count++] = '0';
+			result[count++] = str.charAt(0);
+			result[count++] = str.charAt(1);
+		} else if (value < 1000) {
+			result[count++] = '0';
+			result[count++] = str.charAt(0);
+			result[count++] = str.charAt(1);
+			result[count++] = str.charAt(2);
+		} else {
+			result[count++] = str.charAt(0);
+			result[count++] = str.charAt(1);
+			result[count++] = str.charAt(2);
+			result[count++] = str.charAt(3);
+		}
+		return new String(result, 0, count);
+	}
 }
diff --git a/mod/jodd/src/jodd/datetime/format/DefaultFormatter.java b/mod/jodd/src/jodd/datetime/format/DefaultFormatter.java
index df0796de2..0b5146961 100644
--- a/mod/jodd/src/jodd/datetime/format/DefaultFormatter.java
+++ b/mod/jodd/src/jodd/datetime/format/DefaultFormatter.java
@@ -4,7 +4,6 @@ package jodd.datetime.format;
 
 import jodd.datetime.DateTimeStamp;
 import jodd.datetime.JDateTime;
-import jodd.format.Printf;
 import jodd.util.LocaleUtil;
 import jodd.util.DateFormatSymbolsEx;
 
@@ -77,7 +76,7 @@ public class DefaultFormatter extends AbstractFormatter {
 		DateFormatSymbolsEx dfs = LocaleUtil.getDateFormatSymbols(jdt.getLocale());
 		switch (patternIndex) {
 			case 0:
-				return Printf.str(""%~04i"", jdt.getYear());
+				return printPad4(jdt.getYear());
 			case 1:
 				return print2(jdt.getMonth());
 			case 2:
@@ -111,9 +110,15 @@ public class DefaultFormatter extends AbstractFormatter {
 			case 16:
 				return jdt.getEra() == 1 ? dfs.getAdEra() : dfs.getBcEra();
 			case 17:
-				return jdt.getTimeZone().getDisplayName(false, TimeZone.LONG, jdt.getLocale());
+				return jdt.getTimeZone().getDisplayName(
+						jdt.isInDaylightTime(),
+						TimeZone.LONG,
+						jdt.getLocale());
 			case 18:
-				return jdt.getTimeZone().getDisplayName(false, TimeZone.SHORT, jdt.getLocale());
+				return jdt.getTimeZone().getDisplayName(
+						jdt.isInDaylightTime(),
+						TimeZone.SHORT,
+						jdt.getLocale());
 			default:
 				return new String(patterns[patternIndex]);
 		}","Added untitledAutoSave , autoSave to preferences",0
"diff --git a/README.md b/README.md
index e206f237ecd2..f87699bdf1f9 100644
--- a/README.md
+++ b/README.md
@@ -51,6 +51,26 @@ vogar \
     ./src/test/java
 ```
 
+MockWebServer
+-------------
+
+A library for testing HTTP, HTTPS, HTTP/2.0, and SPDY clients.
+
+MockWebServer coupling with OkHttp is essential for proper testing of SPDY and HTTP/2.0 so that code can be shared.
+
+### Download
+
+Download [the latest JAR][5] or grab via Maven:
+
+```xml
+<dependency>
+    <groupId>com.squareup.okhttp</groupId>
+    <artifactId>mockwebserver</artifactId>
+    <version>(insert latest version)</version>
+    <scope>test</scope>
+</dependency>
+```
+
 
 License
 -------
@@ -74,3 +94,4 @@ License
  [2]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST
  [3]: http://wiki.eclipse.org/Jetty/Feature/NPN
  [4]: https://code.google.com/p/vogar/
+ [5]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST",Added description and download info for MockWebServer.,1
"diff --git a/sonar-server/src/main/webapp/WEB-INF/db/migrate/170_delete_unvalid_project_snapshots.rb b/sonar-server/src/main/webapp/WEB-INF/db/migrate/170_delete_unvalid_project_snapshots.rb
index 623f1c8087f..e14e0dfa506 100644
--- a/sonar-server/src/main/webapp/WEB-INF/db/migrate/170_delete_unvalid_project_snapshots.rb
+++ b/sonar-server/src/main/webapp/WEB-INF/db/migrate/170_delete_unvalid_project_snapshots.rb
@@ -24,17 +24,14 @@
 class DeleteUnvalidProjectSnapshots < ActiveRecord::Migration
 
   def self.up
-   metric=Metric.find(:first, :conditions => ['name=?','lines'])
-   if metric
-     snapshots=select_snapshots_without_measures(metric)
-     delete_snapshots(snapshots)
-   end
+    snapshots=select_snapshots_without_measures
+    delete_snapshots(snapshots)
   end
 
-  def self.select_snapshots_without_measures(metric)
+  def self.select_snapshots_without_measures
    snapshots=nil
    say_with_time ""Select project snapshots without measures..."" do
-     snapshots=Snapshot.find_by_sql [""SELECT s.id FROM snapshots s WHERE s.scope='PRJ' and s.qualifier IN ('TRK', 'BRC') AND status='P' AND islast=? AND NOT EXISTS (select m.id from project_measures m WHERE m.snapshot_id=s.id AND m.metric_id=?)"", false, metric.id]
+     snapshots=Snapshot.find_by_sql [""SELECT s.id FROM snapshots s WHERE s.scope='PRJ' and s.qualifier IN ('TRK', 'BRC') AND status='P' AND islast=? AND NOT EXISTS (select m.id from project_measures m WHERE m.snapshot_id=s.id)"", false]
    end
    snapshots
   end",Use the standard coding conventions . . git - svn - id : https : / / svn . apache . org / repos / asf / maven / components / trunk @ 400220 13f79535 - 47bb - 0310 - 9956 - ffa450edef68,0
"diff --git a/core/src/main/java/bisq/core/btc/nodes/BtcNodes.java b/core/src/main/java/bisq/core/btc/nodes/BtcNodes.java
index 4f99850054..a14b10e4da 100644
--- a/core/src/main/java/bisq/core/btc/nodes/BtcNodes.java
+++ b/core/src/main/java/bisq/core/btc/nodes/BtcNodes.java
@@ -77,7 +77,10 @@ public class BtcNodes {
                         new BtcNode(""node100.wiz.network"", ""m3yqzythryowgedc.onion"", ""103.99.168.100"", BtcNode.DEFAULT_PORT, ""@wiz""),
                         new BtcNode(""node130.wiz.network"", ""22tg6ufbwz6o3l2u.onion"", ""103.99.168.130"", BtcNode.DEFAULT_PORT, ""@wiz""),
                         new BtcNode(""node140.wiz.network"", ""jiuuuislm7ooesic.onion"", ""103.99.168.140"", BtcNode.DEFAULT_PORT, ""@wiz""),
-                        new BtcNode(""node150.wiz.network"", ""zyhtr2ffbzn5yeg3.onion"", ""103.99.168.150"", BtcNode.DEFAULT_PORT, ""@wiz"")
+                        new BtcNode(""node150.wiz.network"", ""zyhtr2ffbzn5yeg3.onion"", ""103.99.168.150"", BtcNode.DEFAULT_PORT, ""@wiz""),
+
+                        // Rob Kaandorp
+                        new BtcNode(null, ""2pj2o2mrawj7yotg.onion"", null, BtcNode.DEFAULT_PORT, ""@robkaandorp"") // cannot provide IP because no static IP
                 ) :
                 new ArrayList<>();
     }",Added GuildController <issue_id> reateTextChannel ( String ) and <issue_id> reateVoiceChannel ( String ) .,0
"diff --git a/build.gradle b/build.gradle
index 6910082650..1f3cfd2362 100644
--- a/build.gradle
+++ b/build.gradle
@@ -25,12 +25,7 @@ def download(File downloadDir, String url, String name) {
     return dest;
 }
 
-ext {
-    versions = [
-            // update this value when elasticsearch is updated
-            elasticsearch: ""2.4.1""
-    ]
-}
+apply from: 'gradle/dependencies.gradle'
 
 repositories {
     mavenCentral()
@@ -40,51 +35,6 @@ allprojects {
     apply plugin: 'findbugs'
     apply plugin: 'jacoco'
 
-    configurations.all {
-        resolutionStrategy {
-            // fail eagerly on version conflict (includes transitive dependencies)
-            failOnVersionConflict()
-
-            // ES requires hamcrest-all which includes hamcrest-core
-            dependencySubstitution {
-                substitute module('org.hamcrest:hamcrest-core') with(
-                        module('org.hamcrest:hamcrest-all:1.3'))
-            }
-
-            // forced versions of conflicting deps
-            force 'com.spatial4j:spatial4j:0.5'
-            force 'com.google.guava:guava:18.0'
-            force 'commons-codec:commons-codec:1.10'
-            force 'com.carrotsearch.randomizedtesting:junit4-ant:2.3.1'
-            force 'com.carrotsearch.randomizedtesting:randomizedtesting-runner:2.3.2'
-            force 'junit:junit:4.11'
-            force 'org.slf4j:slf4j-api:1.6.2'
-            force 'com.fasterxml.jackson.core:jackson-core:2.8.1'
-            force 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.8.1'
-            force 'com.fasterxml.jackson.core:jackson-annotations:2.8.1'
-            force 'com.fasterxml.jackson.core:jackson-databind:2.8.1'
-            force 'joda-time:joda-time:2.9.4'
-            force 'org.hamcrest:hamcrest-all:1.3'
-            force 'org.antlr:antlr-runtime:3.5.2'
-            force 'commons-cli:commons-cli:1.3.1'
-            force 'org.apache.commons:commons-math3:3.6.1'
-            force 'org.apache.commons:commons-lang3:3.5'
-            force 'commons-logging:commons-logging:1.1.3'
-            force 'org.apache.httpcomponents:httpcore:4.3.3'
-            force 'org.apache.httpcomponents:httpclient:4.3.6'
-            force 'org.slf4j:slf4j-log4j12:1.7.21'
-            force 'log4j:log4j:1.2.17'
-            force 'io.netty:netty:3.10.6.Final'
-
-            // ensure to check following dependencies and their versions against those of HDFS plugin libs
-            // https://crate.io/docs/reference/en/latest/sql/snapshot_restore.html
-            force 'org.codehaus.jackson:jackson-core-asl:1.9.13'
-            force 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
-            force 'com.google.code.findbugs:jsr305:3.0.1'
-            force 'commons-lang:commons-lang:2.6'
-        }
-    }
-
     tasks.withType(JavaCompile) {
         sourceCompatibility = ""1.8""
         targetCompatibility = ""1.8""
diff --git a/es-cloud-aws/build.gradle b/es-cloud-aws/build.gradle
index 65eaed6bfd..fbfec17523 100644
--- a/es-cloud-aws/build.gradle
+++ b/es-cloud-aws/build.gradle
@@ -3,8 +3,8 @@ apply plugin: 'idea'
 
 dependencies {
     compile project(':es')
-    compile 'com.amazonaws:aws-java-sdk-ec2:1.10.69'
-    compile 'com.amazonaws:aws-java-sdk-s3:1.10.69'
+    compile ""com.amazonaws:aws-java-sdk-ec2:${versions.aws}""
+    compile ""com.amazonaws:aws-java-sdk-s3:${versions.aws}""
 }
 
 def pluginDir = project("":es"").file('upstream/plugins/cloud-aws')
diff --git a/es-repository-hdfs/build.gradle b/es-repository-hdfs/build.gradle
index 0f7d3e8b5c..4b610bf5c9 100644
--- a/es-repository-hdfs/build.gradle
+++ b/es-repository-hdfs/build.gradle
@@ -58,13 +58,7 @@ dependencies {
 configurations.all {
     resolutionStrategy {
         force 'commons-httpclient:commons-httpclient:3.0.1'
-        force 'joda-time:joda-time:2.8'
-        force ""commons-cli:commons-cli:1.2""
         eachDependency { details ->
-            // for slf4j use each dependency since there are so many variants
-            if (details.requested.name.contains(""slf4j-"")) {
-                details.useVersion ""1.7.6""
-            }
             if (details.requested.name.equals(""servlet-api"")) {
                 details.useTarget group: ""org.eclipse.jetty.orbit"", name: ""javax.servlet"", version: ""3.0.0.v201112011016""
             }
@@ -74,7 +68,7 @@ configurations.all {
 }
 
 task downloadUpstreamSources(type: Download) {
-    def upstreamCommit = 'v2.3.2'
+    def upstreamCommit = ""v${versions.elasticsearchhadoop}""
     src ""https://github.com/elastic/elasticsearch-hadoop/archive/${upstreamCommit}.zip""
     dest file(""${buildDir}/downloads/elasticsearch-hadoop-${upstreamCommit}.zip"")
     overwrite false
@@ -128,8 +122,8 @@ sourceSets {
 test.enabled = false
 
 compileJava {
-    sourceCompatibility = 1.7
-    targetCompatibility = 1.7
+    sourceCompatibility = 1.8
+    targetCompatibility = 1.8
 }
 
 jar {
diff --git a/es/build.gradle b/es/build.gradle
index 92dba6fe8d..0f57352df9 100644
--- a/es/build.gradle
+++ b/es/build.gradle
@@ -18,67 +18,69 @@ dependencies {
     // start ES compile dependencies
     // generated in upstream directory with:
     // mvn dependency:tree | grep -o ' .- .*:compile' | cut -d ' ' -f 3 | sort | sed ""s/\(.*\):jar:\(.*\):compile/compile '\1:\2'/g""
-    compile 'com.carrotsearch:hppc:0.7.1'
-    compile 'com.fasterxml.jackson.core:jackson-core:2.8.1'
-    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.8.1'
-    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-smile:2.8.1'
-    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.8.1'
-    compile 'com.github.spullara.mustache.java:compiler:0.8.13'
-    compile 'com.google.guava:guava:18.0'
-    compile 'com.ning:compress-lzf:1.0.2'
-    compile 'com.spatial4j:spatial4j:0.5'
-    compile 'com.tdunning:t-digest:3.0'
-    compile 'com.twitter:jsr166e:1.1.0'
-    compile 'com.vividsolutions:jts:1.13'
-    compile 'commons-cli:commons-cli:1.3.1'
-    compile 'io.netty:netty:3.10.6.Final'
-    compile 'joda-time:joda-time:2.9.4'
-    compile 'log4j:apache-log4j-extras:1.2.17'
-    compile 'log4j:log4j:1.2.17'
-    compile 'net.java.dev.jna:jna:4.1.0'
-    compile 'org.apache.lucene:lucene-analyzers-common:5.5.2'
-    compile 'org.apache.lucene:lucene-backward-codecs:5.5.2'
-    compile 'org.apache.lucene:lucene-core:5.5.2'
-    compile 'org.apache.lucene:lucene-grouping:5.5.2'
-    compile 'org.apache.lucene:lucene-highlighter:5.5.2'
-    compile 'org.apache.lucene:lucene-join:5.5.2'
-    compile 'org.apache.lucene:lucene-memory:5.5.2'
-    compile 'org.apache.lucene:lucene-misc:5.5.2'
-    compile 'org.apache.lucene:lucene-queries:5.5.2'
-    compile 'org.apache.lucene:lucene-queryparser:5.5.2'
-    compile 'org.apache.lucene:lucene-sandbox:5.5.2'
-    compile 'org.apache.lucene:lucene-spatial3d:5.5.2'
-    compile 'org.apache.lucene:lucene-spatial:5.5.2'
-    compile 'org.apache.lucene:lucene-suggest:5.5.2'
-    compile 'org.elasticsearch:securesm:1.0'
-    compile 'org.hdrhistogram:HdrHistogram:2.1.6'
-    compile 'org.joda:joda-convert:1.2'
-    compile 'org.slf4j:slf4j-api:1.6.2'
+    compile ""com.carrotsearch:hppc:0.7.1""
+    compile ""com.fasterxml.jackson.core:jackson-core:${versions.jackson}""
+    compile ""com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${versions.jackson}""
+    compile ""com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${versions.jackson}""
+    compile ""com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${versions.jackson}""
+    compile ""com.github.spullara.mustache.java:compiler:0.8.13""
+    compile ""com.google.guava:guava:${versions.guava}""
+    compile ""com.ning:compress-lzf:1.0.2""
+    compile ""com.spatial4j:spatial4j:${versions.spatial4j}""
+    compile ""com.tdunning:t-digest:3.0""
+    compile ""com.twitter:jsr166e:1.1.0""
+    compile ""com.vividsolutions:jts:${versions.jts}""
+    compile ""commons-cli:commons-cli:${versions.commonscli}""
+    compile ""io.netty:netty:${versions.netty}""
+    compile ""joda-time:joda-time:${versions.jodatime}""
+    compile ""log4j:apache-log4j-extras:${versions.log4j}""
+    compile ""log4j:log4j:${versions.log4j}""
+    compile ""net.java.dev.jna:jna:${versions.jna}""
+    compile ""org.apache.lucene:lucene-analyzers-common:${versions.lucene}""
+    compile ""org.apache.lucene:lucene-backward-codecs:${versions.lucene}""
+    compile ""org.apache.lucene:lucene-core:${versions.lucene}""
+    compile ""org.apache.lucene:lucene-grouping:${versions.lucene}""
+    compile ""org.apache.lucene:lucene-highlighter:${versions.lucene}""
+    compile ""org.apache.lucene:lucene-join:${versions.lucene}""
+    compile ""org.apache.lucene:lucene-memory:${versions.lucene}""
+    compile ""org.apache.lucene:lucene-misc:${versions.lucene}""
+    compile ""org.apache.lucene:lucene-queries:${versions.lucene}""
+    compile ""org.apache.lucene:lucene-queryparser:${versions.lucene}""
+    compile ""org.apache.lucene:lucene-sandbox:${versions.lucene}""
+    compile ""org.apache.lucene:lucene-spatial3d:${versions.lucene}""
+    compile ""org.apache.lucene:lucene-spatial:${versions.lucene}""
+    compile ""org.apache.lucene:lucene-suggest:${versions.lucene}""
+    compile ""org.elasticsearch:securesm:1.0""
+    compile ""org.hdrhistogram:HdrHistogram:2.1.6""
+    compile ""org.joda:joda-convert:1.2""
+    compile ""org.slf4j:slf4j-api:${versions.slf4j}""
+    compile ""org.slf4j:slf4j-log4j12:${versions.slf4j}""
+
     // snakeyaml is a duplicate dependency and left out by intent
-    // compile 'org.yaml:snakeyaml:1.15'
+    // compile ""org.yaml:snakeyaml:1.15""
     // end ES compile dependencies
 
-    compile 'org.codehaus.groovy:groovy-all:2.4.4:indy'
+    compile ""org.codehaus.groovy:groovy-all:2.4.4:indy""
 
 
     // mvn dependency:tree | grep -o ' .- .*:test' | cut -d ' ' -f 3 | sort | sed ""s/\(.*\):jar:\(.*\):test/testCompile '\1:\2'/g""
-    testCompile 'com.carrotsearch.randomizedtesting:randomizedtesting-runner:2.3.2'
-    testCompile 'com.google.jimfs:jimfs:1.0'
-    testCompile 'commons-codec:commons-codec:1.10'
-    testCompile 'commons-logging:commons-logging:1.1.3'
-    testCompile 'junit:junit:4.11'
-    testCompile('org.apache.httpcomponents:httpclient:4.3.6') {
-        exclude group: 'commons-codec', module: 'commons-codec'
+    testCompile ""com.carrotsearch.randomizedtesting:randomizedtesting-runner:${versions.randomizedrunner}""
+    testCompile ""com.google.jimfs:jimfs:1.0""
+    testCompile ""commons-codec:commons-codec:${versions.commonscodec}""
+    testCompile ""commons-logging:commons-logging:${versions.commonslogging}""
+    testCompile ""junit:junit:${versions.junit}""
+    testCompile(""org.apache.httpcomponents:httpclient:${versions.httpclient}"") {
+        exclude group: ""commons-codec"", module: ""commons-codec""
     }
-    testCompile 'org.apache.httpcomponents:httpcore:4.3.3'
-    testCompile 'org.apache.lucene:lucene-codecs:5.5.2'
+    testCompile ""org.apache.httpcomponents:httpcore:${versions.httpcore}""
+    testCompile ""org.apache.lucene:lucene-codecs:${versions.lucene}""
     // If the version here is increased the `AssertingLeafReader` class needs to
     // be updated as it is a copy from lucene-test-framework
-    testCompile 'org.apache.lucene:lucene-test-framework:5.5.2'
-    testCompile 'org.elasticsearch:securemock:1.2'
-    testCompile 'org.hamcrest:hamcrest-all:1.3'
+    testCompile ""org.apache.lucene:lucene-test-framework:${versions.lucene}""
+    testCompile ""org.elasticsearch:securemock:${versions.securemock}""
+    testCompile ""org.hamcrest:hamcrest-all:${versions.hamcrest}""
 
-    testCompile 'com.google.code.findbugs:jsr305:3.0.1'
+    testCompile ""com.google.code.findbugs:jsr305:${versions.jsr305}""
 }
 
 
diff --git a/gradle/dependencies.gradle b/gradle/dependencies.gradle
new file mode 100644
index 0000000000..7d9224d256
--- /dev/null
+++ b/gradle/dependencies.gradle
@@ -0,0 +1,72 @@
+/*
+ * Licensed to Crate under one or more contributor license agreements.
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.  Crate licenses this file
+ * to you under the Apache License, Version 2.0 (the ""License""); you may
+ * not use this file except in compliance with the License.  You may
+ * obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+ * implied.  See the License for the specific language governing
+ * permissions and limitations under the License.
+ *
+ * However, if you have executed another commercial license agreement
+ * with Crate these terms will supersede the license and you may use the
+ * software solely pursuant to the terms of the relevant commercial
+ * agreement.
+ */
+
+Properties props = new Properties()
+props.load(new FileInputStream(file(""gradle/version.properties"")));
+ext.set(""versions"", props)
+
+allprojects {
+    configurations.all {
+        resolutionStrategy {
+            // fail eagerly on version conflict (includes transitive dependencies)
+            failOnVersionConflict()
+
+            // ES requires hamcrest-all which includes hamcrest-core
+            dependencySubstitution {
+                substitute module(""org.hamcrest:hamcrest-core"") with(
+                        module(""org.hamcrest:hamcrest-all:${versions.hamcrest}""))
+            }
+
+            // forced versions of conflicting deps
+            force ""com.spatial4j:spatial4j:${versions.spatial4j}""
+            force ""com.google.guava:guava:${versions.guava}""
+            force ""commons-codec:commons-codec:${versions.commonscodec}""
+            force ""com.carrotsearch.randomizedtesting:junit4-ant:${versions.randomizedrunner}""
+            force ""com.carrotsearch.randomizedtesting:randomizedtesting-runner:${versions.randomizedrunner}""
+            force ""junit:junit:${versions.junit}""
+            force ""org.slf4j:slf4j-api:${versions.slf4j}""
+            force ""org.slf4j:slf4j-log4j12:${versions.slf4j}""
+            force ""com.fasterxml.jackson.core:jackson-core:${versions.jackson}""
+            force ""com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${versions.jackson}""
+            force ""com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}""
+            force ""com.fasterxml.jackson.core:jackson-databind:${versions.jackson}""
+            force ""joda-time:joda-time:${versions.jodatime}""
+            force ""org.hamcrest:hamcrest-all:${versions.hamcrest}""
+            force ""org.antlr:antlr-runtime:${versions.antlr}""
+            force ""commons-cli:commons-cli:${versions.commonscli}""
+            force ""org.apache.commons:commons-math3:${versions.commonsmath}""
+            force ""org.apache.commons:commons-lang3:${versions.commonslang3}""
+            force ""commons-logging:commons-logging:${versions.commonslogging}""
+            force ""org.apache.httpcomponents:httpcore:${versions.httpcore}""
+            force ""org.apache.httpcomponents:httpclient:${versions.httpclient}""
+            force ""log4j:log4j:${versions.log4j}""
+            force ""io.netty:netty:${versions.netty}""
+
+            // ensure to check following dependencies and their versions against those of HDFS plugin libs
+            // https://crate.io/docs/reference/en/latest/sql/snapshot_restore.html
+            force ""org.codehaus.jackson:jackson-core-asl:${versions.jacksonasl}""
+            force ""org.codehaus.jackson:jackson-mapper-asl:${versions.jacksonasl}""
+            force ""com.google.code.findbugs:jsr305:${versions.jsr305}""
+            force ""commons-lang:commons-lang:2.6""
+        }
+    }
+}
\ No newline at end of file
diff --git a/gradle/version.properties b/gradle/version.properties
new file mode 100644
index 0000000000..e1d1219750
--- /dev/null
+++ b/gradle/version.properties
@@ -0,0 +1,34 @@
+# crate deps not defined in ES
+guava=18.0
+jodatime=2.9.4
+antlr=3.5.2
+commonscli=1.3.1
+commonsmath=3.6.1
+commonslang3=3.5
+netty=3.10.6.Final
+jsr305=3.0.1
+aws=1.10.69
+jacksonasl=1.9.13
+elasticsearchhadoop=2.4.0
+
+# ES deps
+elasticsearch=2.4.1
+lucene=5.5.2
+
+# ES optional
+spatial4j=0.5
+jts=1.13
+jackson=2.8.1
+log4j=1.2.17
+slf4j=1.6.2
+jna=4.1.0
+
+# ES test
+randomizedrunner=2.3.2
+junit=4.11
+httpclient=4.3.6
+httpcore=4.3.3
+commonslogging=1.1.3
+commonscodec=1.10
+hamcrest=1.3
+securemock=1.2
diff --git a/sql-parser/build.gradle b/sql-parser/build.gradle
index 5a516d57d2..72ff23dad1 100644
--- a/sql-parser/build.gradle
+++ b/sql-parser/build.gradle
@@ -7,14 +7,14 @@ configurations {
 }
 
 dependencies {
-    compile 'com.google.code.findbugs:jsr305:3.0.1'
-    compile 'joda-time:joda-time:2.9.4'
-    compile 'com.google.guava:guava:18.0'
-    compile 'org.antlr:antlr-runtime:3.5.2'
+    compile ""com.google.code.findbugs:jsr305:${versions.jsr305}""
+    compile ""joda-time:joda-time:${versions.jodatime}""
+    compile ""com.google.guava:guava:${versions.guava}""
+    compile ""org.antlr:antlr-runtime:${versions.antlr}""
 
-    antlr3 'org.antlr:antlr:3.5.2'
-    testCompile 'org.hamcrest:hamcrest-all:1.3'
-    testCompile 'junit:junit:4.11'
+    antlr3 ""org.antlr:antlr:${versions.antlr}""
+    testCompile ""org.hamcrest:hamcrest-all:${versions.hamcrest}""
+    testCompile ""junit:junit:${versions.junit}""
 }
 
 task generateWithANTLR3(type: Exec) {
diff --git a/sql/build.gradle b/sql/build.gradle
index 40bdd243a7..a600478bbe 100644
--- a/sql/build.gradle
+++ b/sql/build.gradle
@@ -15,11 +15,11 @@ dependencies {
     compile project(':core')
     compile project(':blob')
     compile project(':sql-parser')
-    compile 'com.amazonaws:aws-java-sdk-s3:1.10.69'
-    compile 'org.apache.commons:commons-math3:3.6.1'
+    compile ""com.amazonaws:aws-java-sdk-s3:${versions.aws}""
+    compile ""org.apache.commons:commons-math3:${versions.commonsmath}""
     testCompile project(':testing')
     testCompile 'org.skyscreamer:jsonassert:1.3.0'
-    testCompile 'org.hamcrest:hamcrest-all:1.3'
+    testCompile ""org.hamcrest:hamcrest-all:${versions.hamcrest}""
 
     testCompile('org.postgresql:postgresql:9.4.1211.jre7') {
         exclude group: 'org.openjdk.jmh', module: 'jmh-core'
diff --git a/testing/build.gradle b/testing/build.gradle
index aa68307e41..19ac2541f2 100644
--- a/testing/build.gradle
+++ b/testing/build.gradle
@@ -3,8 +3,8 @@ apply from: ""$rootDir/gradle/javaModule.gradle""
 archivesBaseName = 'crate-testing'
 
 dependencies {
-    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
-    compile 'org.apache.commons:commons-lang3:3.5'
+    compile ""org.codehaus.jackson:jackson-mapper-asl:${versions.jacksonasl}""
+    compile ""org.apache.commons:commons-lang3:${versions.commonslang3}""
 
     compile project(':es')
     compile project(path: ':es', configuration: 'testCompile')",Reset output key after executing a caching rule .,0
"diff --git a/okhttp-tests/src/test/java/okhttp3/HeadersTest.java b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java
index ee136e449d90..d5a9e330fdae 100644
--- a/okhttp-tests/src/test/java/okhttp3/HeadersTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java
@@ -16,9 +16,9 @@
 package okhttp3;
 
 import java.io.IOException;
-import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
+import java.util.Date;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
@@ -811,4 +811,43 @@ public final class HeadersTest {
         .build()
         .byteCount());
   }
+
+  @Test public void addDate() {
+    Date expected = new Date(0);
+    Headers headers = new Headers.Builder()
+        .add(""testDate"", expected)
+        .build();
+    assertEquals(""Thu, 01 Jan 1970 00:00:00 GMT"", headers.get(""testDate""));
+  }
+
+  @Test public void addDateNull() {
+    try {
+      new Headers.Builder()
+          .add(""testDate"", (Date) null)
+          .build();
+      fail();
+    } catch (NullPointerException expected) {
+      assertEquals(""value for name testDate == null"", expected.getMessage());
+    }
+  }
+
+  @Test public void setDate() {
+    Date expected = new Date(1000);
+    Headers headers = new Headers.Builder()
+        .add(""testDate"", new Date(0))
+        .set(""testDate"", expected)
+        .build();
+    assertEquals(""Thu, 01 Jan 1970 00:00:01 GMT"", headers.get(""testDate""));
+  }
+
+  @Test public void setDateNull() {
+    try {
+      new Headers.Builder()
+          .set(""testDate"", (Date) null)
+          .build();
+      fail();
+    } catch (NullPointerException expected) {
+      assertEquals(""value for name testDate == null"", expected.getMessage());
+    }
+  }
 }
diff --git a/okhttp/src/main/java/okhttp3/Headers.java b/okhttp/src/main/java/okhttp3/Headers.java
index 73552fbee041..8b662c96ac98 100644
--- a/okhttp/src/main/java/okhttp3/Headers.java
+++ b/okhttp/src/main/java/okhttp3/Headers.java
@@ -334,6 +334,26 @@ public Builder addAll(Headers headers) {
       return this;
     }
 
+    /**
+     * Add a header with the specified name and formatted Date.
+     * Does validation of header names and values.
+     */
+    public Builder add(String name, Date value) {
+      if (value == null) throw new NullPointerException(""value for name "" + name + "" == null"");
+      add(name, HttpDate.format(value));
+      return this;
+    }
+
+    /**
+     * Set a field with the specified date. If the field is not found, it is added. If the field is
+     * found, the existing values are replaced.
+     */
+    public Builder set(String name, Date value) {
+      if (value == null) throw new NullPointerException(""value for name "" + name + "" == null"");
+      set(name, HttpDate.format(value));
+      return this;
+    }
+
     /**
      * Add a field with the specified value without any validation. Only appropriate for headers
      * from the remote peer or cache.
diff --git a/samples/guide/src/main/java/okhttp3/recipes/CurrentDateHeader.java b/samples/guide/src/main/java/okhttp3/recipes/CurrentDateHeader.java
new file mode 100644
index 000000000000..6c15d700df87
--- /dev/null
+++ b/samples/guide/src/main/java/okhttp3/recipes/CurrentDateHeader.java
@@ -0,0 +1,58 @@
+/*
+ * Copyright (C) 2018 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.recipes;
+
+import java.io.IOException;
+import java.util.Date;
+import okhttp3.Headers;
+import okhttp3.Interceptor;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.Response;
+
+public final class CurrentDateHeader {
+  private final OkHttpClient client = new OkHttpClient.Builder()
+      .addInterceptor(new CurrentDateInterceptor())
+      .build();
+
+  public void run() throws Exception {
+    Request request = new Request.Builder()
+        .url(""https://publicobject.com/helloworld.txt"")
+        .build();
+
+    try (Response response = client.newCall(request).execute()) {
+      System.out.println(response.request().header(""Date""));
+    }
+  }
+
+  static class CurrentDateInterceptor implements Interceptor {
+    @Override public Response intercept(Chain chain) throws IOException {
+      Request request = chain.request();
+      Headers newHeaders = request.headers()
+          .newBuilder()
+          .add(""Date"", new Date())
+          .build();
+      Request newRequest = request.newBuilder()
+          .headers(newHeaders)
+          .build();
+      return chain.proceed(newRequest);
+    }
+  }
+
+  public static void main(String... args) throws Exception {
+    new CurrentDateHeader().run();
+  }
+}",APIs to set date headers,1
"diff --git a/core/src/test/java/com/google/errorprone/ErrorProneCompilerIntegrationTest.java b/core/src/test/java/com/google/errorprone/ErrorProneCompilerIntegrationTest.java
index a62375ffd6..085e0f04f6 100644
--- a/core/src/test/java/com/google/errorprone/ErrorProneCompilerIntegrationTest.java
+++ b/core/src/test/java/com/google/errorprone/ErrorProneCompilerIntegrationTest.java
@@ -637,6 +637,60 @@ public class ErrorProneCompilerIntegrationTest {
     }
   }
 
+  @Test
+  public void pluginWithFlag() throws Exception {
+
+    Path base = tmpFolder.newFolder().toPath();
+    Path source = base.resolve(""test/Test.java"");
+    Files.createDirectories(source.getParent());
+    Files.write(
+        source,
+        Arrays.asList(
+            ""package test;"", //
+            ""public class Test {"",
+            ""  int f() { return 42; }"",
+            ""}""),
+        UTF_8);
+
+    Path jar = base.resolve(""libproc.jar"");
+    try (JarOutputStream jos = new JarOutputStream(Files.newOutputStream(jar))) {
+      jos.putNextEntry(new JarEntry(""META-INF/services/"" + BugChecker.class.getName()));
+      jos.write((CPSChecker.class.getName() + ""\n"").getBytes(UTF_8));
+      String classFile = CPSChecker.class.getName().replace('.', '/') + "".class"";
+      jos.putNextEntry(new JarEntry(classFile));
+      ByteStreams.copy(getClass().getClassLoader().getResourceAsStream(classFile), jos);
+    }
+
+    // Plugin jar is on classpath, disabled.
+    {
+      List<String> args =
+          ImmutableList.of(
+              source.toAbsolutePath().toString(),
+              ""-processorpath"",
+              jar.toAbsolutePath().toString(),
+              ""-XepDisableAllChecks"");
+      StringWriter out = new StringWriter();
+      Result result =
+          ErrorProneCompiler.compile(args.toArray(new String[0]), new PrintWriter(out, true));
+      assertThat(result).isEqualTo(Result.OK);
+    }
+    // Plugin is disabled by -XepDisableAllChecks and re-enabled with -Xep:CPSChecker:ERROR
+    {
+      List<String> args =
+          ImmutableList.of(
+              source.toAbsolutePath().toString(),
+              ""-processorpath"",
+              jar.toAbsolutePath().toString(),
+              ""-XepDisableAllChecks"",
+              ""-Xep:CPSChecker:ERROR"");
+      StringWriter out = new StringWriter();
+      Result result =
+          ErrorProneCompiler.compile(args.toArray(new String[0]), new PrintWriter(out, true));
+      assertThat(out.toString()).contains(""Using 'return' is considered harmful"");
+      assertThat(result).isEqualTo(Result.ERROR);
+    }
+  }
+
   @Test
   public void paramsFiles() throws IOException {
     Path dir = tmpFolder.newFolder(""tmp"").toPath();",Implementing ability to set an arbitrary platform capability even if it can \' t be converted to Platform enum in DesiredCapability constructor from Map .,0
"diff --git a/res/xml/widget_ankidroid.xml b/res/xml/widget_ankidroid.xml
index 4c2da961f2..8005893586 100644
--- a/res/xml/widget_ankidroid.xml
+++ b/res/xml/widget_ankidroid.xml
@@ -1,4 +1,6 @@
 <?xml version=""1.0"" encoding=""utf-8""?>
-<appwidget-provider
-    xmlns:android=""http://schemas.android.com/apk/res/android""
-    android:initialLayout=""@layout/widget_ankidroidinitial"" android:minHeight=""146dp"" android:minWidth=""146dp"" android:updatePeriodMillis=""2500""/>
\ No newline at end of file
+<appwidget-provider xmlns:android=""http://schemas.android.com/apk/res/android""
+	android:initialLayout=""@layout/widget_ankidroidinitial""
+	android:minHeight=""146dp""
+	android:minWidth=""146dp""
+	android:updatePeriodMillis=""3600000""/>
\ No newline at end of file",Decode missing parameters,0
"diff --git a/src/test/java/org/elasticsearch/update/UpdateTests.java b/src/test/java/org/elasticsearch/update/UpdateTests.java
index e6d01a3d606..4f8df988586 100644
--- a/src/test/java/org/elasticsearch/update/UpdateTests.java
+++ b/src/test/java/org/elasticsearch/update/UpdateTests.java
@@ -568,7 +568,7 @@ public class UpdateTests extends ElasticsearchIntegrationTest {
                 .execute().actionGet();
         ensureGreen();
 
-        final int numberOfThreads = scaledRandomIntBetween(5,10);
+        final int numberOfThreads = scaledRandomIntBetween(3,5);
         final int numberOfIdsPerThread = scaledRandomIntBetween(3,10);
         final int numberOfUpdatesPerId = scaledRandomIntBetween(100,200);
         final int retryOnConflict = randomIntBetween(0,1);",implemented new WS subsystem version unmarshalling process,0
"diff --git a/src/main/java/org/junit/runner/Describable.java b/src/main/java/org/junit/runner/Describable.java
index de31840c8d85..683b9a890b6f 100644
--- a/src/main/java/org/junit/runner/Describable.java
+++ b/src/main/java/org/junit/runner/Describable.java
@@ -1,10 +1,12 @@
 package org.junit.runner;
 
-public interface Describable {
 
+/**
+ * 
+ */
+public interface Describable {
 	/**
 	 * @return a {@link Description} showing the tests to be run by the receiver
 	 */
 	public abstract Description getDescription();
-
 }
\ No newline at end of file
diff --git a/src/main/java/org/junit/runner/Description.java b/src/main/java/org/junit/runner/Description.java
index 784c47e0ffd8..2fd74e6ef618 100644
--- a/src/main/java/org/junit/runner/Description.java
+++ b/src/main/java/org/junit/runner/Description.java
@@ -68,7 +68,12 @@ public static Description createSuiteDescription(Class<?> testClass) {
 		return new Description(testClass.getName(), testClass.getAnnotations());
 	}
 	
+	/**
+	 * Description of a Runner which runs no tests
+	 */
 	public static final Description EMPTY= new Description(""No Tests"");
+	
+	
 	public static final Description TEST_MECHANISM= new Description(""Test mechanism"");
 	
 	private final ArrayList<Description> fChildren= new ArrayList<Description>();
diff --git a/src/main/java/org/junit/runner/Request.java b/src/main/java/org/junit/runner/Request.java
index 61183c3f94ca..191bf7c86334 100644
--- a/src/main/java/org/junit/runner/Request.java
+++ b/src/main/java/org/junit/runner/Request.java
@@ -46,6 +46,12 @@ public static Request aClass(Class<?> clazz) {
 		return new ClassRequest(clazz);
 	}
 
+	/**
+	 * Create a <code>Request</code> that, when processed, will run all the tests
+	 * in a class. If the class has a suite() method, it will be ignored.
+	 * @param clazz the class containing the tests
+	 * @return a <code>Request</code> that will cause all tests in the class to be run
+	 */
 	public static Request classWithoutSuiteMethod(Class<?> newTestClass) {
 		return new ClassRequest(newTestClass, false);
 	}
@@ -67,7 +73,11 @@ public static Request classes(Class<?>... classes) {
 	public static Request errorReport(Class<?> klass, Throwable cause) {
 		return runner(new ErrorReportingRunner(klass, cause));
 	}
-	
+
+	/**
+	 * @param runner the runner to return
+	 * @return a <code>Request</code> that will run the given runner when invoked
+	 */
 	public static Request runner(final Runner runner) {
 		return new Request(){
 			@Override",Javadocs for three more classes,0
"diff --git a/site2/docs/reference-pulsar-admin.md b/site2/docs/reference-pulsar-admin.md
index d64b131211..419b5071d3 100644
--- a/site2/docs/reference-pulsar-admin.md
+++ b/site2/docs/reference-pulsar-admin.md
@@ -21,10 +21,10 @@ Commands
 * `ns-isolation-policy`
 * `sources`
 
-    For more information, see [here](reference-connector-admin.md#sources)
+  For more information, see [here](io-cli.md#sources)
 * `sinks`
   
-  For more information, see [here](reference-connector-admin.md#sinks)
+  For more information, see [here](io-cli.md#sinks)
 * `topics`
 * `tenants`
 * `resource-quotas`
diff --git a/site2/website/versioned_docs/version-2.5.0/reference-pulsar-admin.md b/site2/website/versioned_docs/version-2.5.0/reference-pulsar-admin.md
index 5c3a4207ff..422d8a53b8 100644
--- a/site2/website/versioned_docs/version-2.5.0/reference-pulsar-admin.md
+++ b/site2/website/versioned_docs/version-2.5.0/reference-pulsar-admin.md
@@ -22,10 +22,10 @@ Commands
 * `ns-isolation-policy`
 * `sources`
 
-    For more information, see [here](reference-connector-admin.md#sources)
+  For more information, see [here](io-cli.md#sources)
 * `sinks`
   
-  For more information, see [here](reference-connector-admin.md#sinks)
+  For more information, see [here](io-cli.md#sinks)
 * `topics`
 * `tenants`
 * `resource-quotas`
diff --git a/site2/website/versioned_docs/version-2.5.1/reference-pulsar-admin.md b/site2/website/versioned_docs/version-2.5.1/reference-pulsar-admin.md
index 959e62d679..86e1b95186 100644
--- a/site2/website/versioned_docs/version-2.5.1/reference-pulsar-admin.md
+++ b/site2/website/versioned_docs/version-2.5.1/reference-pulsar-admin.md
@@ -22,10 +22,10 @@ Commands
 * `ns-isolation-policy`
 * `sources`
 
-    For more information, see [here](reference-connector-admin.md#sources)
+  For more information, see [here](io-cli.md#sources)
 * `sinks`
   
-  For more information, see [here](reference-connector-admin.md#sinks)
+  For more information, see [here](io-cli.md#sinks)
 * `topics`
 * `tenants`
 * `resource-quotas`
diff --git a/site2/website/versioned_docs/version-2.5.2/reference-pulsar-admin.md b/site2/website/versioned_docs/version-2.5.2/reference-pulsar-admin.md
index 7323c17cb0..d9be03abac 100644
--- a/site2/website/versioned_docs/version-2.5.2/reference-pulsar-admin.md
+++ b/site2/website/versioned_docs/version-2.5.2/reference-pulsar-admin.md
@@ -22,10 +22,10 @@ Commands
 * `ns-isolation-policy`
 * `sources`
 
-    For more information, see [here](reference-connector-admin.md#sources)
+  For more information, see [here](io-cli.md#sources)
 * `sinks`
   
-  For more information, see [here](reference-connector-admin.md#sinks)
+  For more information, see [here](io-cli.md#sinks)
 * `topics`
 * `tenants`
 * `resource-quotas`",Add MODE_NIGHT_AUTO_BATTERY option for AppCompat .,0
"diff --git a/okhttp/src/main/java/okhttp3/EventListener.java b/okhttp/src/main/java/okhttp3/EventListener.java
index 583675f80428..fb8d4c7f4a63 100644
--- a/okhttp/src/main/java/okhttp3/EventListener.java
+++ b/okhttp/src/main/java/okhttp3/EventListener.java
@@ -26,12 +26,6 @@
  * Listener for metrics events. Extend this class to monitor the quantity, size, and duration of
  * your application's HTTP calls.
  *
- * <h3>Warning: This is a non-final API.</h3>
- *
- * <p><strong>As of OkHttp 3.10, this feature is an unstable preview: the API is subject to change,
- * and the implementation is incomplete. We expect that OkHttp 3.11 or 3.12 will finalize this API.
- * Until then, expect API and behavior changes when you update your OkHttp dependency.</strong>
- *
  * <p>All start/connect/acquire events will eventually receive a matching end/release event,
  * either successful (non-null parameters), or failed (non-null throwable).  The first common
  * parameters of each event pair are used to link the event in case of concurrent or repeated
@@ -283,14 +277,6 @@ public void callEnd(Call call) {
   public void callFailed(Call call, IOException ioe) {
   }
 
-  /**
-   * <h3>Warning: This is a non-final API.</h3>
-   *
-   * <p><strong>As of OkHttp 3.10, this feature is an unstable preview: the API is subject to
-   * change, and the implementation is incomplete. We expect that OkHttp 3.11 or 3.12 will finalize
-   * this API. Until then, expect API and behavior changes when you update your OkHttp
-   * dependency.</strong>
-   */
   public interface Factory {
     /**
      * Creates an instance of the {@link EventListener} for a particular {@link Call}. The returned",remove experimental doc,1
"diff --git a/retrofit/src/main/java/retrofit/http/Callback.java b/retrofit/src/main/java/retrofit/http/Callback.java
index 7b2a0ba104..948877e8bf 100644
--- a/retrofit/src/main/java/retrofit/http/Callback.java
+++ b/retrofit/src/main/java/retrofit/http/Callback.java
@@ -1,6 +1,8 @@
 // Copyright 2012 Square, Inc.
 package retrofit.http;
 
+import retrofit.http.client.Response;
+
 /**
  * Communicates responses to server or offline requests. Contains a callback method for each
  * possible outcome. One and only one method will be invoked in response to a given request.
@@ -11,7 +13,7 @@
 public interface Callback<T> {
 
   /** Successful HTTP response. */
-  void success(T t);
+  void success(Response response, T t);
 
   /**
    * Unsuccessful HTTP response due to network failure, non-2XX status code, or unexpected
diff --git a/retrofit/src/main/java/retrofit/http/CallbackRunnable.java b/retrofit/src/main/java/retrofit/http/CallbackRunnable.java
index 626cdfe040..f0e3ab898c 100644
--- a/retrofit/src/main/java/retrofit/http/CallbackRunnable.java
+++ b/retrofit/src/main/java/retrofit/http/CallbackRunnable.java
@@ -21,10 +21,10 @@ abstract class CallbackRunnable<T> implements Runnable {
   @SuppressWarnings(""unchecked"")
   @Override public final void run() {
     try {
-      final Object response = obtainResponse();
+      final ResponseWrapper wrapper = obtainResponse();
       callbackExecutor.execute(new Runnable() {
         @Override public void run() {
-          callback.success((T) response);
+          callback.success(wrapper.getResponse(), (T) wrapper.getResponseObj());
         }
       });
     } catch (final RetrofitError e) {
@@ -36,5 +36,5 @@ abstract class CallbackRunnable<T> implements Runnable {
     }
   }
 
-  public abstract Object obtainResponse();
+  public abstract ResponseWrapper obtainResponse();
 }
diff --git a/retrofit/src/main/java/retrofit/http/ResponseWrapper.java b/retrofit/src/main/java/retrofit/http/ResponseWrapper.java
new file mode 100644
index 0000000000..b2d0ceee29
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/http/ResponseWrapper.java
@@ -0,0 +1,28 @@
+package retrofit.http;
+
+import retrofit.http.client.Response;
+
+/**
+ * A wrapper that holds the {@link Response} and {@link Converter} response to be used by the
+ * {@link CallbackRunnable} for success method calls on {@link Callback}.
+ *
+ * @author JJ Ford (jj.n.ford@gmail.com)
+ */
+public class ResponseWrapper {
+
+  private Response response;
+  private Object responseObj;
+
+  public ResponseWrapper(Response response, Object responseObj) {
+    this.response = response;
+    this.responseObj = responseObj;
+  }
+
+  public Response getResponse() {
+    return this.response;
+  }
+
+  public Object getResponseObj() {
+    return this.responseObj;
+  }
+}
diff --git a/retrofit/src/main/java/retrofit/http/RestAdapter.java b/retrofit/src/main/java/retrofit/http/RestAdapter.java
index fd10dff55b..5679631b7f 100644
--- a/retrofit/src/main/java/retrofit/http/RestAdapter.java
+++ b/retrofit/src/main/java/retrofit/http/RestAdapter.java
@@ -125,8 +125,8 @@ private class RestHandler implements InvocationHandler {
       }
       Callback<?> callback = (Callback<?>) args[args.length - 1];
       httpExecutor.execute(new CallbackRunnable(callback, callbackExecutor) {
-        @Override public Object obtainResponse() {
-          return invokeRequest(methodDetails, args);
+        @Override public ResponseWrapper obtainResponse() {
+          return (ResponseWrapper) invokeRequest(methodDetails, args);
         }
       });
       return null; // Asynchronous methods should have return type of void.
@@ -184,13 +184,20 @@ private Object invokeRequest(RestMethodInfo methodDetails, Object[] args) {
         Type type = methodDetails.type;
         if (statusCode >= 200 && statusCode < 300) { // 2XX == successful request
           if (type.equals(Response.class)) {
-            return response;
+            if (methodDetails.isSynchronous) {
+              return response;
+            }
+            return new ResponseWrapper(response, response);
           }
           if (body == null) {
             return null;
           }
           try {
-            return converter.fromBody(body, type);
+            Object convert = converter.fromBody(body, type);
+            if (methodDetails.isSynchronous) {
+              return convert;
+            }
+            return new ResponseWrapper(response, convert);
           } catch (ConversionException e) {
             throw RetrofitError.conversionError(url, response, converter, type, e);
           }
diff --git a/retrofit/src/test/java/retrofit/http/CallbackRunnableTest.java b/retrofit/src/test/java/retrofit/http/CallbackRunnableTest.java
index bfc46c9499..2a85bf1723 100644
--- a/retrofit/src/test/java/retrofit/http/CallbackRunnableTest.java
+++ b/retrofit/src/test/java/retrofit/http/CallbackRunnableTest.java
@@ -21,20 +21,20 @@ public class CallbackRunnableTest {
   @Before public void setUp() {
     callback = mock(Callback.class);
     callbackRunnable = spy(new CallbackRunnable<Object>(callback, executor) {
-      @Override public Object obtainResponse() {
+      @Override public ResponseWrapper obtainResponse() {
         return null; // Must be mocked.
       }
     });
   }
 
   @Test public void responsePassedToSuccess() {
-    Object response = new Object();
-    when(callbackRunnable.obtainResponse()).thenReturn(response);
+    ResponseWrapper wrapper = new ResponseWrapper(null, new Object());
+    when(callbackRunnable.obtainResponse()).thenReturn(wrapper);
 
     callbackRunnable.run();
 
     verify(executor).execute(any(Runnable.class));
-    verify(callback).success(same(response));
+    verify(callback).success(same(wrapper.getResponse()), same(wrapper.getResponseObj()));
   }
 
   @Test public void errorPassedToFailure() {
diff --git a/retrofit/src/test/java/retrofit/http/RestAdapterTest.java b/retrofit/src/test/java/retrofit/http/RestAdapterTest.java
index aeae442e57..508c7d2150 100644
--- a/retrofit/src/test/java/retrofit/http/RestAdapterTest.java
+++ b/retrofit/src/test/java/retrofit/http/RestAdapterTest.java
@@ -16,6 +16,7 @@
 import static org.fest.assertions.api.Assertions.fail;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
+import static org.mockito.Matchers.anyString;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Matchers.same;
 import static org.mockito.Mockito.mock;
@@ -88,15 +89,16 @@ private interface Example {
   }
 
   @Test public void asynchronousUsesExecutors() throws Exception {
+    Response response = new Response(200, ""OK"", NO_HEADERS, new TypedString(""{}""));
     when(mockClient.execute(any(Request.class))) //
-        .thenReturn(new Response(200, ""OK"", NO_HEADERS, null));
+        .thenReturn(response);
     Callback<Object> callback = mock(Callback.class);
 
     example.something(callback);
 
     verify(mockRequestExecutor).execute(any(CallbackRunnable.class));
     verify(mockCallbackExecutor).execute(any(Runnable.class));
-    verify(callback).success(eq(null));
+    verify(callback).success(same(response), anyString());
   }
 
   @Test public void malformedResponseThrowsConversionException() throws Exception {
@@ -166,6 +168,6 @@ private interface Example {
 
     verify(mockRequestExecutor).execute(any(CallbackRunnable.class));
     verify(mockCallbackExecutor).execute(any(Runnable.class));
-    verify(callback).success(eq(response));
+    verify(callback).success(same(response), eq(response));
   }
 }",Add response object to callback success. <enter>  <enter> Gives access to response headers while still converting response within retrofit.,1
"diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBeanTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBeanTests.java
index d5a8b50e3f2a..5d248d70df65 100644
--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBeanTests.java
+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBeanTests.java
@@ -23,7 +23,6 @@
 import java.lang.annotation.Target;
 import java.util.Date;
 
-import org.junit.After;
 import org.junit.Test;
 
 import org.springframework.beans.factory.FactoryBean;
@@ -33,8 +32,7 @@
 import org.springframework.boot.autoconfigure.condition.scan.ScannedFactoryBeanConfiguration;
 import org.springframework.boot.autoconfigure.condition.scan.ScannedFactoryBeanWithBeanMethodArgumentsConfiguration;
 import org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration;
-import org.springframework.boot.test.util.TestPropertyValues;
-import org.springframework.context.annotation.AnnotationConfigApplicationContext;
+import org.springframework.boot.test.context.runner.ApplicationContextRunner;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.ComponentScan.Filter;
@@ -60,226 +58,250 @@
 @SuppressWarnings(""resource"")
 public class ConditionalOnMissingBeanTests {
 
-	private final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();
-
-	@After
-	public void cleanup() {
-		this.context.close();
-	}
+	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner();
 
 	@Test
 	public void testNameOnMissingBeanCondition() {
-		load(FooConfiguration.class, OnBeanNameConfiguration.class);
-		assertThat(this.context.containsBean(""bar"")).isFalse();
-		assertThat(this.context.getBean(""foo"")).isEqualTo(""foo"");
+		this.contextRunner.withUserConfiguration(FooConfiguration.class,
+				OnBeanNameConfiguration.class).run((context) -> {
+					assertThat(context).doesNotHaveBean(""bar"");
+					assertThat(context.getBean(""foo"")).isEqualTo(""foo"");
+				});
 	}
 
 	@Test
 	public void testNameOnMissingBeanConditionReverseOrder() {
-		load(OnBeanNameConfiguration.class, FooConfiguration.class);
-		// Ideally this would be false, but the ordering is a problem
-		assertThat(this.context.containsBean(""bar"")).isTrue();
-		assertThat(this.context.getBean(""foo"")).isEqualTo(""foo"");
+		this.contextRunner.withUserConfiguration(OnBeanNameConfiguration.class,
+				FooConfiguration.class).run((context) -> {
+					// Ideally this would be doesNotHaveBean, but the ordering is a
+					// problem
+					assertThat(context).hasBean(""bar"");
+					assertThat(context.getBean(""foo"")).isEqualTo(""foo"");
+				});
 	}
 
 	@Test
 	public void testNameAndTypeOnMissingBeanCondition() {
-		load(FooConfiguration.class, OnBeanNameAndTypeConfiguration.class);
-		// Arguably this should be true, but as things are implemented the conditions
+		// Arguably this should be hasBean, but as things are implemented the conditions
 		// specified in the different attributes of @ConditionalOnBean are combined with
 		// logical OR (not AND) so if any of them match the condition is true.
-		assertThat(this.context.containsBean(""bar"")).isFalse();
+		this.contextRunner
+				.withUserConfiguration(FooConfiguration.class,
+						OnBeanNameAndTypeConfiguration.class)
+				.run((context) -> assertThat(context).doesNotHaveBean(""bar""));
 	}
 
 	@Test
 	public void hierarchyConsidered() {
-		load(FooConfiguration.class);
-		AnnotationConfigApplicationContext childContext = new AnnotationConfigApplicationContext();
-		childContext.setParent(this.context);
-		childContext.register(HierarchyConsidered.class);
-		childContext.refresh();
-		assertThat(childContext.containsLocalBean(""bar"")).isFalse();
+		this.contextRunner.withUserConfiguration(FooConfiguration.class)
+				.run((parent) -> new ApplicationContextRunner().withParent(parent)
+						.withUserConfiguration(HierarchyConsidered.class)
+						.run((context) -> assertThat(context.containsLocalBean(""bar""))
+								.isFalse()));
 	}
 
 	@Test
 	public void hierarchyNotConsidered() {
-		load(FooConfiguration.class);
-		AnnotationConfigApplicationContext childContext = new AnnotationConfigApplicationContext();
-		childContext.setParent(this.context);
-		childContext.register(HierarchyNotConsidered.class);
-		childContext.refresh();
-		assertThat(childContext.containsLocalBean(""bar"")).isTrue();
+		this.contextRunner.withUserConfiguration(FooConfiguration.class)
+				.run((parent) -> new ApplicationContextRunner().withParent(parent)
+						.withUserConfiguration(HierarchyNotConsidered.class)
+						.run((context) -> assertThat(context.containsLocalBean(""bar""))
+								.isTrue()));
 	}
 
 	@Test
 	public void impliedOnBeanMethod() {
-		load(ExampleBeanConfiguration.class, ImpliedOnBeanMethod.class);
-		assertThat(this.context.getBeansOfType(ExampleBean.class).size()).isEqualTo(1);
+		this.contextRunner
+				.withUserConfiguration(ExampleBeanConfiguration.class,
+						ImpliedOnBeanMethod.class)
+				.run((context) -> assertThat(context).hasSingleBean(ExampleBean.class));
 	}
 
 	@Test
 	public void testAnnotationOnMissingBeanCondition() {
-		load(FooConfiguration.class, OnAnnotationConfiguration.class);
-		assertThat(this.context.containsBean(""bar"")).isFalse();
-		assertThat(this.context.getBean(""foo"")).isEqualTo(""foo"");
+		this.contextRunner.withUserConfiguration(FooConfiguration.class,
+				OnAnnotationConfiguration.class).run((context) -> {
+					assertThat(context).doesNotHaveBean(""bar"");
+					assertThat(context.getBean(""foo"")).isEqualTo(""foo"");
+				});
 	}
 
-	// Rigorous test for SPR-11069
 	@Test
 	public void testAnnotationOnMissingBeanConditionWithEagerFactoryBean() {
-		load(FooConfiguration.class, OnAnnotationConfiguration.class,
-				FactoryBeanXmlConfiguration.class,
-				PropertyPlaceholderAutoConfiguration.class);
-		assertThat(this.context.containsBean(""bar"")).isFalse();
-		assertThat(this.context.containsBean(""example"")).isTrue();
-		assertThat(this.context.getBean(""foo"")).isEqualTo(""foo"");
+		// Rigorous test for SPR-11069
+		this.contextRunner.withUserConfiguration(FooConfiguration.class,
+				OnAnnotationConfiguration.class, FactoryBeanXmlConfiguration.class,
+				PropertyPlaceholderAutoConfiguration.class).run((context) -> {
+					assertThat(context).doesNotHaveBean(""bar"");
+					assertThat(context).hasBean(""example"");
+					assertThat(context.getBean(""foo"")).isEqualTo(""foo"");
+				});
 	}
 
 	@Test
 	public void testOnMissingBeanConditionWithFactoryBean() {
-		load(FactoryBeanConfiguration.class, ConditionalOnFactoryBean.class,
-				PropertyPlaceholderAutoConfiguration.class);
-		assertThat(this.context.getBean(ExampleBean.class).toString())
-				.isEqualTo(""fromFactory"");
+		this.contextRunner
+				.withUserConfiguration(FactoryBeanConfiguration.class,
+						ConditionalOnFactoryBean.class,
+						PropertyPlaceholderAutoConfiguration.class)
+				.run((context) -> assertThat(
+						context.getBean(ExampleBean.class).toString())
+								.isEqualTo(""fromFactory""));
 	}
 
 	@Test
 	public void testOnMissingBeanConditionWithComponentScannedFactoryBean() {
-		load(ComponentScannedFactoryBeanBeanMethodConfiguration.class,
-				ConditionalOnFactoryBean.class,
-				PropertyPlaceholderAutoConfiguration.class);
-		assertThat(this.context.getBean(ExampleBean.class).toString())
-				.isEqualTo(""fromFactory"");
+		this.contextRunner
+				.withUserConfiguration(
+						ComponentScannedFactoryBeanBeanMethodConfiguration.class,
+						ConditionalOnFactoryBean.class,
+						PropertyPlaceholderAutoConfiguration.class)
+				.run((context) -> assertThat(
+						context.getBean(ExampleBean.class).toString())
+								.isEqualTo(""fromFactory""));
 	}
 
 	@Test
 	public void testOnMissingBeanConditionWithComponentScannedFactoryBeanWithBeanMethodArguments() {
-		load(ComponentScannedFactoryBeanBeanMethodWithArgumentsConfiguration.class,
+		this.contextRunner.withUserConfiguration(
+				ComponentScannedFactoryBeanBeanMethodWithArgumentsConfiguration.class,
 				ConditionalOnFactoryBean.class,
-				PropertyPlaceholderAutoConfiguration.class);
-		assertThat(this.context.getBean(ExampleBean.class).toString())
-				.isEqualTo(""fromFactory"");
+				PropertyPlaceholderAutoConfiguration.class)
+				.run((context) -> assertThat(
+						context.getBean(ExampleBean.class).toString())
+								.isEqualTo(""fromFactory""));
 	}
 
 	@Test
 	public void testOnMissingBeanConditionWithFactoryBeanWithBeanMethodArguments() {
-		load(new Class<?>[] { FactoryBeanWithBeanMethodArgumentsConfiguration.class,
-				ConditionalOnFactoryBean.class,
-				PropertyPlaceholderAutoConfiguration.class }, ""theValue:foo"");
-		assertThat(this.context.getBean(ExampleBean.class).toString())
-				.isEqualTo(""fromFactory"");
+		this.contextRunner
+				.withUserConfiguration(
+						FactoryBeanWithBeanMethodArgumentsConfiguration.class,
+						ConditionalOnFactoryBean.class,
+						PropertyPlaceholderAutoConfiguration.class)
+				.withPropertyValues(""theValue=foo"")
+				.run((context) -> assertThat(
+						context.getBean(ExampleBean.class).toString())
+								.isEqualTo(""fromFactory""));
 	}
 
 	@Test
 	public void testOnMissingBeanConditionWithConcreteFactoryBean() {
-		load(ConcreteFactoryBeanConfiguration.class, ConditionalOnFactoryBean.class,
-				PropertyPlaceholderAutoConfiguration.class);
-		assertThat(this.context.getBean(ExampleBean.class).toString())
-				.isEqualTo(""fromFactory"");
+		this.contextRunner
+				.withUserConfiguration(ConcreteFactoryBeanConfiguration.class,
+						ConditionalOnFactoryBean.class,
+						PropertyPlaceholderAutoConfiguration.class)
+				.run((context) -> assertThat(
+						context.getBean(ExampleBean.class).toString())
+								.isEqualTo(""fromFactory""));
 	}
 
 	@Test
 	public void testOnMissingBeanConditionWithUnhelpfulFactoryBean() {
-		load(UnhelpfulFactoryBeanConfiguration.class, ConditionalOnFactoryBean.class,
-				PropertyPlaceholderAutoConfiguration.class);
 		// We could not tell that the FactoryBean would ultimately create an ExampleBean
-		assertThat(this.context.getBeansOfType(ExampleBean.class).values()).hasSize(2);
+		this.contextRunner
+				.withUserConfiguration(UnhelpfulFactoryBeanConfiguration.class,
+						ConditionalOnFactoryBean.class,
+						PropertyPlaceholderAutoConfiguration.class)
+				.run((context) -> assertThat(context).getBeans(ExampleBean.class)
+						.hasSize(2));
 	}
 
 	@Test
 	public void testOnMissingBeanConditionWithRegisteredFactoryBean() {
-		load(RegisteredFactoryBeanConfiguration.class, ConditionalOnFactoryBean.class,
-				PropertyPlaceholderAutoConfiguration.class);
-		assertThat(this.context.getBean(ExampleBean.class).toString())
-				.isEqualTo(""fromFactory"");
+		this.contextRunner
+				.withUserConfiguration(RegisteredFactoryBeanConfiguration.class,
+						ConditionalOnFactoryBean.class,
+						PropertyPlaceholderAutoConfiguration.class)
+				.run((context) -> assertThat(
+						context.getBean(ExampleBean.class).toString())
+								.isEqualTo(""fromFactory""));
 	}
 
 	@Test
 	public void testOnMissingBeanConditionWithNonspecificFactoryBeanWithClassAttribute() {
-		load(NonspecificFactoryBeanClassAttributeConfiguration.class,
-				ConditionalOnFactoryBean.class,
-				PropertyPlaceholderAutoConfiguration.class);
-		assertThat(this.context.getBean(ExampleBean.class).toString())
-				.isEqualTo(""fromFactory"");
+		this.contextRunner
+				.withUserConfiguration(
+						NonspecificFactoryBeanClassAttributeConfiguration.class,
+						ConditionalOnFactoryBean.class,
+						PropertyPlaceholderAutoConfiguration.class)
+				.run((context) -> assertThat(
+						context.getBean(ExampleBean.class).toString())
+								.isEqualTo(""fromFactory""));
 	}
 
 	@Test
 	public void testOnMissingBeanConditionWithNonspecificFactoryBeanWithStringAttribute() {
-		load(NonspecificFactoryBeanStringAttributeConfiguration.class,
-				ConditionalOnFactoryBean.class,
-				PropertyPlaceholderAutoConfiguration.class);
-		assertThat(this.context.getBean(ExampleBean.class).toString())
-				.isEqualTo(""fromFactory"");
+		this.contextRunner
+				.withUserConfiguration(
+						NonspecificFactoryBeanStringAttributeConfiguration.class,
+						ConditionalOnFactoryBean.class,
+						PropertyPlaceholderAutoConfiguration.class)
+				.run((context) -> assertThat(
+						context.getBean(ExampleBean.class).toString())
+								.isEqualTo(""fromFactory""));
 	}
 
 	@Test
 	public void testOnMissingBeanConditionWithFactoryBeanInXml() {
-		load(FactoryBeanXmlConfiguration.class, ConditionalOnFactoryBean.class,
-				PropertyPlaceholderAutoConfiguration.class);
-		assertThat(this.context.getBean(ExampleBean.class).toString())
-				.isEqualTo(""fromFactory"");
+		this.contextRunner
+				.withUserConfiguration(FactoryBeanXmlConfiguration.class,
+						ConditionalOnFactoryBean.class,
+						PropertyPlaceholderAutoConfiguration.class)
+				.run((context) -> assertThat(
+						context.getBean(ExampleBean.class).toString())
+								.isEqualTo(""fromFactory""));
 	}
 
 	@Test
 	public void testOnMissingBeanConditionWithIgnoredSubclass() {
-		load(CustomExampleBeanConfiguration.class, ConditionalOnIgnoredSubclass.class,
-				PropertyPlaceholderAutoConfiguration.class);
-		assertThat(this.context.getBeansOfType(ExampleBean.class)).hasSize(2);
-		assertThat(this.context.getBeansOfType(CustomExampleBean.class)).hasSize(1);
+		this.contextRunner.withUserConfiguration(CustomExampleBeanConfiguration.class,
+				ConditionalOnIgnoredSubclass.class,
+				PropertyPlaceholderAutoConfiguration.class).run((context) -> {
+					assertThat(context).getBeans(ExampleBean.class).hasSize(2);
+					assertThat(context).getBeans(CustomExampleBean.class).hasSize(1);
+				});
 	}
 
 	@Test
 	public void testOnMissingBeanConditionWithIgnoredSubclassByName() {
-		load(CustomExampleBeanConfiguration.class,
+		this.contextRunner.withUserConfiguration(CustomExampleBeanConfiguration.class,
 				ConditionalOnIgnoredSubclassByName.class,
-				PropertyPlaceholderAutoConfiguration.class);
-		assertThat(this.context.getBeansOfType(ExampleBean.class)).hasSize(2);
-		assertThat(this.context.getBeansOfType(CustomExampleBean.class)).hasSize(1);
+				PropertyPlaceholderAutoConfiguration.class).run((context) -> {
+					assertThat(context).getBeans(ExampleBean.class).hasSize(2);
+					assertThat(context).getBeans(CustomExampleBean.class).hasSize(1);
+				});
 	}
 
 	@Test
 	public void grandparentIsConsideredWhenUsingAncestorsStrategy() {
-		load(ExampleBeanConfiguration.class);
-		AnnotationConfigApplicationContext parent = new AnnotationConfigApplicationContext();
-		parent.setParent(this.context);
-		parent.refresh();
-		AnnotationConfigApplicationContext child = new AnnotationConfigApplicationContext();
-		child.setParent(parent);
-		child.register(ExampleBeanConfiguration.class,
-				OnBeanInAncestorsConfiguration.class);
-		child.refresh();
-		assertThat(child.getBeansOfType(ExampleBean.class)).hasSize(1);
-		child.close();
-		parent.close();
+		this.contextRunner.withUserConfiguration(ExampleBeanConfiguration.class)
+				.run((grandparent) -> new ApplicationContextRunner()
+						.withParent(grandparent)
+						.run((parent) -> new ApplicationContextRunner().withParent(parent)
+								.withUserConfiguration(ExampleBeanConfiguration.class,
+										OnBeanInAncestorsConfiguration.class)
+								.run((context) -> assertThat(context)
+										.getBeans(ExampleBean.class).hasSize(1))));
 	}
 
 	@Test
 	public void currentContextIsIgnoredWhenUsingAncestorsStrategy() {
-		this.context.refresh();
-		AnnotationConfigApplicationContext child = new AnnotationConfigApplicationContext();
-		child.register(ExampleBeanConfiguration.class,
-				OnBeanInAncestorsConfiguration.class);
-		child.setParent(this.context);
-		child.refresh();
-		assertThat(child.getBeansOfType(ExampleBean.class)).hasSize(2);
+		this.contextRunner
+				.run((parent) -> new ApplicationContextRunner().withParent(parent)
+						.withUserConfiguration(ExampleBeanConfiguration.class,
+								OnBeanInAncestorsConfiguration.class)
+						.run((context) -> assertThat(context).getBeans(ExampleBean.class)
+								.hasSize(2)));
 	}
 
 	@Test
 	public void beanProducedByFactoryBeanIsConsideredWhenMatchingOnAnnotation() {
-		load(ConcreteFactoryBeanConfiguration.class,
-				OnAnnotationWithFactoryBeanConfiguration.class);
-		assertThat(this.context.containsBean(""bar"")).isFalse();
-		assertThat(this.context.getBeansOfType(ExampleBean.class)).hasSize(1);
-	}
-
-	private void load(Class<?>... configs) {
-		load(configs, new String[] {});
-	}
-
-	private void load(Class<?>[] configs, String... environmentValues) {
-		this.context.register(configs);
-		TestPropertyValues.of(environmentValues).applyTo(this.context);
-		this.context.refresh();
+		this.contextRunner.withUserConfiguration(ConcreteFactoryBeanConfiguration.class,
+				OnAnnotationWithFactoryBeanConfiguration.class).run((context) -> {
+					assertThat(context).doesNotHaveBean(""bar"");
+					assertThat(context).hasSingleBean(ExampleBean.class);
+				});
 	}
 
 	@Configuration",Migrate ConditionalOnMissingBeanTests to context runner,1
"diff --git a/profiler/nbproject/project.xml b/profiler/nbproject/project.xml
index 5c858e64e..eec8cabf4 100644
--- a/profiler/nbproject/project.xml
+++ b/profiler/nbproject/project.xml
@@ -270,8 +270,8 @@ made subject to such option by the copyright holder.
                         <compile-dependency/>
                     </test-dependency>
                     <test-dependency>
-                        <code-name-base>org.netbeans.core.ui</code-name-base>
-                        <recursive/>
+                        <code-name-base>org.netbeans.modules.sampler</code-name-base>
+                        <compile-dependency/>
                     </test-dependency>
                 </test-type>
             </test-dependencies>
diff --git a/profiler/test/unit/src/org/netbeans/modules/profiler/actions/SelfSamplerActionTest.java b/profiler/test/unit/src/org/netbeans/modules/profiler/actions/SelfSamplerActionTest.java
index 67ae85c64..0b7f11249 100644
--- a/profiler/test/unit/src/org/netbeans/modules/profiler/actions/SelfSamplerActionTest.java
+++ b/profiler/test/unit/src/org/netbeans/modules/profiler/actions/SelfSamplerActionTest.java
@@ -42,12 +42,9 @@
 
 package org.netbeans.modules.profiler.actions;
 
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
 import java.io.DataOutputStream;
 import java.io.OutputStream;
 import java.util.logging.Level;
-import javax.swing.Action;
 import org.junit.Test;
 import org.netbeans.junit.Log;
 import org.netbeans.modules.profiler.ui.NpsDataObject;
@@ -56,10 +53,12 @@ import org.openide.filesystems.FileObject;
 import org.openide.filesystems.FileUtil;
 import org.openide.loaders.DataObject;
 import static org.junit.Assert.*;
+import org.netbeans.modules.sampler.Sampler;
 
 /** Shows how o.n.core uses the SelfSamplerAction to start and stop self profiling.
  *
  * @author Jaroslav Tulach <jtulach@netbeans.org>
+ * @author Tomas Hurka
  */
 public class SelfSamplerActionTest {
 
@@ -68,24 +67,17 @@ public class SelfSamplerActionTest {
 
     @Test
     public void testSelfProfileToStream() throws Exception {
-        FileObject afo = FileUtil.getConfigFile(""Actions/Profile/org-netbeans-modules-profiler-actions-SelfSamplerAction.instance"");
-        assertNotNull(""SelfSamplerAction is in the right fileobject"", afo);
-        Action a = (Action)afo.getAttribute(""delegate""); // NOI18N
-        Object obj = a.getValue(""logger-testprofile"");
-        assertTrue(""It is runnable"", obj instanceof Runnable);
-        assertTrue(""It is action listener"", obj instanceof ActionListener);
+        Sampler sampler = Sampler.createManualSampler(""testprofile"");
+        assertTrue(""sampler instance"", sampler != null);
 
-        Runnable r = (Runnable)obj;
-        ActionListener al = (ActionListener)obj;
-
-        r.run();
+        sampler.start();
         Thread.sleep(1000);
-        assertLoggerThread(""logger-testprofile shall be there"", true);
+        assertSamplerThread(""sampler-testprofile shall be there"", true);
 
         FileObject fo = FileUtil.createMemoryFileSystem().getRoot().createData(""slow.nps"");
         OutputStream os = fo.getOutputStream();
         DataOutputStream dos = new DataOutputStream(os);
-        al.actionPerformed(new ActionEvent(dos, 0, ""write"")); // NOI18N
+        sampler.stopAndWriteTo(dos);
         dos.close();
 
         if (fo.getSize() < 100) {
@@ -104,39 +96,32 @@ public class SelfSamplerActionTest {
             fail(""There shall be no warnings:\n"" + log);
         }
 
-        assertLoggerThread(""no logger- thread shall be there"", false);
+        assertSamplerThread(""no sampler- thread shall be there"", false);
     }
 
     @Test
     public void testSelfProfileCancel() throws Exception {
-        FileObject afo = FileUtil.getConfigFile(""Actions/Profile/org-netbeans-modules-profiler-actions-SelfSamplerAction.instance"");
-        assertNotNull(""SelfSamplerAction is in the right fileobject"", afo);
-        Action a = (Action)afo.getAttribute(""delegate""); // NOI18N
-        Object obj = a.getValue(""logger-testprofile"");
-        assertTrue(""It is runnable"", obj instanceof Runnable);
-        assertTrue(""It is action listener"", obj instanceof ActionListener);
-
-        Runnable r = (Runnable)obj;
-        ActionListener al = (ActionListener)obj;
+        Sampler sampler = Sampler.createManualSampler(""testprofile"");
+        assertTrue(""sampler instance"", sampler != null);
 
-        r.run();
+        sampler.start();
         Thread.sleep(1000);
-        assertLoggerThread(""logger-testprofile shall be there"", true);
+        assertSamplerThread(""sampler-testprofile shall be there"", true);
 
-        al.actionPerformed(new ActionEvent(this, 0, ""cancel"")); // NOI18N
+        sampler.cancel();
         Thread.sleep(1000);
 
-        assertLoggerThread(""no logger- thread shall be there"", false);
+        assertSamplerThread(""no sampler- thread shall be there"", false);
     }
 
-    private void assertLoggerThread(String msg, boolean exist) {
+    private void assertSamplerThread(String msg, boolean exist) {
         for (Thread t : Thread.getAllStackTraces().keySet()) {
-            if (t.getName().startsWith(""logger-"")) {
+            if (t.getName().startsWith(""sampler-"")) {
                 assertTrue(msg + "" There is "" + t.getName() + "" thread"", exist);
                 return;
             }
         }
-        assertFalse(msg + "" There is no logger- thread"", exist);
+        assertFalse(msg + "" There is no sampler- thread"", exist);
     }",Add optimized util . Bits for Java 9 and later versions,0
"diff --git a/nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/AbstractGCPProcessor.java b/nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/AbstractGCPProcessor.java
index 995805c0ce..9b9a2531be 100644
--- a/nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/AbstractGCPProcessor.java
+++ b/nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/AbstractGCPProcessor.java
@@ -55,6 +55,25 @@ public abstract class AbstractGCPProcessor<
             .addValidator(StandardValidators.INTEGER_VALIDATOR)
             .build();
 
+    public static final PropertyDescriptor PROXY_HOST = new PropertyDescriptor
+            .Builder().name(""gcp-proxy-host"")
+            .displayName(""Proxy host"")
+            .description(""IP or hostname of the proxy to be used"")
+            .required(false)
+            .expressionLanguageSupported(false)
+            .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
+            .build();
+
+    public static final PropertyDescriptor PROXY_PORT = new PropertyDescriptor
+            .Builder().name(""gcp-proxy-port"")
+            .displayName(""Proxy port"")
+            .description(""Proxy port number"")
+            .required(false)
+            .expressionLanguageSupported(false)
+            .addValidator(StandardValidators.INTEGER_VALIDATOR)
+            .build();
+
+
     /**
      * Links to the {@link GCPCredentialsService} which provides credentials for this particular processor.
      */
@@ -78,7 +97,9 @@ public abstract class AbstractGCPProcessor<
         return ImmutableList.of(
                 GCP_CREDENTIALS_PROVIDER_SERVICE,
                 PROJECT_ID,
-                RETRY_COUNT
+                RETRY_COUNT,
+                PROXY_HOST,
+                PROXY_PORT
         );
     }
 
diff --git a/nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/storage/AbstractGCSProcessor.java b/nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/storage/AbstractGCSProcessor.java
index ff368b55df..7cc854d02b 100644
--- a/nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/storage/AbstractGCSProcessor.java
+++ b/nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/storage/AbstractGCSProcessor.java
@@ -16,6 +16,9 @@
  */
 package org.apache.nifi.processors.gcp.storage;
 
+import com.google.api.client.http.HttpTransport;
+import com.google.api.client.http.javanet.NetHttpTransport;
+import com.google.auth.http.HttpTransportFactory;
 import com.google.auth.oauth2.GoogleCredentials;
 import com.google.cloud.RetryParams;
 import com.google.cloud.storage.Storage;
@@ -26,7 +29,10 @@ import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.processor.ProcessContext;
 import org.apache.nifi.processor.Relationship;
 import org.apache.nifi.processors.gcp.AbstractGCPProcessor;
+import org.apache.nifi.util.StringUtils;
 
+import java.net.InetSocketAddress;
+import java.net.Proxy;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashSet;
@@ -66,15 +72,36 @@ public abstract class AbstractGCSProcessor extends AbstractGCPProcessor<Storage,
     @Override
     protected StorageOptions getServiceOptions(ProcessContext context, GoogleCredentials credentials) {
         final String projectId = context.getProperty(PROJECT_ID).getValue();
-        final Integer retryCount = Integer.valueOf(context.getProperty(RETRY_COUNT).getValue());
+        final Integer retryCount = context.getProperty(RETRY_COUNT).asInteger();
 
-        return StorageOptions.newBuilder()
+        final String proxyHost = context.getProperty(PROXY_HOST).getValue();
+        final Integer proxyPort = context.getProperty(PROXY_PORT).asInteger();
+
+        StorageOptions.Builder storageOptionsBuilder = StorageOptions.newBuilder()
                 .setCredentials(credentials)
                 .setProjectId(projectId)
                 .setRetryParams(RetryParams.newBuilder()
                         .setRetryMaxAttempts(retryCount)
                         .setRetryMinAttempts(retryCount)
-                        .build())
-                .build();
+                        .build());
+
+        if (!StringUtils.isBlank(proxyHost) && proxyPort > 0) {
+            storageOptionsBuilder.setHttpTransportFactory(new HttpTransportFactory() {
+                @Override
+                public HttpTransport create() {
+                    final HttpTransport transport = new NetHttpTransport.Builder()
+                            .setProxy(
+                                    new Proxy(
+                                            Proxy.Type.HTTP, new InetSocketAddress(proxyHost, proxyPort)
+",remove console log statements finish up the logic of stepping back and forward in a running node,0
"diff --git a/okhttp/src/main/java/okhttp3/OkHttpClient.kt b/okhttp/src/main/java/okhttp3/OkHttpClient.kt
index a80f756fb7f2..c35dafb054d0 100644
--- a/okhttp/src/main/java/okhttp3/OkHttpClient.kt
+++ b/okhttp/src/main/java/okhttp3/OkHttpClient.kt
@@ -767,7 +767,7 @@ open class OkHttpClient internal constructor(
       require(Protocol.HTTP_1_0 !in protocolsCopy) {
         ""protocols must not contain http/1.0: $protocolsCopy""
       }
-      require(null !in (protocols as List<Protocol?>)) {
+      require(null !in (protocolsCopy as List<Protocol?>)) {
         ""protocols must not contain null""
       }
 
diff --git a/okhttp/src/test/java/okhttp3/OkHttpClientTest.java b/okhttp/src/test/java/okhttp3/OkHttpClientTest.java
index 59747ee7aeb1..867498502af5 100644
--- a/okhttp/src/test/java/okhttp3/OkHttpClientTest.java
+++ b/okhttp/src/test/java/okhttp3/OkHttpClientTest.java
@@ -19,6 +19,8 @@
 import java.net.CookieManager;
 import java.net.ProxySelector;
 import java.net.ResponseCache;
+import java.util.AbstractList;
+import java.util.List;
 import java.util.concurrent.TimeUnit;
 import javax.net.ssl.SSLSocketFactory;
 import okhttp3.mockwebserver.MockResponse;
@@ -29,6 +31,7 @@
 
 import static java.util.Arrays.asList;
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 
 public final class OkHttpClientTest {
@@ -239,4 +242,32 @@ public final class OkHttpClientTest {
     } catch (IllegalStateException expected) {
     }
   }
+
+  @Test public void nullHostileProtocolList() {
+    List<Protocol> nullHostileProtocols = new AbstractList<Protocol>() {
+      @Override public boolean contains(Object o) {
+        if (o == null) throw new NullPointerException();
+        return super.contains(o);
+      }
+
+      @Override public int indexOf(Object o) {
+        if (o == null) throw new NullPointerException();
+        return super.indexOf(o);
+      }
+
+      @Override public Protocol get(int index) {
+        if (index != 0) throw new IndexOutOfBoundsException();
+        return Protocol.HTTP_1_1;
+      }
+
+      @Override public int size() {
+        return 1;
+      }
+    };
+
+    OkHttpClient client = new OkHttpClient.Builder()
+        .protocols(nullHostileProtocols)
+        .build();
+    assertEquals(asList(Protocol.HTTP_1_1), client.protocols());
+  }
 }",Tolerate null-hostile lists in public API,1
"diff --git a/http-client/src/test/groovy/io/micronaut/http/client/rxjava2/RxHttpPostSpec.groovy b/http-client/src/test/groovy/io/micronaut/http/client/rxjava2/RxHttpPostSpec.groovy
index 8243c29ac3..89ac1edece 100644
--- a/http-client/src/test/groovy/io/micronaut/http/client/rxjava2/RxHttpPostSpec.groovy
+++ b/http-client/src/test/groovy/io/micronaut/http/client/rxjava2/RxHttpPostSpec.groovy
@@ -43,7 +43,7 @@ import spock.lang.Specification
  * @author Graeme Rocher
  * @since 1.0
  */
-class RxHttpPostSpec extends Specification {
+class   RxHttpPostSpec extends Specification {
 
     @Shared
     @AutoCleanup
@@ -181,7 +181,11 @@ class RxHttpPostSpec extends Specification {
         )
         User user = flowable.onErrorResumeNext((Function){ t ->
             if (t instanceof HttpClientResponseException) {
-                return Flowable.just(((HttpClientResponseException) t).response.getBody(User).get())
+                try {
+                    return Flowable.just(((HttpClientResponseException) t).response.getBody(User).get())
+                } catch (e) {
+                    return Flowable.error(e)
+                }",Introduce Whale hook for Android,0
"diff --git a/hazelcast/pom.xml b/hazelcast/pom.xml
index f47eeddd17..adfcb5f5a5 100644
--- a/hazelcast/pom.xml
+++ b/hazelcast/pom.xml
@@ -55,11 +55,7 @@
                     <failOnNoGitDirectory>false</failOnNoGitDirectory>
                     <abbrevLength>7</abbrevLength>
                     <gitDescribe>
-                        <skip>false</skip>
-",adding more datasource metrics binder tests,0
"diff --git a/retrofit/src/main/java/retrofit2/HttpServiceMethod.java b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java
index 34f93af32b..bc8bdf814c 100644
--- a/retrofit/src/main/java/retrofit2/HttpServiceMethod.java
+++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java
@@ -21,7 +21,6 @@
 import java.lang.reflect.Type;
 import javax.annotation.Nullable;
 import kotlin.coroutines.Continuation;
-import okhttp3.Call;
 import okhttp3.ResponseBody;
 
 import static retrofit2.Utils.getRawType;
@@ -36,14 +35,16 @@ abstract class HttpServiceMethod<ResponseT, ReturnT> extends ServiceMethod<Retur
    */
   static <ResponseT, ReturnT> HttpServiceMethod<ResponseT, ReturnT> parseAnnotations(
       Retrofit retrofit, Method method, RequestFactory requestFactory) {
-    CallAdapter<ResponseT, ReturnT> callAdapter = null;
+    boolean isKotlinSuspendFunction = requestFactory.isKotlinSuspendFunction;
     boolean continuationWantsResponse = false;
     boolean continuationBodyNullable = false;
-    Type responseType;
-    if (requestFactory.isKotlinSuspendFunction) {
+
+    Annotation[] annotations = method.getAnnotations();
+    Type adapterType;
+    if (isKotlinSuspendFunction) {
       Type[] parameterTypes = method.getGenericParameterTypes();
-      Type continuationType = parameterTypes[parameterTypes.length - 1];
-      responseType = Utils.getParameterLowerBound(0, (ParameterizedType) continuationType);
+      Type responseType = Utils.getParameterLowerBound(0,
+          (ParameterizedType) parameterTypes[parameterTypes.length - 1]);
       if (getRawType(responseType) == Response.class && responseType instanceof ParameterizedType) {
         // Unwrap the actual body type from Response<T>.
         responseType = Utils.getParameterUpperBound(0, (ParameterizedType) responseType);
@@ -54,11 +55,16 @@ static <ResponseT, ReturnT> HttpServiceMethod<ResponseT, ReturnT> parseAnnotatio
         // Find the entry for method
         // Determine if return type is nullable or not
       }
+
+      adapterType = new Utils.ParameterizedTypeImpl(null, Call.class, responseType);
+      annotations = SkipCallbackExecutorImpl.ensurePresent(annotations);
     } else {
-      callAdapter = createCallAdapter(retrofit, method);
-      responseType = callAdapter.responseType();
+      adapterType = method.getGenericReturnType();
     }
 
+    CallAdapter<ResponseT, ReturnT> callAdapter =
+        createCallAdapter(retrofit, method, adapterType, annotations);
+    Type responseType = callAdapter.responseType();
     if (responseType == okhttp3.Response.class) {
       throw methodError(method, ""'""
           + getRawType(responseType).getName()
@@ -76,23 +82,22 @@ static <ResponseT, ReturnT> HttpServiceMethod<ResponseT, ReturnT> parseAnnotatio
         createResponseConverter(retrofit, method, responseType);
 
     okhttp3.Call.Factory callFactory = retrofit.callFactory;
-    if (callAdapter != null) {
-      return new CallAdapted<>(requestFactory, callFactory, callAdapter, responseConverter);
+    if (!isKotlinSuspendFunction) {
+      return new CallAdapted<>(requestFactory, callFactory, responseConverter, callAdapter);
     } else if (continuationWantsResponse) {
       //noinspection unchecked Kotlin compiler guarantees ReturnT to be Object.
       return (HttpServiceMethod<ResponseT, ReturnT>) new SuspendForResponse<>(requestFactory,
-          callFactory, responseConverter);
+          callFactory, responseConverter, (CallAdapter<ResponseT, Call<ResponseT>>) callAdapter);
     } else {
       //noinspection unchecked Kotlin compiler guarantees ReturnT to be Object.
       return (HttpServiceMethod<ResponseT, ReturnT>) new SuspendForBody<>(requestFactory,
-          callFactory, responseConverter, continuationBodyNullable);
+          callFactory, responseConverter, (CallAdapter<ResponseT, Call<ResponseT>>) callAdapter,
+          continuationBodyNullable);
     }
   }
 
   private static <ResponseT, ReturnT> CallAdapter<ResponseT, ReturnT> createCallAdapter(
-      Retrofit retrofit, Method method) {
-    Type returnType = method.getGenericReturnType();
-    Annotation[] annotations = method.getAnnotations();
+      Retrofit retrofit, Method method, Type returnType, Annotation[] annotations) {
     try {
       //noinspection unchecked
       return (CallAdapter<ResponseT, ReturnT>) retrofit.callAdapter(returnType, annotations);
@@ -115,7 +120,7 @@ private static <ResponseT> Converter<ResponseBody, ResponseT> createResponseConv
   private final okhttp3.Call.Factory callFactory;
   private final Converter<ResponseBody, ResponseT> responseConverter;
 
-  HttpServiceMethod(RequestFactory requestFactory, Call.Factory callFactory,
+  HttpServiceMethod(RequestFactory requestFactory, okhttp3.Call.Factory callFactory,
       Converter<ResponseBody, ResponseT> responseConverter) {
     this.requestFactory = requestFactory;
     this.callFactory = callFactory;
@@ -123,33 +128,41 @@ private static <ResponseT> Converter<ResponseBody, ResponseT> createResponseConv
   }
 
   @Override final @Nullable ReturnT invoke(Object[] args) {
-    return adapt(new OkHttpCall<>(requestFactory, args, callFactory, responseConverter), args);
+    Call<ResponseT> call = new OkHttpCall<>(requestFactory, args, callFactory, responseConverter);
+    return adapt(call, args);
   }
 
-  protected abstract @Nullable ReturnT adapt(OkHttpCall<ResponseT> call, Object[] args);
+  protected abstract @Nullable ReturnT adapt(Call<ResponseT> call, Object[] args);
 
   static final class CallAdapted<ResponseT, ReturnT> extends HttpServiceMethod<ResponseT, ReturnT> {
     private final CallAdapter<ResponseT, ReturnT> callAdapter;
 
-    CallAdapted(RequestFactory requestFactory, Call.Factory callFactory,
-        CallAdapter<ResponseT, ReturnT> callAdapter,
-        Converter<ResponseBody, ResponseT> responseConverter) {
+    CallAdapted(RequestFactory requestFactory, okhttp3.Call.Factory callFactory,
+        Converter<ResponseBody, ResponseT> responseConverter,
+        CallAdapter<ResponseT, ReturnT> callAdapter) {
       super(requestFactory, callFactory, responseConverter);
       this.callAdapter = callAdapter;
     }
 
-    @Override protected ReturnT adapt(OkHttpCall<ResponseT> call, Object[] args) {
+    @Override protected ReturnT adapt(Call<ResponseT> call, Object[] args) {
       return callAdapter.adapt(call);
     }
   }
 
   static final class SuspendForResponse<ResponseT> extends HttpServiceMethod<ResponseT, Object> {
-    SuspendForResponse(RequestFactory requestFactory, Call.Factory callFactory,
-        Converter<ResponseBody, ResponseT> responseConverter) {
+    private final CallAdapter<ResponseT, Call<ResponseT>> callAdapter;
+
+    SuspendForResponse(RequestFactory requestFactory, okhttp3.Call.Factory callFactory,
+        Converter<ResponseBody, ResponseT> responseConverter,
+        CallAdapter<ResponseT, Call<ResponseT>> callAdapter) {
       super(requestFactory, callFactory, responseConverter);
+      this.callAdapter = callAdapter;
     }
 
-    @Override protected Object adapt(OkHttpCall<ResponseT> call, Object[] args) {
+    @Override protected Object adapt(Call<ResponseT> call, Object[] args) {
+      call = callAdapter.adapt(call);
+
+      //noinspection unchecked Checked by reflection inside RequestFactory.
       Continuation<Response<ResponseT>> continuation =
           (Continuation<Response<ResponseT>>) args[args.length - 1];
       return KotlinExtensions.awaitResponse(call, continuation);
@@ -157,15 +170,21 @@ static final class SuspendForResponse<ResponseT> extends HttpServiceMethod<Respo
   }
 
   static final class SuspendForBody<ResponseT> extends HttpServiceMethod<ResponseT, Object> {
+    private final CallAdapter<ResponseT, Call<ResponseT>> callAdapter;
     private final boolean isNullable;
 
-    SuspendForBody(RequestFactory requestFactory, Call.Factory callFactory,
-        Converter<ResponseBody, ResponseT> responseConverter, boolean isNullable) {
+    SuspendForBody(RequestFactory requestFactory, okhttp3.Call.Factory callFactory,
+        Converter<ResponseBody, ResponseT> responseConverter,
+        CallAdapter<ResponseT, Call<ResponseT>> callAdapter, boolean isNullable) {
       super(requestFactory, callFactory, responseConverter);
+      this.callAdapter = callAdapter;
       this.isNullable = isNullable;
     }
 
-    @Override protected Object adapt(OkHttpCall<ResponseT> call, Object[] args) {
+    @Override protected Object adapt(Call<ResponseT> call, Object[] args) {
+      call = callAdapter.adapt(call);
+
+      //noinspection unchecked Checked by reflection inside RequestFactory.
       Continuation<ResponseT> continuation = (Continuation<ResponseT>) args[args.length - 1];
       return isNullable
           ? KotlinExtensions.awaitNullable(call, continuation)
diff --git a/retrofit/src/main/java/retrofit2/SkipCallbackExecutorImpl.java b/retrofit/src/main/java/retrofit2/SkipCallbackExecutorImpl.java
new file mode 100644
index 0000000000..4a3593b750
--- /dev/null
+++ b/retrofit/src/main/java/retrofit2/SkipCallbackExecutorImpl.java
@@ -0,0 +1,51 @@
+/*
+ * Copyright (C) 2019 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit2;
+
+import java.lang.annotation.Annotation;
+
+// This class conforms to the annotation requirements documented on Annotation.
+final class SkipCallbackExecutorImpl implements SkipCallbackExecutor {
+  private static final SkipCallbackExecutor INSTANCE = new SkipCallbackExecutorImpl();
+
+  static Annotation[] ensurePresent(Annotation[] annotations) {
+    if (Utils.isAnnotationPresent(annotations, SkipCallbackExecutor.class)) {
+      return annotations;
+    }
+
+    Annotation[] newAnnotations = new Annotation[annotations.length + 1];
+    // Place the skip annotation first since we're guaranteed to check for it in the call adapter.
+    newAnnotations[0] = SkipCallbackExecutorImpl.INSTANCE;
+    System.arraycopy(annotations, 0, newAnnotations, 1, annotations.length);
+    return newAnnotations;
+  }
+
+  @Override public Class<? extends Annotation> annotationType() {
+    return SkipCallbackExecutor.class;
+  }
+
+  @Override public boolean equals(Object obj) {
+    return obj instanceof SkipCallbackExecutor;
+  }
+
+  @Override public int hashCode() {
+    return 0;
+  }
+
+  @Override public String toString() {
+    return ""@"" + SkipCallbackExecutor.class.getName() + ""()"";
+  }
+}
diff --git a/retrofit/src/main/java/retrofit2/Utils.java b/retrofit/src/main/java/retrofit2/Utils.java
index ce2c802061..d74b0a1abd 100644
--- a/retrofit/src/main/java/retrofit2/Utils.java
+++ b/retrofit/src/main/java/retrofit2/Utils.java
@@ -383,7 +383,7 @@ static boolean hasUnresolvableType(@Nullable Type type) {
         + ""GenericArrayType, but <"" + type + ""> is of type "" + className);
   }
 
-  private static final class ParameterizedTypeImpl implements ParameterizedType {
+  static final class ParameterizedTypeImpl implements ParameterizedType {
     private final Type ownerType;
     private final Type rawType;
     private final Type[] typeArguments;
diff --git a/retrofit/src/test/java/retrofit2/KotlinSuspendTest.kt b/retrofit/src/test/java/retrofit2/KotlinSuspendTest.kt
index 5ccb9845bc..629b02624a 100644
--- a/retrofit/src/test/java/retrofit2/KotlinSuspendTest.kt
+++ b/retrofit/src/test/java/retrofit2/KotlinSuspendTest.kt
@@ -33,6 +33,8 @@ import retrofit2.helpers.ToStringConverterFactory
 import retrofit2.http.GET
 import retrofit2.http.Path
 import java.io.IOException
+import java.lang.reflect.ParameterizedType
+import java.lang.reflect.Type
 
 class KotlinSuspendTest {
   @get:Rule val server = MockWebServer()
@@ -213,4 +215,62 @@ class KotlinSuspendTest {
     deferred.cancel()
     assertTrue(call.isCanceled)
   }
+
+  @Test fun doesNotUseCallbackExecutor() {
+    val retrofit = Retrofit.Builder()
+        .baseUrl(server.url(""/""))
+        .callbackExecutor { fail() }
+        .addConverterFactory(ToStringConverterFactory())
+        .build()
+    val example = retrofit.create(Service::class.java)
+
+    server.enqueue(MockResponse().setBody(""Hi""))
+
+    val body = runBlocking { example.body() }
+    assertThat(body).isEqualTo(""Hi"")
+  }
+
+  @Test fun usesCallAdapterForCall() {
+    val callAdapterFactory = object : CallAdapter.Factory() {
+      override fun get(returnType: Type, annotations: Array<Annotation>,
+          retrofit: Retrofit): CallAdapter<*, *>? {
+        if (getRawType(returnType) != Call::class.java) {
+          return null
+        }
+        if (getParameterUpperBound(0, returnType as ParameterizedType) != String::class.java) {
+          return null
+        }
+        return object : CallAdapter<String, Call<String>> {
+          override fun responseType() = String::class.java
+          override fun adapt(call: Call<String>): Call<String> {
+            return object : Call<String> by call {
+              override fun enqueue(callback: Callback<String>) {
+                call.enqueue(object : Callback<String> by callback {
+                  override fun onResponse(call: Call<String>, response: Response<String>) {
+                    if (response.isSuccessful) {
+                      callback.onResponse(call, Response.success(response.body()?.repeat(5)))
+                    } else {
+                      callback.onResponse(call, response)
+                    }
+                  }
+                })
+              }
+            }
+          }
+        }
+      }
+    }
+
+    val retrofit = Retrofit.Builder()
+        .baseUrl(server.url(""/""))
+        .addCallAdapterFactory(callAdapterFactory)
+        .addConverterFactory(ToStringConverterFactory())
+        .build()
+    val example = retrofit.create(Service::class.java)
+
+    server.enqueue(MockResponse().setBody(""Hi""))
+
+    val body = runBlocking { example.body() }
+    assertThat(body).isEqualTo(""HiHiHiHiHi"")
+  }
 }",Back suspend methods with the CallAdapter for Call. <enter>  <enter> This allows the regular mechanism of composition of behavior without explicitly needing to model suspending functions in the API.,1
"diff --git a/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/HostFunction.java b/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/HostFunction.java
index adbd7d0b8fd..218756cc47e 100644
--- a/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/HostFunction.java
+++ b/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/HostFunction.java
@@ -122,6 +122,7 @@ final class HostFunction implements TruffleObject {
     }
 
     @ExportMessage
+    @TruffleBoundary
     static int identityHashCode(HostFunction receiver) {
         return System.identityHashCode(receiver.method);
     }
diff --git a/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/HostObject.java b/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/HostObject.java
index 1102db658c3..b15a6655704 100644
--- a/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/HostObject.java
+++ b/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/HostObject.java
@@ -1156,6 +1156,7 @@ final class HostObject implements TruffleObject {
     }
 
     @ExportMessage
+    @TruffleBoundary
     static int identityHashCode(HostObject receiver) {
         return System.identityHashCode(receiver.obj);
     }
diff --git a/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/PolyglotProxy.java b/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/PolyglotProxy.java
index 517f59bf3f0..a8f2d29004c 100644
--- a/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/PolyglotProxy.java
+++ b/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/PolyglotProxy.java
@@ -841,6 +841,7 @@ final class PolyglotProxy implements TruffleObject {
     }
 
     @ExportMessage
+    @TruffleBoundary
     static int identityHashCode(PolyglotProxy receiver) {
         return System.identityHashCode(receiver.proxy);
     }
diff --git a/vm/mx.vm/mx_vm_gate.py b/vm/mx.vm/mx_vm_gate.py
index 78f3ea5ad40..f2bb90974eb 100644
--- a/vm/mx.vm/mx_vm_gate.py
+++ b/vm/mx.vm/mx_vm_gate.py
@@ -216,6 +216,7 @@ def _svm_truffle_tck(native_image, svm_suite, language_suite, language_id):
             '-cp',
             cp,
             '--no-server',
+            '-H:+TruffleCheckBlackListedMethods',
             '-H:-FoldSecurityManagerGetter',
             '-H:TruffleTCKPermissionsReportFile={}'.format(report_file),
             '-H:Path={}'.format(svmbuild),
diff --git a/vm/mx.vm/suite.py b/vm/mx.vm/suite.py
index e82e3214fff..b3ed96d1140 100644
--- a/vm/mx.vm/suite.py
+++ b/vm/mx.vm/suite.py
@@ -39,7 +39,7 @@ suite = {
                 ""name"": ""graal-nodejs"",
                 ""subdir"": True,
                 ""dynamic"": True,
-                ""version"": ""d32479e630ef43d44a9ad7d23edfc4cd630d5aa1"",
+                ""version"": ""5f456692c853c6cc851614496e6d77a3a60a5eba"",
                 ""urls"" : [
                     {""url"" : ""https://github.com/graalvm/graaljs.git"", ""kind"" : ""git""},
                     {""url"": ""https://curio.ssw.jku.at/nexus/content/repositories/snapshots"", ""kind"": ""binary""},
@@ -49,7 +49,7 @@ suite = {
                 ""name"": ""graal-js"",
                 ""subdir"": True,
                 ""dynamic"": True,
-                ""version"": ""d32479e630ef43d44a9ad7d23edfc4cd630d5aa1"",
+                ""version"": ""5f456692c853c6cc851614496e6d77a3a60a5eba"",
                 ""urls"": [
                     {""url"": ""https://github.com/graalvm/graaljs.git"", ""kind"" : ""git""},
                     {""url"": ""https://curio.ssw.jku.at/nexus/content/repositories/snapshots"", ""kind"": ""binary""},",Add Camera implementation using CameraView on Android .,0
"diff --git a/dubbo-common/src/main/java/com/alibaba/dubbo/common/bytecode/ClassGenerator.java b/dubbo-common/src/main/java/com/alibaba/dubbo/common/bytecode/ClassGenerator.java
index efe08a006a6..1f1a4cd91e5 100644
--- a/dubbo-common/src/main/java/com/alibaba/dubbo/common/bytecode/ClassGenerator.java
+++ b/dubbo-common/src/main/java/com/alibaba/dubbo/common/bytecode/ClassGenerator.java
@@ -18,6 +18,7 @@
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
+import java.security.ProtectionDomain;
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.LinkedList;
@@ -288,7 +289,10 @@ public ClassPool getClassPool() {
 	    return mPool;
 	}
 
-	public Class<?> toClass()
+	public Class<?> toClass(){
+		return toClass(getClass().getClassLoader(), getClass().getProtectionDomain());
+	}
+	public Class<?> toClass(ClassLoader loader, ProtectionDomain pd)
 	{
 		if( mCtc != null )
 			mCtc.detach();
@@ -334,7 +338,7 @@ public Class<?> toClass()
 					}
 				}
 			}
-			return mCtc.toClass();
+			return mCtc.toClass(loader, pd);
 		}
 		catch(RuntimeException e)
 		{",set ProtectionDomain for newly generated Class,1
"diff --git a/okhttp/src/main/java/okhttp3/internal/Util.java b/okhttp/src/main/java/okhttp3/internal/Util.java
index c7f08090c0ae..51e982c40830 100644
--- a/okhttp/src/main/java/okhttp3/internal/Util.java
+++ b/okhttp/src/main/java/okhttp3/internal/Util.java
@@ -645,7 +645,7 @@ public static List<Header> toHeaderBlock(Headers headers) {
   }
 
   /**
-   * Returns the system property, or defaultValue if the system property is null or
+   * Returns the system property, or {@code defaultValue} if the system property is null or
    * cannot be read (e.g. because of security policy restrictions).
    */
   public static String getSystemProperty(String key, @Nullable String defaultValue) {",Update javadoc,1
"diff --git a/src/main/java/net/minecraftforge/fml/StartupQuery.java b/src/main/java/net/minecraftforge/fml/StartupQuery.java
index de36cc815..a4d8d3064 100644
--- a/src/main/java/net/minecraftforge/fml/StartupQuery.java
+++ b/src/main/java/net/minecraftforge/fml/StartupQuery.java
@@ -25,6 +25,15 @@ import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.function.Consumer;
 import java.util.function.Supplier;
 
+import javax.annotation.Nullable;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.apache.logging.log4j.Marker;
+import org.apache.logging.log4j.MarkerManager;
+
+import com.google.common.base.Strings;
+
 import net.minecraft.client.Minecraft;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.dedicated.DedicatedServer;
@@ -34,31 +43,74 @@ import net.minecraftforge.fml.client.gui.screen.NotificationScreen;
 import net.minecraftforge.fml.common.thread.EffectiveSide;
 import net.minecraftforge.fml.loading.FMLEnvironment;
 import net.minecraftforge.fml.server.ServerLifecycleHooks;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-import org.apache.logging.log4j.Marker;
-import org.apache.logging.log4j.MarkerManager;
-
-import javax.annotation.Nullable;
 
 public class StartupQuery {
+
+    public static class QueryBuilder
+    {
+        private String header = """";
+        private String text = """";
+        private String action = """";
+
+        QueryBuilder() {}
+
+        public QueryBuilder header(String header)
+        {
+            this.header = Strings.nullToEmpty(header);
+            return this;
+        }
+
+        public QueryBuilder text(String text)
+        {
+            this.text = Strings.nullToEmpty(text);
+            return this;
+        }
+
+        public QueryBuilder action(String action)
+        {
+            this.action = Strings.nullToEmpty(action);
+            return this;
+        }
+
+        public boolean confirm()
+        {
+            return build(new AtomicBoolean()).getResult();
+        }
+
+        public void notification()
+        {
+            build(null);
+        }
+
+        private StartupQuery build(AtomicBoolean result)
+        {
+            StartupQuery query = new StartupQuery(header, text, action, new AtomicBoolean());
+            query.execute();
+            return query;
+        }
+    }
+
     // internal class/functionality, do not use
     private static final Logger LOGGER = LogManager.getLogger();
     private static final Marker SQ = MarkerManager.getMarker(""STARTUPQUERY"");
 
+    public static QueryBuilder builder()
+    {
+        return new QueryBuilder();
+    }
+
+    @Deprecated // TODO 1.16 remove
     public static boolean confirm(String text)
     {
-        StartupQuery query = new StartupQuery(text, new AtomicBoolean());
-        query.execute();
-        return query.getResult();
+        return builder().text(text).confirm();
     }
 
     private InterruptedException exception;
 
+    @Deprecated // TODO 1.16 remove
     public static void notify(String text)
     {
-        StartupQuery query = new StartupQuery(text, null);
-        query.execute();
+        builder().text(text).notification();
     }
 
     public static void abort()
@@ -116,9 +168,11 @@ public class StartupQuery {
     private static volatile boolean aborted = false;
 
 
-    private StartupQuery(String text, @Nullable AtomicBoolean result)
+    private StartupQuery(String header, String text, String action, @Nullable AtomicBoolean result)
     {
+        this.header = header;
         this.text = text;
+        this.action = action;
         this.result = result;
     }
 
@@ -133,11 +187,21 @@ public class StartupQuery {
         this.result.set(result);
     }
 
+    public String getHeader()
+    {
+        return header;
+    }
+
     public String getText()
     {
         return text;
     }
 
+    public String getAction()
+    {
+        return action;
+    }
+
     public boolean isSynchronous()
     {
         return synchronous;
@@ -194,7 +258,9 @@ public class StartupQuery {
         }
     }
 
-    private String text;
+    private final String header;
+    private final String text;
+    private final String action;
     @Nullable
     private AtomicBoolean result;
     private CountDownLatch signal = new CountDownLatch(1);
diff --git a/src/main/java/net/minecraftforge/fml/client/gui/screen/ConfirmationScreen.java b/src/main/java/net/minecraftforge/fml/client/gui/screen/ConfirmationScreen.java
index 37f817fb9..140b7cb5a 100644
--- a/src/main/java/net/minecraftforge/fml/client/gui/screen/ConfirmationScreen.java
+++ b/src/main/java/net/minecraftforge/fml/client/gui/screen/ConfirmationScreen.java
@@ -30,16 +30,16 @@ public class ConfirmationScreen extends NotificationScreen
     }
 
     @Override
-    public void init()
+    protected void addConfirmationButtons()
     {
-        this.addButton(new Button(this.width / 2 - 104, this.height - 38, 100, 20, ForgeI18n.parseMessage(""gui.yes""), b ->
+        this.addButton(new Button(this.width / 2 - 104, this.height - PADDING - 20, 100, 20, ForgeI18n.parseMessage(""gui.yes""), b ->
             {
                 ConfirmationScreen.this.minecraft.currentScreen = null;
                 query.setResult(true);
                 query.finish();
             }
         ));
-        this.addButton(new Button(this.width / 2 + 4, this.height - 38, 100, 20, ForgeI18n.parseMessage(""gui.no""), b ->
+        this.addButton(new Button(this.width / 2 + 4, this.height - PADDING - 20, 100, 20, ForgeI18n.parseMessage(""gui.no""), b ->
             {
                 ConfirmationScreen.this.minecraft.currentScreen = null;
                 query.setResult(false);
diff --git a/src/main/java/net/minecraftforge/fml/client/gui/screen/NotificationScreen.java b/src/main/java/net/minecraftforge/fml/client/gui/screen/NotificationScreen.java
index 5b96f14fc..94a0c91a8 100644
--- a/src/main/java/net/minecraftforge/fml/client/gui/screen/NotificationScreen.java
+++ b/src/main/java/net/minecraftforge/fml/client/gui/screen/NotificationScreen.java
@@ -20,23 +20,81 @@
 package net.minecraftforge.fml.client.gui.screen;
 
 import net.minecraft.client.gui.widget.button.Button;
+import net.minecraft.client.renderer.Tessellator;
+import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.screen.Screen;
 import net.minecraft.client.resources.I18n;
 import net.minecraft.util.text.TranslationTextComponent;
+import net.minecraftforge.client.gui.ScrollPanel;
 import net.minecraftforge.fml.StartupQuery;
 
 public class NotificationScreen extends Screen
 {
+    private class TextPanel extends ScrollPanel
+    {
+        TextPanel(Minecraft client, int width, int height, int top, int left)
+        {
+            super(client, width, height, top, left);
+        }
+
+        @Override
+        protected int getContentHeight()
+        {
+            int height = 0;
+            height += (textLines.length * font.FONT_HEIGHT) + 4;
+            if (height < this.height - 50)
+                height = this.height - 50;
+            return height;
+        }
+
+        @Override
+        protected void drawPanel(int entryRight, int relativeY, Tessellator tess, int mouseX, int mouseY)
+        {
+            drawCenteredLines(relativeY, textLines);
+        }
+
+        @Override
+        protected int getScrollAmount()
+        {
+            return font.FONT_HEIGHT * 3;
+        }
+    }
+
+    protected static final int PADDING = 6;
+
+    protected final StartupQuery query;
+
+    private final String[] headerLines;
+    private final String[] textLines;
+    private final String action;
+
+    private ScrollPanel textPanel;
+
     public NotificationScreen(StartupQuery query)
     {
         super(new TranslationTextComponent(""fml.menu.notification.title""));
         this.query = query;
+        this.headerLines = query.getHeader().isEmpty() ? new String[0] : query.getHeader().split(""\n"");
+        this.textLines = query.getText().split(""\n"");
+        this.action = query.getAction();
     }
 
     @Override
     public void init()
     {
-        this.buttons.add(new Button(this.width / 2 - 100, this.height - 38, 200, 20, I18n.format(""gui.done""), b -> {
+        super.init();
+        int panelY = PADDING + headerLines.length * font.FONT_HEIGHT + PADDING;
+        int panelHeight = this.height - PADDING - 20 - panelY;
+        if (!action.isEmpty()) {
+            panelHeight = panelHeight - font.FONT_HEIGHT - PADDING; 
+        }
+        textPanel = new TextPanel(this.minecraft, this.width - (PADDING * 2), panelHeight, panelY, PADDING);
+        this.children.add(textPanel);
+        addConfirmationButtons();
+    }
+
+    protected void addConfirmationButtons() {
+        this.buttons.add(new Button(this.width / 2 - 100, this.height - PADDING - 20, 200, 20, I18n.format(""gui.done""), b -> {
             NotificationScreen.this.minecraft.displayGuiScreen(null);
             query.finish();
         }));
@@ -47,29 +105,28 @@ public class NotificationScreen extends Screen
     {
         this.renderBackground();
 
-        String[] lines = query.getText().split(""\n"");
+        drawCenteredLines(PADDING, headerLines);
 
-        int spaceAvailable = this.height - 38 - 20;
-        int spaceRequired = Math.min(spaceAvailable, 10 + 10 * lines.length);
-
-        int offset = 10 + (spaceAvailable - spaceRequired) / 2; // vertically centered
+        if (textPanel != null)
+        {
+            textPanel.render(mouseX, mouseY, partialTicks);
+        }
 
-        for (String line : lines)
+        if (!action.isEmpty())
         {
-            if (offset >= spaceAvailable)
-            {
-                this.drawCenteredString(this.font, ""..."", this.width / 2, offset, 0xFFFFFF);
-                break;
-            }
-            else
-            {
-                if (!line.isEmpty()) this.drawCenteredString(this.font, line, this.width / 2, offset, 0xFFFFFF);
-                offset += 10;
-            }
+            drawCenteredString(font, action, this.width / 2, this.height - PADDING - 20 - font.FONT_HEIGHT, -1);
         }
 
         super.render(mouseX, mouseY, partialTicks);
     }
 
-    protected final StartupQuery query;
+    protected void drawCenteredLines(int yStart, String... lines)
+    {
+        for (String line : lines)
+        {
+            if (!line.isEmpty())
+                this.drawCenteredString(font, line, this.width / 2, yStart, 0xFFFFFF);
+            yStart += font.FONT_HEIGHT;
+        }
+    }
 }
diff --git a/src/main/java/net/minecraftforge/registries/GameData.java b/src/main/java/net/minecraftforge/registries/GameData.java
index 17b58fb7d..9e14ed1b0 100644
--- a/src/main/java/net/minecraftforge/registries/GameData.java
+++ b/src/main/java/net/minecraftforge/registries/GameData.java
@@ -99,8 +99,6 @@ import java.util.stream.Collectors;
 
 import static net.minecraftforge.registries.ForgeRegistry.REGISTRIES;
 
-import net.minecraftforge.fml.common.EnhancedRuntimeException.WrappedPrintStream;
-
 /**
  * INTERNAL ONLY
  * MODDERS SHOULD HAVE NO REASON TO USE THIS CLASS
@@ -728,16 +726,23 @@ public class GameData
             List<ResourceLocation> missingRegs = snapshot.keySet().stream().filter(name -> !RegistryManager.ACTIVE.registries.containsKey(name)).collect(Collectors.toList());
             if (missingRegs.size() > 0)
             {
-                String text = ""Forge Mod Loader detected missing/unknown registrie(s).\n\n"" +
+                String header = ""Forge Mod Loader detected missing/unknown registrie(s).\n\n"" +
                         ""There are "" + missingRegs.size() + "" missing registries in this save.\n"" +
                         ""If you continue the missing registries will get removed.\n"" +
-                        ""This may cause issues, it is advised that you create a world backup before continuing.\n\n"" +
-                        ""Missing Registries:\n"";
+                        ""This may cause issues, it is advised that you create a world backup before continuing.\n\n"";
+
+                StringBuilder text = new StringBuilder(""Missing Registries:\n"");
 
                 for (ResourceLocation s : missingRegs)
-                    text += s.toString() + ""\n"";
+                    text.append(s).append(""\n"");
+
+                boolean confirmed = StartupQuery.builder()
+                        .header(header)
+                        .text(text.toString())
+                        .action(""Continue anyway?"")
+                        .confirm();
 
-                if (!StartupQuery.confirm(text))
+                if (!confirmed)
                     StartupQuery.abort();
             }
         }
@@ -816,19 +821,24 @@ public class GameData
 
             if (!defaulted.isEmpty())
             {
-                StringBuilder buf = new StringBuilder();
-                buf.append(""Forge Mod Loader detected missing registry entries.\n\n"")
-                   .append(""There are "").append(defaulted.size()).append("" missing entries in this save.\n"")
-                   .append(""If you continue the missing entries will get removed.\n"")
-                   .append(""A world backup will be automatically created in your saves directory.\n\n"");
+                String header = ""Forge Mod Loader detected missing registry entries.\n\n"" +
+                   ""There are "" + defaulted.size() + "" missing entries in this save.\n"" +
+                   ""If you continue the missing entries will get removed.\n"" +
+                   ""A world backup will be automatically created in your saves directory.\n\n"";
 
+                StringBuilder buf = new StringBuilder();
                 defaulted.asMap().forEach((name, entries) ->
                 {
                     buf.append(""Missing "").append(name).append("":\n"");",revise OrderServiceImpl .,0
"diff --git a/src/main/java/org/junit/internal/runners/ErrorReportingRunner.java b/src/main/java/org/junit/internal/runners/ErrorReportingRunner.java
index f1b2c5de9c74..05059c983596 100644
--- a/src/main/java/org/junit/internal/runners/ErrorReportingRunner.java
+++ b/src/main/java/org/junit/internal/runners/ErrorReportingRunner.java
@@ -6,6 +6,7 @@
 
 import org.junit.internal.runners.links.Statement;
 import org.junit.runner.Description;
+import org.junit.runner.notification.Failure;
 import org.junit.runner.notification.RunNotifier;
 
 public class ErrorReportingRunner extends ParentRunner<Throwable> {
@@ -34,7 +35,10 @@ protected List<Throwable> getChildren() {
 
 	@Override
 	protected void runChild(Throwable child, RunNotifier notifier) {
-		notifier.testAborted(describeChild(child), child);
+		Description description= describeChild(child);
+		notifier.fireTestStarted(description);
+		notifier.fireTestFailure(new Failure(description, child));
+		notifier.fireTestFinished(description);
 	}
 	
 	private List<Throwable> getCauses(Throwable cause) {
diff --git a/src/main/java/org/junit/runner/Description.java b/src/main/java/org/junit/runner/Description.java
index 2fd74e6ef618..b48bd75bce31 100644
--- a/src/main/java/org/junit/runner/Description.java
+++ b/src/main/java/org/junit/runner/Description.java
@@ -69,11 +69,15 @@ public static Description createSuiteDescription(Class<?> testClass) {
 	}
 	
 	/**
-	 * Description of a Runner which runs no tests
+	 * Describes a Runner which runs no tests
 	 */
 	public static final Description EMPTY= new Description(""No Tests"");
 	
-	
+	/**
+	 * Describes a step in the test-running mechanism that goes so wrong no
+	 * other description can be used (for example, an exception thrown from a Runner's
+	 * constructor
+	 */
 	public static final Description TEST_MECHANISM= new Description(""Test mechanism"");
 	
 	private final ArrayList<Description> fChildren= new ArrayList<Description>();
@@ -153,14 +157,26 @@ public String toString() {
 		return getDisplayName();
 	}
 
+	/**
+	 * @return true if this is a description of a Runner that runs no tests
+	 */
 	public boolean isEmpty() {
 		return equals(EMPTY);
 	}
 
+	/**
+	 * @return a copy of this description, with no children (on the assumption that some of the
+	 * children will be added back)
+	 */
 	public Description childlessCopy() {
+		// TODO: should include annotations
 		return new Description(fDisplayName);
 	}
 
+	/**
+	 * @return the annotation of type annotationType that is attached to this description node, 
+	 * or null if none exists
+	 */
 	public <T extends Annotation> T getAnnotation(Class<T> annotationType) {
 		for (Annotation each : fAnnotations)
 			if (each.annotationType().equals(annotationType))
@@ -168,6 +184,9 @@ public <T extends Annotation> T getAnnotation(Class<T> annotationType) {
 		return null;
 	}
 
+	/**
+	 * @return all of the annotations attached to this description node
+	 */
 	public Collection<Annotation> getAnnotations() {
 		return Arrays.asList(fAnnotations);
 	}
diff --git a/src/main/java/org/junit/runner/notification/RunNotifier.java b/src/main/java/org/junit/runner/notification/RunNotifier.java
index e37b87366fe8..b794f8d98d63 100644
--- a/src/main/java/org/junit/runner/notification/RunNotifier.java
+++ b/src/main/java/org/junit/runner/notification/RunNotifier.java
@@ -141,10 +141,4 @@ public void pleaseStop() {
 	public void addFirstListener(RunListener listener) {
 		fListeners.add(0, listener);
 	}
-
-	public void testAborted(Description description, Throwable cause) {
-		fireTestStarted(description);
-		fireTestFailure(new Failure(description, cause));
-		fireTestFinished(description);
-	}
 }
\ No newline at end of file",Finishing javadoc for org.junit.runner.*,0
"diff --git a/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.kt b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.kt
index a49bebe9adee..f9b24152c920 100644
--- a/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.kt
+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.kt
@@ -18,6 +18,7 @@
 package okhttp3.mockwebserver
 
 import okhttp3.Headers
+import okhttp3.Headers.Companion.headersOf
 import okhttp3.HttpUrl
 import okhttp3.Protocol
 import okhttp3.Request
@@ -595,7 +596,7 @@ class MockWebServer : ExternalResource(), Closeable {
   @Throws(InterruptedException::class)
   private fun dispatchBookkeepingRequest(sequenceNumber: Int, socket: Socket) {
     val request = RecordedRequest(
-        """", Headers.of(), emptyList(), 0L, Buffer(), sequenceNumber, socket)
+        """", headersOf(), emptyList(), 0L, Buffer(), sequenceNumber, socket)
     requestCount.incrementAndGet()
     requestQueue.add(request)
     dispatcher.dispatch(request)
diff --git a/okhttp/src/main/java/okhttp3/Headers.kt b/okhttp/src/main/java/okhttp3/Headers.kt
index 127cb6459776..45fadd22dcca 100644
--- a/okhttp/src/main/java/okhttp3/Headers.kt
+++ b/okhttp/src/main/java/okhttp3/Headers.kt
@@ -24,7 +24,6 @@ import okhttp3.internal.http.toHttpDateString
 import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement
 import java.time.Instant
 import java.util.ArrayList
-import java.util.Arrays
 import java.util.Collections
 import java.util.Date
 import java.util.Locale
@@ -175,10 +174,10 @@ class Headers private constructor(
    * before comparing them for equality.
    */
   override fun equals(other: Any?): Boolean {
-    return other is Headers && Arrays.equals(other.namesAndValues, namesAndValues)
+    return other is Headers && namesAndValues.contentEquals(other.namesAndValues)
   }
 
-  override fun hashCode(): Int = Arrays.hashCode(namesAndValues)
+  override fun hashCode(): Int = namesAndValues.contentHashCode()
 
   override fun toString(): String {
     return buildString {
@@ -213,12 +212,12 @@ class Headers private constructor(
      * or cache.
      */
     internal fun addLenient(line: String) = apply {
-      val index = line.indexOf("":"", 1)
+      val index = line.indexOf(':', 1)
       when {
         index != -1 -> {
           addLenient(line.substring(0, index), line.substring(index + 1))
         }
-        line.startsWith("":"") -> {
+        line[0] == ':' -> {
           // Work around empty header names and header names that start with a colon (created by old
           // broken SPDY versions of the response cache).
           addLenient("""", line.substring(1)) // Empty header name.
@@ -232,7 +231,7 @@ class Headers private constructor(
 
     /** Add an header line containing a field name, a literal colon, and a value. */
     fun add(line: String) = apply {
-      val index = line.indexOf("":"")
+      val index = line.indexOf(':')
       require(index != -1) { ""Unexpected header: $line"" }
       add(line.substring(0, index).trim(), line.substring(index + 1))
     }
@@ -358,7 +357,8 @@ class Headers private constructor(
      * arguments, and they must alternate between header names and values.
      */
     @JvmStatic
-    fun of(vararg namesAndValues: String): Headers {
+    @JvmName(""of"")
+    fun headersOf(vararg namesAndValues: String): Headers {
       require(namesAndValues.size % 2 == 0) { ""Expected alternating header names and values"" }
 
       // Make a defensive copy and clean it up.
@@ -379,13 +379,23 @@ class Headers private constructor(
       return Headers(namesAndValues)
     }
 
+    @JvmName(""-deprecated_of"")
+    @Deprecated(
+        message = ""function name changed"",
+        replaceWith = ReplaceWith(expression = ""headersOf(*namesAndValues)""),
+        level = DeprecationLevel.WARNING)
+    fun of(vararg namesAndValues: String): Headers {
+      return headersOf(*namesAndValues)
+    }
+
     /** Returns headers for the header names and values in the [Map]. */
     @JvmStatic
-    fun of(headers: Map<String, String>): Headers {
+    @JvmName(""of"")
+    fun Map<String, String>.toHeaders(): Headers {
       // Make a defensive copy and clean it up.
-      val namesAndValues = arrayOfNulls<String>(headers.size * 2)
+      val namesAndValues = arrayOfNulls<String>(size * 2)
       var i = 0
-      for ((k, v) in headers) {
+      for ((k, v) in this) {
         val name = k.trim()
         val value = v.trim()
         checkName(name)
@@ -398,7 +408,16 @@ class Headers private constructor(
       return Headers(namesAndValues as Array<String>)
     }
 
-    internal fun checkName(name: String) {
+    @JvmName(""-deprecated_of"")
+    @Deprecated(
+        message = ""function moved to extension"",
+        replaceWith = ReplaceWith(expression = ""headers.toHeaders()""),
+        level = DeprecationLevel.WARNING)
+    fun of(headers: Map<String, String>): Headers {
+      return headers.toHeaders()
+    }
+
+    private fun checkName(name: String) {
       require(name.isNotEmpty()) { ""name is empty"" }
       for (i in 0 until name.length) {
         val c = name[i]
@@ -408,7 +427,7 @@ class Headers private constructor(
       }
     }
 
-    internal fun checkValue(value: String, name: String) {
+    private fun checkValue(value: String, name: String) {
       for (i in 0 until value.length) {
         val c = value[i]
         require(c == '\t' || c in '\u0020'..'\u007e') {
diff --git a/okhttp/src/main/java/okhttp3/internal/Util.kt b/okhttp/src/main/java/okhttp3/internal/Util.kt
index 542f566d9852..ef7357f298f8 100644
--- a/okhttp/src/main/java/okhttp3/internal/Util.kt
+++ b/okhttp/src/main/java/okhttp3/internal/Util.kt
@@ -19,6 +19,7 @@ package okhttp3.internal
 
 import okhttp3.EventListener
 import okhttp3.Headers
+import okhttp3.Headers.Companion.headersOf
 import okhttp3.HttpUrl
 import okhttp3.RequestBody.Companion.toRequestBody
 import okhttp3.Response
@@ -56,7 +57,7 @@ import kotlin.text.Charsets.UTF_32LE
 @JvmField
 val EMPTY_BYTE_ARRAY = ByteArray(0)
 @JvmField
-val EMPTY_HEADERS = Headers.of()
+val EMPTY_HEADERS = headersOf()
 
 @JvmField
 val EMPTY_RESPONSE = EMPTY_BYTE_ARRAY.toResponseBody()
diff --git a/okhttp/src/test/java/okhttp3/HeadersKotlinTest.kt b/okhttp/src/test/java/okhttp3/HeadersKotlinTest.kt
index eac23a4ce431..73b54ff1dd35 100644
--- a/okhttp/src/test/java/okhttp3/HeadersKotlinTest.kt
+++ b/okhttp/src/test/java/okhttp3/HeadersKotlinTest.kt
@@ -15,6 +15,7 @@
  */
 package okhttp3
 
+import okhttp3.Headers.Companion.headersOf
 import org.assertj.core.api.Assertions.assertThat
 import org.junit.Test
 import java.time.Instant
@@ -22,14 +23,14 @@ import java.util.Date
 
 class HeadersKotlinTest {
   @Test fun getOperator() {
-    val headers = Headers.of(""a"", ""b"", ""c"", ""d"")
+    val headers = headersOf(""a"", ""b"", ""c"", ""d"")
     assertThat(headers[""a""]).isEqualTo(""b"")
     assertThat(headers[""c""]).isEqualTo(""d"")
     assertThat(headers[""e""]).isNull()
   }
 
   @Test fun iteratorOperator() {
-    val headers = Headers.of(""a"", ""b"", ""c"", ""d"")
+    val headers = headersOf(""a"", ""b"", ""c"", ""d"")
 
     val pairs = mutableListOf<Pair<String, String>>()
     for ((name, value) in headers) {
diff --git a/okhttp/src/test/java/okhttp3/KotlinSourceModernTest.kt b/okhttp/src/test/java/okhttp3/KotlinSourceModernTest.kt
index 3ac2f1ca09a6..5de59f600d5e 100644
--- a/okhttp/src/test/java/okhttp3/KotlinSourceModernTest.kt
+++ b/okhttp/src/test/java/okhttp3/KotlinSourceModernTest.kt
@@ -16,6 +16,8 @@
 package okhttp3
 
 import okhttp3.Handshake.Companion.handshake
+import okhttp3.Headers.Companion.headersOf
+import okhttp3.Headers.Companion.toHeaders
 import okhttp3.HttpUrl.Companion.toHttpUrl
 import okhttp3.HttpUrl.Companion.toHttpUrlOrNull
 import okhttp3.MediaType.Companion.toMediaType
@@ -149,7 +151,7 @@ class KotlinSourceModernTest {
     val immutable: Boolean = cacheControl.immutable
     val forceCache: CacheControl = CacheControl.FORCE_CACHE
     val forceNetwork: CacheControl = CacheControl.FORCE_NETWORK
-    val parse: CacheControl = CacheControl.parse(Headers.of())
+    val parse: CacheControl = CacheControl.parse(headersOf())
   }
 
   @Test @Ignore
@@ -274,7 +276,7 @@ class KotlinSourceModernTest {
     val secure: Boolean = cookie.secure
     val matches: Boolean = cookie.matches("""".toHttpUrl())
     val parsedCookie: Cookie? = Cookie.parse("""".toHttpUrl(), """")
-    val cookies: List<Cookie> = Cookie.parseAll("""".toHttpUrl(), Headers.of())
+    val cookies: List<Cookie> = Cookie.parseAll("""".toHttpUrl(), headersOf())
   }
 
   @Test @Ignore
@@ -444,8 +446,8 @@ class KotlinSourceModernTest {
 
   @Test @Ignore
   fun headers() {
-    var headers: Headers = Headers.of("""", """")
-    headers = Headers.of(mapOf("""" to """"))
+    var headers: Headers = headersOf("""", """")
+    headers = mapOf("""" to """").toHeaders()
     val get: String? = headers.get("""")
     val date: Date? = headers.getDate("""")
     val instant: Instant? = headers.getInstant("""")
@@ -465,7 +467,7 @@ class KotlinSourceModernTest {
     builder = builder.add("""")
     builder = builder.add("""", """")
     builder = builder.addUnsafeNonAscii("""", """")
-    builder = builder.addAll(Headers.of())
+    builder = builder.addAll(headersOf())
     builder = builder.add("""", Date(0L))
     builder = builder.add("""", Instant.EPOCH)
     builder = builder.set("""", """")
@@ -694,8 +696,8 @@ class KotlinSourceModernTest {
     mockResponse = mockResponse.addHeader("""", """")
     mockResponse = mockResponse.addHeaderLenient("""", Any())
     mockResponse = mockResponse.setHeader("""", Any())
-    mockResponse = mockResponse.setHeaders(Headers.of())
-    mockResponse = mockResponse.setTrailers(Headers.of())
+    mockResponse = mockResponse.setHeaders(headersOf())
+    mockResponse = mockResponse.setTrailers(headersOf())
     mockResponse = mockResponse.removeHeader("""")
     var body: Buffer? = mockResponse.getBody()
     body = mockResponse.getBody()
@@ -718,7 +720,7 @@ class KotlinSourceModernTest {
     val bodyDelay: Long = mockResponse.getBodyDelay(TimeUnit.SECONDS)
     mockResponse = mockResponse.setHeadersDelay(0L, TimeUnit.SECONDS)
     val headersDelay: Long = mockResponse.getHeadersDelay(TimeUnit.SECONDS)
-    mockResponse = mockResponse.withPush(PushPromise("""", """", Headers.of(), MockResponse()))
+    mockResponse = mockResponse.withPush(PushPromise("""", """", headersOf(), MockResponse()))
     var pushPromises: List<PushPromise> = mockResponse.pushPromises
     pushPromises = mockResponse.pushPromises
     mockResponse = mockResponse.withSettings(Settings())
@@ -786,7 +788,7 @@ class KotlinSourceModernTest {
   fun multipartBodyPart() {
     val requestBody: RequestBody = """".toRequestBody(null)
     var part: MultipartBody.Part = MultipartBody.Part.create(null, requestBody)
-    part = MultipartBody.Part.create(Headers.of(), requestBody)
+    part = MultipartBody.Part.create(headersOf(), requestBody)
     part = MultipartBody.Part.create(requestBody)
     part = MultipartBody.Part.createFormData("""", """")
     part = MultipartBody.Part.createFormData("""", """", requestBody)
@@ -802,7 +804,7 @@ class KotlinSourceModernTest {
     builder = MultipartBody.Builder("""")
     builder = builder.setType("""".toMediaType())
     builder = builder.addPart(requestBody)
-    builder = builder.addPart(Headers.of(), requestBody)
+    builder = builder.addPart(headersOf(), requestBody)
     builder = builder.addPart(null, requestBody)
     builder = builder.addFormDataPart("""", """")
     builder = builder.addFormDataPart("""", """", requestBody)
@@ -916,7 +918,7 @@ class KotlinSourceModernTest {
 
   @Test @Ignore
   fun pushPromise() {
-    val pushPromise: PushPromise = PushPromise("""", """", Headers.of(), MockResponse())
+    val pushPromise: PushPromise = PushPromise("""", """", headersOf(), MockResponse())
     val method: String = pushPromise.method
     val path: String = pushPromise.path
     val headers: Headers = pushPromise.headers
@@ -935,7 +937,7 @@ class KotlinSourceModernTest {
     }
     queueDispatcher = QueueDispatcher()
     var mockResponse: MockResponse = queueDispatcher.dispatch(
-        RecordedRequest("""", Headers.of(), listOf(), 0L, Buffer(), 0, Socket()))
+        RecordedRequest("""", headersOf(), listOf(), 0L, Buffer(), 0, Socket()))
     mockResponse = queueDispatcher.peek()
     queueDispatcher.enqueueResponse(MockResponse())
     queueDispatcher.shutdown()
@@ -946,8 +948,8 @@ class KotlinSourceModernTest {
   @Test @Ignore
   fun recordedRequest() {
     var recordedRequest: RecordedRequest = RecordedRequest(
-        """", Headers.of(), listOf(), 0L, Buffer(), 0, Socket())
-    recordedRequest = RecordedRequest("""", Headers.of(), listOf(), 0L, Buffer(), 0, Socket())
+        """", headersOf(), listOf(), 0L, Buffer(), 0, Socket())
+    recordedRequest = RecordedRequest("""", headersOf(), listOf(), 0L, Buffer(), 0, Socket())
     var requestUrl: HttpUrl? = recordedRequest.requestUrl
     var requestLine: String = recordedRequest.requestLine
     var method: String? = recordedRequest.method
@@ -1001,7 +1003,7 @@ class KotlinSourceModernTest {
     builder = builder.header("""", """")
     builder = builder.addHeader("""", """")
     builder = builder.removeHeader("""")
-    builder = builder.headers(Headers.of())
+    builder = builder.headers(headersOf())
     builder = builder.cacheControl(CacheControl.FORCE_CACHE)
     builder = builder.get()
     builder = builder.head()
@@ -1083,7 +1085,7 @@ class KotlinSourceModernTest {
     builder = builder.header("""", """")
     builder = builder.addHeader("""", """")
     builder = builder.removeHeader("""")
-    builder = builder.headers(Headers.of())
+    builder = builder.headers(headersOf())
     builder = builder.body("""".toResponseBody(null))
     builder = builder.body(null)
     builder = builder.networkResponse(Response.Builder().build())
@@ -1228,4 +1230,4 @@ class KotlinSourceModernTest {
   private fun newRoute(): Route {
     return Route(newAddress(), Proxy.NO_PROXY, InetSocketAddress.createUnresolved("""", 0))
   }
-}
\ No newline at end of file
+}",Update Headers factories to be idiomatic Kotlin,1
"diff --git a/spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java b/spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java
index cad28903a6..c28a2cf269 100644
--- a/spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java
+++ b/spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java
@@ -26,6 +26,7 @@ import java.net.URI;
 import java.net.URL;
 import java.nio.charset.Charset;
 import java.nio.file.Path;
+import java.time.ZoneId;
 import java.util.Collection;
 import java.util.Currency;
 import java.util.HashMap;
@@ -89,19 +90,6 @@ import org.springframework.util.ClassUtils;
  */
 public class PropertyEditorRegistrySupport implements PropertyEditorRegistry {
 
-	private static Class<?> zoneIdClass;
-
-	static {
-		try {
-			zoneIdClass = ClassUtils.forName(""java.time.ZoneId"", PropertyEditorRegistrySupport.class.getClassLoader());
-		}
-		catch (ClassNotFoundException ex) {
-			// Java 8 ZoneId class not available
-			zoneIdClass = null;
-		}
-	}
-
-
 	private ConversionService conversionService;
 
 	private boolean defaultEditorsActive = false;
@@ -222,9 +210,7 @@ public class PropertyEditorRegistrySupport implements PropertyEditorRegistry {
 		this.defaultEditors.put(URI.class, new URIEditor());
 		this.defaultEditors.put(URL.class, new URLEditor());
 		this.defaultEditors.put(UUID.class, new UUIDEditor());
-		if (zoneIdClass != null) {
-			this.defaultEditors.put(zoneIdClass, new ZoneIdEditor());
-		}
+		this.defaultEditors.put(ZoneId.class, new ZoneIdEditor());
 
 		// Default instances of collection editors.
 		// Can be overridden by registering custom instances of those as custom editors.
diff --git a/spring-context/src/main/java/org/springframework/format/support/DefaultFormattingConversionService.java b/spring-context/src/main/java/org/springframework/format/support/DefaultFormattingConversionService.java
index 2c7c60a041..ed7194c7cb 100644
--- a/spring-context/src/main/java/org/springframework/format/support/DefaultFormattingConversionService.java
+++ b/spring-context/src/main/java/org/springframework/format/support/DefaultFormattingConversionService.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2015 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the ""License"");
  * you may not use this file except in compliance with the License.
@@ -21,10 +21,10 @@ import org.springframework.format.FormatterRegistry;
 import org.springframework.format.datetime.DateFormatterRegistrar;
 import org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar;
 import org.springframework.format.datetime.standard.DateTimeFormatterRegistrar;
+import org.springframework.format.number.NumberFormatAnnotationFormatterFactory;
 import org.springframework.format.number.money.CurrencyUnitFormatter;
 import org.springframework.format.number.money.Jsr354NumberFormatAnnotationFormatterFactory;
 import org.springframework.format.number.money.MonetaryAmountFormatter;
-import org.springframework.format.number.NumberFormatAnnotationFormatterFactory;
 import org.springframework.util.ClassUtils;
 import org.springframework.util.StringValueResolver;
 
@@ -49,9 +49,6 @@ public class DefaultFormattingConversionService extends FormattingConversionServ
 	private static final boolean jsr354Present = ClassUtils.isPresent(
 			""javax.money.MonetaryAmount"", DefaultFormattingConversionService.class.getClassLoader());
 
-	private static final boolean jsr310Present = ClassUtils.isPresent(
-			""java.time.LocalDate"", DefaultFormattingConversionService.class.getClassLoader());
-
 	private static final boolean jodaTimePresent = ClassUtils.isPresent(
 			""org.joda.time.LocalDate"", DefaultFormattingConversionService.class.getClassLoader());
 
@@ -112,10 +109,10 @@ public class DefaultFormattingConversionService extends FormattingConversionServ
 		}
 
 		// Default handling of date-time values
-		if (jsr310Present) {
-			// just handling JSR-310 specific date and time types
-			new DateTimeFormatterRegistrar().registerFormatters(formatterRegistry);
-		}
+
+		// just handling JSR-310 specific date and time types
+		new DateTimeFormatterRegistrar().registerFormatters(formatterRegistry);
+
 		if (jodaTimePresent) {
 			// handles Joda-specific types as well as Date, Calendar, Long
 			new JodaTimeFormatterRegistrar().registerFormatters(formatterRegistry);
diff --git a/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java b/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java
index 2cc1c5b3fa..1530b8daad 100644
--- a/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java
+++ b/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java
@@ -23,7 +23,6 @@ import java.util.UUID;
 
 import org.springframework.core.convert.ConversionService;
 import org.springframework.core.convert.converter.ConverterRegistry;
-import org.springframework.util.ClassUtils;
 
 /**
  * A specialization of {@link GenericConversionService} configured by default with
@@ -40,11 +39,6 @@ import org.springframework.util.ClassUtils;
  */
 public class DefaultConversionService extends GenericConversionService {
 
-	/** Java 8's java.time package available? */
-	private static final boolean jsr310Available =
-			ClassUtils.isPresent(""java.time.ZoneId"", DefaultConversionService.class.getClassLoader());
-
-
 	/**
 	 * Create a new {@code DefaultConversionService} with the set of
 	 * {@linkplain DefaultConversionService#addDefaultConverters(ConverterRegistry) default converters}.
@@ -67,9 +61,9 @@ public class DefaultConversionService extends GenericConversionService {
 		addCollectionConverters(converterRegistry);
 
 		converterRegistry.addConverter(new ByteBufferConverter((ConversionService) converterRegistry));
-		if (jsr310Available) {
-			Jsr310ConverterRegistrar.registerJsr310Converters(converterRegistry);
-		}
+		converterRegistry.addConverter(new StringToTimeZoneConverter());
+		converterRegistry.addConverter(new ZoneIdToTimeZoneConverter());
+		converterRegistry.addConverter(new ZonedDateTimeToCalendarConverter());
 
 		converterRegistry.addConverter(new ObjectToObjectConverter());
 		converterRegistry.addConverter(new IdToEntityConverter((ConversionService) converterRegistry));
@@ -149,17 +143,4 @@ public class DefaultConversionService extends GenericConversionService {
 		converterRegistry.addConverter(UUID.class, String.class, new ObjectToStringConverter());
 	}
 
-
-	/**
-	 * Inner class to avoid a hard-coded dependency on Java 8's {@code java.time} package.
-	 */
-	private static final class Jsr310ConverterRegistrar {
-
-		public static void registerJsr310Converters(ConverterRegistry converterRegistry) {
-			converterRegistry.addConverter(new StringToTimeZoneConverter());
-			converterRegistry.addConverter(new ZoneIdToTimeZoneConverter());
-			converterRegistry.addConverter(new ZonedDateTimeToCalendarConverter());
-		}
-	}
-
 }
diff --git a/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java
index e840fa2ff6..b115d854d7 100644
--- a/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java
+++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java
@@ -753,16 +753,13 @@ public class Jackson2ObjectMapperBuilder {
 			// jackson-datatype-jdk8 not available
 		}
 
-		// Java 8 java.time package present?
-		if (ClassUtils.isPresent(""java.time.LocalDate"", this.moduleClassLoader)) {
-			try {
-				Class<? extends Module> javaTimeModule = (Class<? extends Module>)
-						ClassUtils.forName(""com.fasterxml.jackson.datatype.jsr310.JavaTimeModule"", this.moduleClassLoader);
-				objectMapper.registerModule(BeanUtils.instantiateClass(javaTimeModule));
-			}
-			catch (ClassNotFoundException ex) {
-				// jackson-datatype-jsr310 not available
-			}
+		try {
+			Class<? extends Module> javaTimeModule = (Class<? extends Module>)
+					ClassUtils.forName(""com.fasterxml.jackson.datatype.jsr310.JavaTimeModule"", this.moduleClassLoader);
+			objectMapper.registerModule(BeanUtils.instantiateClass(javaTimeModule));
+		}
+		catch (ClassNotFoundException ex) {
+			// jackson-datatype-jsr310 not available
 		}
 
 		// Joda-Time present?
diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletRequestMethodArgumentResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletRequestMethodArgumentResolver.java
index a87660869b..b2c561a272 100644
--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletRequestMethodArgumentResolver.java
+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletRequestMethodArgumentResolver.java
@@ -70,7 +70,7 @@ public class ServletRequestMethodArgumentResolver implements HandlerMethodArgume
 				Principal.class.isAssignableFrom(paramType) ||
 				Locale.class == paramType ||
 				TimeZone.class == paramType ||
-				""java.time.ZoneId"".equals(paramType.getName()) ||
+				ZoneId.class == paramType ||
 				InputStream.class.isAssignableFrom(paramType) ||
 				Reader.class.isAssignableFrom(paramType) ||
 				HttpMethod.class == paramType);
@@ -110,8 +110,9 @@ public class ServletRequestMethodArgumentResolver implements HandlerMethodArgume
 			TimeZone timeZone = RequestContextUtils.getTimeZone(request);
 			return (timeZone != null ? timeZone : TimeZone.getDefault());
 		}
-		else if (""java.time.ZoneId"".equals(paramType.getName())) {
-			return ZoneIdResolver.resolveZoneId(request);
+		else if (ZoneId.class == paramType) {
+			TimeZone timeZone = RequestContextUtils.getTimeZone(request);
+			return (timeZone != null ? timeZone.toZoneId() : ZoneId.systemDefault());
 		}
 		else if (InputStream.class.isAssignableFrom(paramType)) {
 			return request.getInputStream();
@@ -126,16 +127,4 @@ public class ServletRequestMethodArgumentResolver implements HandlerMethodArgume
 		}
 	}
 
-
-	/**
-	 * Inner class to avoid a hard-coded dependency on Java 8's {@link java.time.ZoneId}.
-	 */
-	private static class ZoneIdResolver {
-
-		public static Object resolveZoneId(HttpServletRequest request) {
-			TimeZone timeZone = RequestContextUtils.getTimeZone(request);
-			return (timeZone != null ? timeZone.toZoneId() : ZoneId.systemDefault());
-		}
-	}
-
 }",Add docker system prune to inventory job .,0
"diff --git a/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/AbstractApplicationContextRunner.java b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/AbstractApplicationContextRunner.java
index cf9e752d0088..567960a51612 100644
--- a/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/AbstractApplicationContextRunner.java
+++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/AbstractApplicationContextRunner.java
@@ -29,6 +29,7 @@
 import org.springframework.boot.test.context.assertj.ApplicationContextAssertProvider;
 import org.springframework.boot.test.util.TestPropertyValues;
 import org.springframework.context.ApplicationContext;
+import org.springframework.context.ApplicationContextInitializer;
 import org.springframework.context.ConfigurableApplicationContext;
 import org.springframework.context.annotation.AnnotationConfigRegistry;
 import org.springframework.core.ResolvableType;
@@ -99,6 +100,8 @@ public abstract class AbstractApplicationContextRunner<SELF extends AbstractAppl
 
 	private final Supplier<C> contextFactory;
 
+	private final List<ApplicationContextInitializer<C>> initializers;
+
 	private final TestPropertyValues environmentProperties;
 
 	private final TestPropertyValues systemProperties;
@@ -114,13 +117,14 @@ public abstract class AbstractApplicationContextRunner<SELF extends AbstractAppl
 	 * @param contextFactory the factory used to create the actual context
 	 */
 	protected AbstractApplicationContextRunner(Supplier<C> contextFactory) {
-		this(contextFactory, TestPropertyValues.empty(), TestPropertyValues.empty(), null,
-				null, Collections.emptyList());
+		this(contextFactory, Collections.emptyList(), TestPropertyValues.empty(),
+				TestPropertyValues.empty(), null, null, Collections.emptyList());
 	}
 
 	/**
 	 * Create a new {@link AbstractApplicationContextRunner} instance.
 	 * @param contextFactory the factory used to create the actual context
+	 * @param initializers the initializers
 	 * @param environmentProperties the environment properties
 	 * @param systemProperties the system properties
 	 * @param classLoader the class loader
@@ -128,6 +132,7 @@ protected AbstractApplicationContextRunner(Supplier<C> contextFactory) {
 	 * @param configurations the configuration
 	 */
 	protected AbstractApplicationContextRunner(Supplier<C> contextFactory,
+			List<ApplicationContextInitializer<C>> initializers,
 			TestPropertyValues environmentProperties, TestPropertyValues systemProperties,
 			ClassLoader classLoader, ApplicationContext parent,
 			List<Configurations> configurations) {
@@ -135,7 +140,9 @@ protected AbstractApplicationContextRunner(Supplier<C> contextFactory,
 		Assert.notNull(environmentProperties, ""EnvironmentProperties must not be null"");
 		Assert.notNull(systemProperties, ""SystemProperties must not be null"");
 		Assert.notNull(configurations, ""Configurations must not be null"");
+		Assert.notNull(initializers, ""Initializers must not be null"");
 		this.contextFactory = contextFactory;
+		this.initializers = Collections.unmodifiableList(initializers);
 		this.environmentProperties = environmentProperties;
 		this.systemProperties = systemProperties;
 		this.classLoader = classLoader;
@@ -143,6 +150,19 @@ protected AbstractApplicationContextRunner(Supplier<C> contextFactory,
 		this.configurations = Collections.unmodifiableList(configurations);
 	}
 
+	/**
+	 * Add a {@link ApplicationContextInitializer} to be called when the context is
+	 * created.
+	 * @param initializer the initializer to add
+	 * @return a new instance with the updated initializers
+	 */
+	public SELF withInitializer(ApplicationContextInitializer<C> initializer) {
+		Assert.notNull(initializer, ""Initializer must not be null"");
+		return newInstance(this.contextFactory, add(this.initializers, initializer),
+				this.environmentProperties, this.systemProperties, this.classLoader,
+				this.parent, this.configurations);
+	}
+
 	/**
 	 * Add the specified {@link Environment} property pairs. Key-value pairs can be
 	 * specified with colon ("":"") or equals (""="") separators. Override matching keys that
@@ -154,9 +174,9 @@ protected AbstractApplicationContextRunner(Supplier<C> contextFactory,
 	 * @see #withSystemProperties(String...)
 	 */
 	public SELF withPropertyValues(String... pairs) {
-		return newInstance(this.contextFactory, this.environmentProperties.and(pairs),
-				this.systemProperties, this.classLoader, this.parent,
-				this.configurations);
+		return newInstance(this.contextFactory, this.initializers,
+				this.environmentProperties.and(pairs), this.systemProperties,
+				this.classLoader, this.parent, this.configurations);
 	}
 
 	/**
@@ -170,9 +190,9 @@ public SELF withPropertyValues(String... pairs) {
 	 * @see #withSystemProperties(String...)
 	 */
 	public SELF withSystemProperties(String... pairs) {
-		return newInstance(this.contextFactory, this.environmentProperties,
-				this.systemProperties.and(pairs), this.classLoader, this.parent,
-				this.configurations);
+		return newInstance(this.contextFactory, this.initializers,
+				this.environmentProperties, this.systemProperties.and(pairs),
+				this.classLoader, this.parent, this.configurations);
 	}
 
 	/**
@@ -184,8 +204,9 @@ public SELF withSystemProperties(String... pairs) {
 	 * @see FilteredClassLoader
 	 */
 	public SELF withClassLoader(ClassLoader classLoader) {
-		return newInstance(this.contextFactory, this.environmentProperties,
-				this.systemProperties, classLoader, this.parent, this.configurations);
+		return newInstance(this.contextFactory, this.initializers,
+				this.environmentProperties, this.systemProperties, classLoader,
+				this.parent, this.configurations);
 	}
 
 	/**
@@ -195,8 +216,9 @@ public SELF withClassLoader(ClassLoader classLoader) {
 	 * @return a new instance with the updated parent
 	 */
 	public SELF withParent(ApplicationContext parent) {
-		return newInstance(this.contextFactory, this.environmentProperties,
-				this.systemProperties, this.classLoader, parent, this.configurations);
+		return newInstance(this.contextFactory, this.initializers,
+				this.environmentProperties, this.systemProperties, this.classLoader,
+				parent, this.configurations);
 	}
 
 	/**
@@ -216,9 +238,9 @@ public SELF withUserConfiguration(Class<?>... configurationClasses) {
 	 */
 	public SELF withConfiguration(Configurations configurations) {
 		Assert.notNull(configurations, ""Configurations must not be null"");
-		return newInstance(this.contextFactory, this.environmentProperties,
-				this.systemProperties, this.classLoader, this.parent,
-				add(this.configurations, configurations));
+		return newInstance(this.contextFactory, this.initializers,
+				this.environmentProperties, this.systemProperties, this.classLoader,
+				this.parent, add(this.configurations, configurations));
 	}
 
 	/**
@@ -238,6 +260,7 @@ private <T> List<T> add(List<T> list, T element) {
 	}
 
 	protected abstract SELF newInstance(Supplier<C> contextFactory,
+			List<ApplicationContextInitializer<C>> initializers,
 			TestPropertyValues environmentProperties, TestPropertyValues systemProperties,
 			ClassLoader classLoader, ApplicationContext parent,
 			List<Configurations> configurations);
@@ -295,6 +318,7 @@ private void configureContext(C context) {
 		if (classes.length > 0) {
 			((AnnotationConfigRegistry) context).register(classes);
 		}
+		this.initializers.forEach((initializer) -> initializer.initialize(context));
 		context.refresh();
 	}
 
diff --git a/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/ApplicationContextRunner.java b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/ApplicationContextRunner.java
index 4b040e1ee8da..a1b393c5610e 100644
--- a/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/ApplicationContextRunner.java
+++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/ApplicationContextRunner.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the ""License"");
  * you may not use this file except in compliance with the License.
@@ -23,6 +23,7 @@
 import org.springframework.boot.test.context.assertj.AssertableApplicationContext;
 import org.springframework.boot.test.util.TestPropertyValues;
 import org.springframework.context.ApplicationContext;
+import org.springframework.context.ApplicationContextInitializer;
 import org.springframework.context.ConfigurableApplicationContext;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
 
@@ -60,21 +61,24 @@ public ApplicationContextRunner(
 
 	private ApplicationContextRunner(
 			Supplier<ConfigurableApplicationContext> contextFactory,
+			List<ApplicationContextInitializer<ConfigurableApplicationContext>> initializers,
 			TestPropertyValues environmentProperties, TestPropertyValues systemProperties,
 			ClassLoader classLoader, ApplicationContext parent,
 			List<Configurations> configurations) {
-		super(contextFactory, environmentProperties, systemProperties, classLoader,
-				parent, configurations);
+		super(contextFactory, initializers, environmentProperties, systemProperties,
+				classLoader, parent, configurations);
 	}
 
 	@Override
 	protected ApplicationContextRunner newInstance(
 			Supplier<ConfigurableApplicationContext> contextFactory,
+			List<ApplicationContextInitializer<ConfigurableApplicationContext>> initializers,
 			TestPropertyValues environmentProperties, TestPropertyValues systemProperties,
 			ClassLoader classLoader, ApplicationContext parent,
 			List<Configurations> configurations) {
-		return new ApplicationContextRunner(contextFactory, environmentProperties,
-				systemProperties, classLoader, parent, configurations);
+		return new ApplicationContextRunner(contextFactory, initializers,
+				environmentProperties, systemProperties, classLoader, parent,
+				configurations);
 	}
 
 }
diff --git a/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/ReactiveWebApplicationContextRunner.java b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/ReactiveWebApplicationContextRunner.java
index c1fea9cd271d..2df945cc3a65 100644
--- a/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/ReactiveWebApplicationContextRunner.java
+++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/ReactiveWebApplicationContextRunner.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the ""License"");
  * you may not use this file except in compliance with the License.
@@ -25,6 +25,7 @@
 import org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebApplicationContext;
 import org.springframework.boot.web.reactive.context.ConfigurableReactiveWebApplicationContext;
 import org.springframework.context.ApplicationContext;
+import org.springframework.context.ApplicationContextInitializer;
 
 /**
  * An {@link AbstractApplicationContextRunner ApplicationContext runner} for a
@@ -60,20 +61,22 @@ public ReactiveWebApplicationContextRunner(
 
 	private ReactiveWebApplicationContextRunner(
 			Supplier<ConfigurableReactiveWebApplicationContext> contextFactory,
+			List<ApplicationContextInitializer<ConfigurableReactiveWebApplicationContext>> initializers,
 			TestPropertyValues environmentProperties, TestPropertyValues systemProperties,
 			ClassLoader classLoader, ApplicationContext parent,
 			List<Configurations> configurations) {
-		super(contextFactory, environmentProperties, systemProperties, classLoader,
-				parent, configurations);
+		super(contextFactory, initializers, environmentProperties, systemProperties,
+				classLoader, parent, configurations);
 	}
 
 	@Override
 	protected ReactiveWebApplicationContextRunner newInstance(
 			Supplier<ConfigurableReactiveWebApplicationContext> contextFactory,
+			List<ApplicationContextInitializer<ConfigurableReactiveWebApplicationContext>> initializers,
 			TestPropertyValues environmentProperties, TestPropertyValues systemProperties,
 			ClassLoader classLoader, ApplicationContext parent,
 			List<Configurations> configurations) {
-		return new ReactiveWebApplicationContextRunner(contextFactory,
+		return new ReactiveWebApplicationContextRunner(contextFactory, initializers,
 				environmentProperties, systemProperties, classLoader, parent,
 				configurations);
 	}
diff --git a/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/WebApplicationContextRunner.java b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/WebApplicationContextRunner.java
index fd9270b4ae63..e104390f86a2 100644
--- a/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/WebApplicationContextRunner.java
+++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/WebApplicationContextRunner.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the ""License"");
  * you may not use this file except in compliance with the License.
@@ -23,6 +23,7 @@
 import org.springframework.boot.test.context.assertj.AssertableWebApplicationContext;
 import org.springframework.boot.test.util.TestPropertyValues;
 import org.springframework.context.ApplicationContext;
+import org.springframework.context.ApplicationContextInitializer;
 import org.springframework.mock.web.MockServletContext;
 import org.springframework.web.context.ConfigurableWebApplicationContext;
 import org.springframework.web.context.WebApplicationContext;
@@ -64,21 +65,24 @@ public WebApplicationContextRunner(
 
 	private WebApplicationContextRunner(
 			Supplier<ConfigurableWebApplicationContext> contextFactory,
+			List<ApplicationContextInitializer<ConfigurableWebApplicationContext>> initializers,
 			TestPropertyValues environmentProperties, TestPropertyValues systemProperties,
 			ClassLoader classLoader, ApplicationContext parent,
 			List<Configurations> configurations) {
-		super(contextFactory, environmentProperties, systemProperties, classLoader,
-				parent, configurations);
+		super(contextFactory, initializers, environmentProperties, systemProperties,
+				classLoader, parent, configurations);
 	}
 
 	@Override
 	protected WebApplicationContextRunner newInstance(
 			Supplier<ConfigurableWebApplicationContext> contextFactory,
+			List<ApplicationContextInitializer<ConfigurableWebApplicationContext>> initializers,
 			TestPropertyValues environmentProperties, TestPropertyValues systemProperties,
 			ClassLoader classLoader, ApplicationContext parent,
 			List<Configurations> configurations) {
-		return new WebApplicationContextRunner(contextFactory, environmentProperties,
-				systemProperties, classLoader, parent, configurations);
+		return new WebApplicationContextRunner(contextFactory, initializers,
+				environmentProperties, systemProperties, classLoader, parent,
+				configurations);
 	}
 
 	/**
diff --git a/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/context/runner/AbstractApplicationContextRunnerTests.java b/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/context/runner/AbstractApplicationContextRunnerTests.java
index fe5619321e48..ee6ef51d5aa2 100644
--- a/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/context/runner/AbstractApplicationContextRunnerTests.java
+++ b/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/context/runner/AbstractApplicationContextRunnerTests.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the ""License"");
  * you may not use this file except in compliance with the License.
@@ -18,6 +18,7 @@
 
 import java.io.IOException;
 import java.util.UUID;
+import java.util.concurrent.atomic.AtomicBoolean;
 
 import com.google.gson.Gson;
 import org.junit.Rule;
@@ -50,6 +51,14 @@ public abstract class AbstractApplicationContextRunnerTests<T extends AbstractAp
 	@Rule
 	public ExpectedException thrown = ExpectedException.none();
 
+	@Test
+	public void runWithInitializerShouldInitialize() {
+		AtomicBoolean called = new AtomicBoolean();
+		get().withInitializer((context) -> called.set(true)).run((context) -> {
+		});
+		assertThat(called).isTrue();
+	}
+
 	@Test
 	public void runWithSystemPropertiesShouldSetAndRemoveProperties() {
 		String key = ""test."" + UUID.randomUUID();",Add initializer support <enter>  <enter> Add `ApplicationContextInitializer` support to <enter> `ApplicationContextRunner`.,1
"diff --git a/src/main/java/io/reactivex/functions/Consumer.java b/src/main/java/io/reactivex/functions/Consumer.java
index deb4ae804..ff10bbb24 100644
--- a/src/main/java/io/reactivex/functions/Consumer.java
+++ b/src/main/java/io/reactivex/functions/Consumer.java
@@ -13,8 +13,6 @@
 
 package io.reactivex.functions;
 
-import io.reactivex.annotations.NonNull;
-
 /**
  * A functional interface (callback) that accepts a single value.
  * @param <T> the value type
@@ -25,5 +23,5 @@ public interface Consumer<T> {
      * @param t the value
      * @throws Exception on error
      */
-    void accept(@NonNull T t) throws Exception;
+    void accept(T t) throws Exception;
 }",added deploy profile,0
"diff --git a/hazelcast-jet-kafka/src/main/java/com/hazelcast/jet/connector/kafka/ReadKafkaP.java b/hazelcast-jet-kafka/src/main/java/com/hazelcast/jet/connector/kafka/ReadKafkaP.java
index 7991e8b9c1..68b36094ec 100644
--- a/hazelcast-jet-kafka/src/main/java/com/hazelcast/jet/connector/kafka/ReadKafkaP.java
+++ b/hazelcast-jet-kafka/src/main/java/com/hazelcast/jet/connector/kafka/ReadKafkaP.java
@@ -21,22 +21,21 @@ import com.hazelcast.jet.Distributed.Function;
 import com.hazelcast.jet.Processor;
 import com.hazelcast.jet.ProcessorMetaSupplier;
 import com.hazelcast.jet.ProcessorSupplier;
+import com.hazelcast.jet.Traverser;
 import com.hazelcast.jet.impl.util.Util;
 import com.hazelcast.nio.Address;
 import com.hazelcast.util.Preconditions;
-import org.apache.kafka.clients.consumer.ConsumerRecord;
-import org.apache.kafka.clients.consumer.ConsumerRecords;
 import org.apache.kafka.clients.consumer.KafkaConsumer;
-import org.apache.kafka.common.TopicPartition;
 
 import javax.annotation.Nonnull;
 import java.io.Closeable;
-import java.util.AbstractMap;
 import java.util.Arrays;
-import java.util.Iterator;
 import java.util.List;
+import java.util.Map.Entry;
 import java.util.Properties;
 
+import static com.hazelcast.jet.Traversers.traverseIterable;
+import static com.hazelcast.jet.Util.entry;
 import static java.util.stream.Collectors.toList;
 import static java.util.stream.IntStream.range;
 
@@ -52,7 +51,8 @@ public final class ReadKafkaP<K, V> extends AbstractProcessor implements Closeab
     private static final int POLL_TIMEOUT_MS = 100;
     private final Properties properties;
     private final String[] topicIds;
-    private KafkaConsumer consumer;
+    private KafkaConsumer<K, V> consumer;
+    private Traverser<Entry<K, V>> traverser;
 
     private ReadKafkaP(String[] topicIds, Properties properties) {
         this.topicIds = topicIds;
@@ -85,6 +85,7 @@ public final class ReadKafkaP<K, V> extends AbstractProcessor implements Closeab
         properties.put(""enable.auto.commit"", false);
         consumer = new KafkaConsumer<>(properties);
         consumer.subscribe(Arrays.asList(topicIds));
+        traverser = () -> null;
     }
 
     @Override
@@ -94,41 +95,13 @@ public final class ReadKafkaP<K, V> extends AbstractProcessor implements Closeab
 
     @Override
     public boolean complete() {
-        ConsumerRecords<K, V> records = consumer.poll(POLL_TIMEOUT_MS);
-        if (records.isEmpty()) {
-            return false;
+        if (emitCooperatively(traverser)) {
+            consumer.commitSync();
+            traverser = traverseIterable(consumer.poll(POLL_TIMEOUT_MS)).map(r -> entry(r.key(), r.value()));
         }
-        Iterator<TopicPartition> iterator = records.partitions().iterator();
-        while (iterator.hasNext()) {
-            TopicPartition topicPartition = iterator.next();
-            List<ConsumerRecord<K, V>> partitionRecords = records.records(topicPartition);
-            for (ConsumerRecord<K, V> record : partitionRecords) {
-                K key = record.key();
-                V value = record.value();
-                emit(new AbstractMap.SimpleImmutableEntry<>(key, value));
-                if (getOutbox().isHighWater()) {
-                    consumer.seek(topicPartition, record.offset() + 1);
-                    seekToTheBeginning(records, iterator);
-                    consumer.commitSync();
-                    return false;
-                }
-            }
-        }
-        consumer.commitSync();
         return false;
     }
 
-    private void seekToTheBeginning(ConsumerRecords<K, V> records, Iterator<TopicPartition> iterator) {
-        while (iterator.hasNext()) {
-            TopicPartition topicPartition = iterator.next();
-            List<ConsumerRecord<K, V>> partitionRecords = records.records(topicPartition);
-            if (!partitionRecords.isEmpty()) {
-                long offset = partitionRecords.get(0).offset();
-                consumer.seek(topicPartition, offset);
-            }
-        }
-    }
-
     @Override
     public void close() {
         consumer.close();
@@ -146,10 +119,6 @@ public final class ReadKafkaP<K, V> extends AbstractProcessor implements Closeab
             this.properties.put(""enable.auto.commit"", false);
         }
 
-        @Override
-        public void init(@Nonnull Context context) {
-        }
-
         @Override @Nonnull
         public Function<Address, ProcessorSupplier> get(@Nonnull List<Address> addresses) {
             return address -> new Supplier<>(topicIds, properties);",fixed a few more bugs . . git - svn - id : https : / / hudson . dev . java . net / svn / hudson / trunk / hudson / main @ 1044 71c3de6d - 444a - 0410 - be80 - ed276b4c234a,0
"diff --git a/dropwizard-http2/pom.xml b/dropwizard-http2/pom.xml
index b69a786ee..59600a69a 100644
--- a/dropwizard-http2/pom.xml
+++ b/dropwizard-http2/pom.xml
@@ -13,7 +13,7 @@
 
     <properties>
         <!-- Default alpn-boot version. See <profiles> for specific profiles. -->
-        <alpn-boot.version>8.1.11.v20170118</alpn-boot.version>
+        <alpn-boot.version>8.1.12.v20180117</alpn-boot.version>
     </properties>
 
     <build>
@@ -459,5 +459,53 @@
                 <alpn-boot.version>8.1.11.v20170118</alpn-boot.version>
             </properties>
         </profile>
+        <profile>
+            <id>jdk-1.8.0_151</id>
+            <activation>
+                <property>
+                    <name>java.version</name>
+                    <value>1.8.0_151</value>
+                </property>
+            </activation>
+            <properties>
+                <alpn-boot.version>8.1.11.v20170118</alpn-boot.version>
+            </properties>
+        </profile>
+        <profile>
+            <id>jdk-1.8.0_152</id>
+            <activation>
+                <property>
+                    <name>java.version</name>
+                    <value>1.8.0_152</value>
+                </property>
+            </activation>
+            <properties>
+                <alpn-boot.version>8.1.11.v20170118</alpn-boot.version>
+            </properties>
+        </profile>
+        <profile>
+            <id>jdk-1.8.0_161</id>
+            <activation>
+                <property>
+                    <name>java.version</name>
+                    <value>1.8.0_161</value>
+                </property>
+            </activation>
+            <properties>
+                <alpn-boot.version>8.1.12.v20180117</alpn-boot.version>
+            </properties>
+",Return new StringBuffer instead of null ( and avoid checking for null just to create a new StringBuffer ),0
"diff --git a/retrofit/pom.xml b/retrofit/pom.xml
index d103d715f3..a06ae3ac3c 100644
--- a/retrofit/pom.xml
+++ b/retrofit/pom.xml
@@ -75,6 +75,26 @@
 
   <build>
     <plugins>
+      <plugin>
+        <groupId>org.jetbrains.kotlin</groupId>
+        <artifactId>kotlin-maven-plugin</artifactId>
+        <executions>
+          <execution>
+            <id>compile</id>
+            <phase>process-sources</phase>
+            <goals>
+              <goal>compile</goal>
+            </goals>
+          </execution>
+          <execution>
+            <id>test-compile</id>
+            <phase>test-compile</phase>
+            <goals>
+              <goal>test-compile</goal>
+            </goals>
+          </execution>
+        </executions>
+      </plugin>
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-jar-plugin</artifactId>
diff --git a/retrofit/src/main/java/retrofit2/KotlinExtensions.kt b/retrofit/src/main/java/retrofit2/KotlinExtensions.kt
new file mode 100644
index 0000000000..8b599cfb3e
--- /dev/null
+++ b/retrofit/src/main/java/retrofit2/KotlinExtensions.kt
@@ -0,0 +1,22 @@
+/*
+ * Copyright (C) 2018 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+// Hide the class from Java consumers.
+@file:JvmName(""-KotlinExtensions"")
+
+package retrofit2
+
+inline fun <reified T> Retrofit.create(): T = create(T::class.java)
diff --git a/retrofit/src/main/resources/META-INF/proguard/retrofit2.pro b/retrofit/src/main/resources/META-INF/proguard/retrofit2.pro
index 2a7e06beda..e009b6473a 100644
--- a/retrofit/src/main/resources/META-INF/proguard/retrofit2.pro
+++ b/retrofit/src/main/resources/META-INF/proguard/retrofit2.pro
@@ -14,3 +14,6 @@
 
 # Guarded by a NoClassDefFoundError try/catch and only used when on the classpath.
 -dontwarn kotlin.Unit
+
+# Top-level functions that can only be used by Kotlin.
+-dontwarn retrofit2.-KotlinExtensions
diff --git a/retrofit/src/test/java/retrofit2/KotlinExtensionsTest.kt b/retrofit/src/test/java/retrofit2/KotlinExtensionsTest.kt
new file mode 100644
index 0000000000..b8196c7e63
--- /dev/null
+++ b/retrofit/src/test/java/retrofit2/KotlinExtensionsTest.kt
@@ -0,0 +1,35 @@
+/*
+ * Copyright (C) 2018 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit2
+
+import okhttp3.mockwebserver.MockWebServer
+import org.junit.Assert.assertNotNull
+import org.junit.Rule
+import org.junit.Test
+
+class KotlinExtensionsTest {
+  @get:Rule val server = MockWebServer()
+
+  interface Empty
+
+  @Test fun reifiedCreate() {
+    val retrofit = Retrofit.Builder()
+        .baseUrl(server.url(""/""))
+        .build()
+
+    assertNotNull(retrofit.create<Empty>())
+  }
+}",Add reified create extension for Kotlin,1
"diff --git a/docs/reference/api-conventions.asciidoc b/docs/reference/api-conventions.asciidoc
index 9e0578ee528..bd556914502 100644
--- a/docs/reference/api-conventions.asciidoc
+++ b/docs/reference/api-conventions.asciidoc
@@ -1,8 +1,6 @@
 [[api-conventions]]
 = API conventions
 
-[partintro]
---
 The *Elasticsearch* REST APIs are exposed using <<modules-http,JSON over HTTP>>.
 
 The conventions listed in this chapter can be applied throughout the REST
@@ -13,8 +11,6 @@ API, unless otherwise specified.
 * <<common-options>>
 * <<url-access-control>>
 
---
-
 [[multi-index]]
 == Multiple Indices
 
diff --git a/docs/reference/cat.asciidoc b/docs/reference/cat.asciidoc
index 743bae7b856..28003ea04d9 100644
--- a/docs/reference/cat.asciidoc
+++ b/docs/reference/cat.asciidoc
@@ -1,9 +1,6 @@
 [[cat]]
 = cat APIs
 
-[partintro]
---
-
 [""float"",id=""intro""]
 == Introduction
 
@@ -210,8 +207,6 @@ sushi_california_roll [*avocado*]    1     1
 pizza_hawaiian        [*pineapples*] 1
 --------------------------------------------------
 
---
-
 include::cat/alias.asciidoc[]
 
 include::cat/allocation.asciidoc[]
diff --git a/docs/reference/cluster.asciidoc b/docs/reference/cluster.asciidoc
index da5ce2b4102..a53d59e8248 100644
--- a/docs/reference/cluster.asciidoc
+++ b/docs/reference/cluster.asciidoc
@@ -1,8 +1,6 @@
 [[cluster]]
 = Cluster APIs
 
-[partintro]
---
 [""float"",id=""cluster-nodes""]
 == Node specification
 
@@ -81,7 +79,6 @@ GET /_nodes/ra*:2
 GET /_nodes/ra*:2*
 --------------------------------------------------
 // CONSOLE
---
 
 include::cluster/health.asciidoc[]
 
diff --git a/docs/reference/docs.asciidoc b/docs/reference/docs.asciidoc
index 5c4c471b0a1..9490e0cd9ff 100644
--- a/docs/reference/docs.asciidoc
+++ b/docs/reference/docs.asciidoc
@@ -1,9 +1,6 @@
 [[docs]]
 = Document APIs
 
-[partintro]
---
-
 This section starts with a short introduction to Elasticsearch's <<docs-replication,data replication model>>, followed by a
 detailed description of the following CRUD APIs:
 
@@ -23,8 +20,6 @@ detailed description of the following CRUD APIs:
 NOTE: All CRUD APIs are single-index APIs. The `index` parameter accepts a single
 index name, or an `alias` which points to a single index.
 
---
-
 include::docs/data-replication.asciidoc[]
 
 include::docs/index_.asciidoc[]
diff --git a/docs/reference/index.asciidoc b/docs/reference/index.asciidoc
index b2a1a0d51d7..fafbf074610 100644
--- a/docs/reference/index.asciidoc
+++ b/docs/reference/index.asciidoc
@@ -28,20 +28,8 @@ include::setup/bootstrap-checks-xes.asciidoc[]
 
 include::upgrade.asciidoc[]
 
-include::api-conventions.asciidoc[]
-
-include::docs.asciidoc[]
-
-include::search.asciidoc[]
-
 include::aggregations.asciidoc[]
 
-include::indices.asciidoc[]
-
-include::cat.asciidoc[]
-
-include::cluster.asciidoc[]
-
 include::query-dsl.asciidoc[]
 
 include::scripting.asciidoc[]
diff --git a/docs/reference/indices.asciidoc b/docs/reference/indices.asciidoc
index cda7c41cb42..3d5473b06c3 100644
--- a/docs/reference/indices.asciidoc
+++ b/docs/reference/indices.asciidoc
@@ -1,9 +1,7 @@
 [[indices]]
 = Indices APIs
 
-[partintro]
---
-The indices APIs are used to manage individual indices,
+Index APIs are used to manage individual indices,
 index settings, aliases, mappings, and index templates.
 
 [float]
@@ -18,6 +16,9 @@ index settings, aliases, mappings, and index templates.
 * <<indices-shrink-index>>
 * <<indices-split-index>>
 * <<indices-rollover-index>>
+* <<freeze-index-api>>
+* <<unfreeze-index-api>>
+
 
 [float]
 [[mapping-management]]
@@ -57,8 +58,6 @@ index settings, aliases, mappings, and index templates.
 * <<indices-flush>>
 * <<indices-forcemerge>>
 
---
-
 include::indices/create-index.asciidoc[]
 
 include::indices/delete-index.asciidoc[]
@@ -75,6 +74,12 @@ include::indices/split-index.asciidoc[]
 
 include::indices/rollover-index.asciidoc[]
 
+:leveloffset: -1
+include::indices/apis/freeze.asciidoc[]
+
+include::indices/apis/unfreeze.asciidoc[]
+
+:leveloffset: +1
 include::indices/put-mapping.asciidoc[]
 
 include::indices/get-mapping.asciidoc[]
diff --git a/docs/reference/indices/analyze.asciidoc b/docs/reference/indices/analyze.asciidoc
index a0d0f3c5b24..45d523db713 100644
--- a/docs/reference/indices/analyze.asciidoc
+++ b/docs/reference/indices/analyze.asciidoc
@@ -139,6 +139,7 @@ GET _analyze
 --------------------------------------------------
 // CONSOLE
 
+[[explain-analyze-api]]
 === Explain Analyze
 
 If you want to get more advanced details, set `explain` to `true` (defaults to `false`). It will output all token attributes for each token.
diff --git a/docs/reference/indices/apis/index.asciidoc b/docs/reference/indices/apis/index.asciidoc
deleted file mode 100644
index 45060427062..00000000000
--- a/docs/reference/indices/apis/index.asciidoc
+++ /dev/null
@@ -1,11 +0,0 @@
-[[index-apis]]
-== Index APIs
-
-The index APIs are used to manage individual indices.
-
-* <<freeze-index-api>>, <<unfreeze-index-api>>
-
-See also <<indices>>.
-
-include::freeze.asciidoc[]
-include::unfreeze.asciidoc[]
\ No newline at end of file
diff --git a/docs/reference/indices/flush.asciidoc b/docs/reference/indices/flush.asciidoc
index ea433fa9cbd..8abe2693faa 100644
--- a/docs/reference/indices/flush.asciidoc
+++ b/docs/reference/indices/flush.asciidoc
@@ -47,7 +47,7 @@ POST _flush
 // CONSOLE
 // TEST[s/^/PUT kimchy\nPUT elasticsearch\n/]
 
-[[indices-synced-flush]]
+[[synced-flush-api]]
 === Synced Flush
 
 Elasticsearch tracks the indexing activity of each shard. Shards that have not
diff --git a/docs/reference/redirects.asciidoc b/docs/reference/redirects.asciidoc
index 1985229f065..c030e49cc36 100644
--- a/docs/reference/redirects.asciidoc
+++ b/docs/reference/redirects.asciidoc
@@ -626,6 +626,142 @@ See <<ml-get-filter>> and
 See <<ml-get-calendar-event>> and 
 {stack-ov}/ml-calendars.html[Calendars and scheduled events].
 
+[role=""exclude"",id=""index-apis""]
+=== Index APIs
+{es} index APIs are now documented in <<indices>>.
+
+[role=""exclude"",id=""search-request-docvalue-fields""]
+=== Doc value fields parameter for request body search API
+See <<request-body-search-docvalue-fields>>.
+
+[role=""exclude"",id=""search-request-explain""]
+=== Explain parameter for request body search API
+See <<request-body-search-explain>>.
+
+[role=""exclude"",id=""search-request-collapse""]
+=== Collapse parameter for request body search API
+See <<request-body-search-collapse>>.
+
+[role=""exclude"",id=""search-request-from-size""]
+=== From and size parameters for request body search API
+See <<request-body-search-from-size>>.
+
+[role=""exclude"",id=""search-request-highlighting""]
+=== Highlight parameter for request body search API
+See <<request-body-search-highlighting>>.
+
+[role=""exclude"",id=""search-request-index-boost""]
+=== Index boost parameter for request body search API
+See <<request-body-search-index-boost>>.
+
+[role=""exclude"",id=""search-request-inner-hits""]
+=== Inner hits parameter for request body search API
+See <<request-body-search-inner-hits>>.
+
+[role=""exclude"",id=""search-request-min-score""]
+=== Minimum score parameter for request body search API
+See <<request-body-search-min-score>>.
+
+[role=""exclude"",id=""search-request-named-queries-and-filters""]
+=== Named query parameter for request body search API
+See <<request-body-search-queries-and-filters>>.
+
+[role=""exclude"",id=""search-request-post-filter""]
+=== Post filter parameter for request body search API
+See <<request-body-search-post-filter>>.
+
+[role=""exclude"",id=""search-request-preference""]
+=== Preference parameter for request body search API
+See <<request-body-search-preference>>.
+
+[role=""exclude"",id=""search-request-query""]
+=== Query parameter for request body search API
+See <<request-body-search-query>>.
+
+[role=""exclude"",id=""search-request-rescore""]
+=== Rescoring parameter for request body search API
+See <<request-body-search-rescore>>.
+
+[role=""exclude"",id=""search-request-script-fields""]
+=== Script fields parameter for request body search API
+See <<request-body-search-script-fields>>.
+
+[role=""exclude"",id=""search-request-scroll""]
+=== Scroll parameter for request body search API
+See <<request-body-search-scroll>>.
+
+[role=""exclude"",id=""search-request-search-after""]
+=== Search after parameter for request body search API
+See <<request-body-search-search-after>>.
+
+[role=""exclude"",id=""search-request-search-type""]
+=== Search type parameter for request body search API
+See <<request-body-search-search-type>>.
+
+[role=""exclude"",id=""search-request-seq-no-primary-term""]
+=== Sequence numbers and primary terms parameter for request body search API
+See <<request-body-search-search-type>>.
+
+[role=""exclude"",id=""search-request-sort""]
+=== Sort parameter for request body search API
+See <<request-body-search-sort>>.
+
+[role=""exclude"",id=""search-request-source-filtering""]
+=== Source filtering parameter for request body search API
+See <<request-body-search-source-filtering>>.
+
+[role=""exclude"",id=""search-request-stored-fields""]
+=== Stored fields parameter for request body search API
+See <<request-body-search-stored-fields>>.
+
+[role=""exclude"",id=""search-request-track-total-hits""]
+=== Track total hits parameter for request body search API
+See <<request-body-search-track-total-hits>>.
+
+[role=""exclude"",id=""search-request-version""]
+=== Version parameter for request body search API
+See <<request-body-search-version>>.
+
+[role=""exclude"",id=""search-suggesters-term""]
+=== Term suggester
+See <<term-suggester>>.
+
+[role=""exclude"",id=""search-suggesters-phrase""]
+=== Phrase suggester
+See <<phrase-suggester>>.
+
+[role=""exclude"",id=""search-suggesters-completion""]
+=== Completion suggester
+See <<completion-suggester>>.
+
+[role=""exclude"",id=""suggester-context""]
+=== Context suggester
+See <<context-suggester>>.
+
+[role=""exclude"",id=""returning-suggesters-type""]
+=== Return suggester type
+See <<return-suggesters-type>>.
+
+[role=""exclude"",id=""search-profile-queries""]
+=== Profiling queries
+See <<profiling-queries>>.
+
+[role=""exclude"",id=""search-profile-aggregations""]
+=== Profiling aggregations
+See <<profiling-aggregations>>.
+
+[role=""exclude"",id=""search-profile-considerations""]
+=== Profiling considerations
+See <<profiling-considerations>>.
+
+[role=""exclude"",id=""_explain_analyze""]
+=== Explain analyze API
+See <<explain-analyze-api>>.
+
+[role=""exclude"",id=""indices-synced-flush""]
+=== Synced flush API
+See <<synced-flush-api>>.
+
 [role=""exclude"",id=""_repositories""]
 === Snapshot repositories
 See <<snapshots-repositories>>.
@@ -633,4 +769,3 @@ See <<snapshots-repositories>>.
 [role=""exclude"",id=""_snapshot""]
 === Snapshot
 See <<snapshots-take-snapshot>>.
-
diff --git a/docs/reference/rest-api/index.asciidoc b/docs/reference/rest-api/index.asciidoc
index 7d706088802..3646d848788 100644
--- a/docs/reference/rest-api/index.asciidoc
+++ b/docs/reference/rest-api/index.asciidoc
@@ -10,11 +10,15 @@ directly to configure and access {es} features.
 We are working on including more {es} APIs in this section. Some content might
 not be included yet.
 
+* <<docs>>
+* <<search>>
+* <<indices>>
+* <<cat>>
+* <<cluster>>
 * <<info-api,Info API>>
 * <<ccr-apis,{ccr-cap} APIs>>
 * <<data-frame-apis,{dataframe-cap} APIs>>
 * <<graph-explore-api,Graph Explore API>>
-* <<index-apis>>
 * <<indices-reload-analyzers,Reload Search Analyzers API>>
 * <<index-lifecycle-management-api,Index lifecycle management APIs>>
 * <<snapshot-lifecycle-management-api,Snapshot lifecycle management APIs>>
@@ -27,14 +31,21 @@ not be included yet.
 * <<migration-api,Migration APIs>>
 --
 
+:leveloffset: +1
+include::{es-repo-dir}/api-conventions.asciidoc[]
+include::{es-repo-dir}/docs.asciidoc[]
+include::{es-repo-dir}/search.asciidoc[]
+include::{es-repo-dir}/indices.asciidoc[]
+include::{es-repo-dir}/cat.asciidoc[]
+include::{es-repo-dir}/cluster.asciidoc[]
 
+:leveloffset: -1
 include::info.asciidoc[]
 include::{es-repo-dir}/ccr/apis/ccr-apis.asciidoc[]
 include::{es-repo-dir}/data-frames/apis/index.asciidoc[]
 include::{es-repo-dir}/graph/explore.asciidoc[]
 include::{es-repo-dir}/ilm/apis/ilm-api.asciidoc[]
 include::{es-repo-dir}/ilm/apis/slm-api.asciidoc[]
-include::{es-repo-dir}/indices/apis/index.asciidoc[]
 include::{es-repo-dir}/licensing/index.asciidoc[]
 include::{es-repo-dir}/migration/migration.asciidoc[]
 include::{es-repo-dir}/ml/apis/ml-api.asciidoc[]
diff --git a/docs/reference/search.asciidoc b/docs/reference/search.asciidoc
index e99fb6f388d..aac5e5d3bc2 100644
--- a/docs/reference/search.asciidoc
+++ b/docs/reference/search.asciidoc
@@ -1,9 +1,6 @@
 [[search]]
 = Search APIs
 
-[partintro]
---
-
 Most search APIs are <<search-multi-index,multi-index>>, with the
 exception of the <<search-explain>> endpoints.
 
@@ -160,8 +157,6 @@ overloading a cluster (e.g., a default request will hit all indices in a cluster
 which could cause shard request rejections if the number of shards per node is
 high). This default value is `5`.
 
---
-
 include::search/search.asciidoc[]
 
 include::search/uri-request.asciidoc[]
diff --git a/docs/reference/search/profile.asciidoc b/docs/reference/search/profile.asciidoc
index e5ba1b851cd..c99776bc688 100644
--- a/docs/reference/search/profile.asciidoc
+++ b/docs/reference/search/profile.asciidoc
@@ -227,7 +227,7 @@ NOTE: As with other statistics apis, the Profile API supports human readable out
 `?human=true` to the query string. In this case, the output contains the additional `time` field containing rounded,
 human readable timing information (e.g. `""time"": ""391,9ms""`, `""time"": ""123.3micros""`).
 
-[[search-profile-queries]]
+[[profiling-queries]]
 === Profiling Queries
 
 [NOTE]
@@ -693,7 +693,7 @@ ignore its children if you find the details too tricky to interpret.
 
 Hopefully this will be fixed in future iterations, but it is a tricky problem to solve and still in-progress :)
 
-[[search-profile-aggregations]]
+[[profiling-aggregations]]
 === Profiling Aggregations
 
 [[agg-section]]
@@ -868,7 +868,7 @@ The meaning of the stats are as follows:
     Records the number of invocations of the particular method.  For example, `""collect_count"": 2,`
     means the `collect()` method was called on two different documents.
 
-[[search-profile-considerations]]
+[[profiling-considerations]]
 === Profiling Considerations
 
 ==== Performance Notes
diff --git a/docs/reference/search/request/collapse.asciidoc b/docs/reference/search/request/collapse.asciidoc
index 1ab79e36c7e..8de0450a4d5 100644
--- a/docs/reference/search/request/collapse.asciidoc
+++ b/docs/reference/search/request/collapse.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-collapse]]
+[[request-body-search-collapse]]
 === Field Collapsing
 
 Allows to collapse search results based on field values.
diff --git a/docs/reference/search/request/docvalue-fields.asciidoc b/docs/reference/search/request/docvalue-fields.asciidoc
index 784cc940153..7706e9c57b0 100644
--- a/docs/reference/search/request/docvalue-fields.asciidoc
+++ b/docs/reference/search/request/docvalue-fields.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-docvalue-fields]]
+[[request-body-search-docvalue-fields]]
 === Doc value Fields
 
 Allows to return the <<doc-values,doc value>> representation of a field for each hit, for
diff --git a/docs/reference/search/request/explain.asciidoc b/docs/reference/search/request/explain.asciidoc
index 9bcaecb4840..b82891c8905 100644
--- a/docs/reference/search/request/explain.asciidoc
+++ b/docs/reference/search/request/explain.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-explain]]
+[[request-body-search-explain]]
 === Explain
 
 Enables explanation for each hit on how its score was computed.
diff --git a/docs/reference/search/request/from-size.asciidoc b/docs/reference/search/request/from-size.asciidoc
index 1c44a7ca8d2..6e249f700e0 100644
--- a/docs/reference/search/request/from-size.asciidoc
+++ b/docs/reference/search/request/from-size.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-from-size]]
+[[request-body-search-from-size]]
 === From / Size
 
 Pagination of results can be done by using the `from` and `size`
diff --git a/docs/reference/search/request/highlighting.asciidoc b/docs/reference/search/request/highlighting.asciidoc
index ad836c7c535..2197af97d41 100644
--- a/docs/reference/search/request/highlighting.asciidoc
+++ b/docs/reference/search/request/highlighting.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-highlighting]]
+[[request-body-search-highlighting]]
 === Highlighting
 
 Highlighters enable you to get highlighted snippets from one or more fields
diff --git a/docs/reference/search/request/index-boost.asciidoc b/docs/reference/search/request/index-boost.asciidoc
index 683fe910f5e..93099fc6dc8 100644
--- a/docs/reference/search/request/index-boost.asciidoc
+++ b/docs/reference/search/request/index-boost.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-index-boost]]
+[[request-body-search-index-boost]]
 === Index Boost
 
 Allows to configure different boost level per index when searching
diff --git a/docs/reference/search/request/inner-hits.asciidoc b/docs/reference/search/request/inner-hits.asciidoc
index 7774e34c2c0..d26bcc9ba3c 100644
--- a/docs/reference/search/request/inner-hits.asciidoc
+++ b/docs/reference/search/request/inner-hits.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-inner-hits]]
+[[request-body-search-inner-hits]]
 === Inner hits
 
 The <<parent-join, parent-join>> and <<nested, nested>> features allow the return of documents that
diff --git a/docs/reference/search/request/min-score.asciidoc b/docs/reference/search/request/min-score.asciidoc
index d9dbef99ddf..7f7e556e1ea 100644
--- a/docs/reference/search/request/min-score.asciidoc
+++ b/docs/reference/search/request/min-score.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-min-score]]
+[[request-body-search-min-score]]
 === min_score
 
 Exclude documents which have a `_score` less than the minimum specified
diff --git a/docs/reference/search/request/named-queries-and-filters.asciidoc b/docs/reference/search/request/named-queries-and-filters.asciidoc
index 0fb60253938..c666bd51441 100644
--- a/docs/reference/search/request/named-queries-and-filters.asciidoc
+++ b/docs/reference/search/request/named-queries-and-filters.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-named-queries-and-filters]]
+[[request-body-search-queries-and-filters]]
 === Named Queries
 
 Each filter and query can accept a `_name` in its top level definition.
diff --git a/docs/reference/search/request/post-filter.asciidoc b/docs/reference/search/request/post-filter.asciidoc
index c46cdb1e522..6bdaac252b2 100644
--- a/docs/reference/search/request/post-filter.asciidoc
+++ b/docs/reference/search/request/post-filter.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-post-filter]]
+[[request-body-search-post-filter]]
 === Post filter
 
 The `post_filter` is applied to the search `hits` at the very end of a search
diff --git a/docs/reference/search/request/preference.asciidoc b/docs/reference/search/request/preference.asciidoc
index 7412f04844c..c673be52102 100644
--- a/docs/reference/search/request/preference.asciidoc
+++ b/docs/reference/search/request/preference.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-preference]]
+[[request-body-search-preference]]
 === Preference
 
 Controls a `preference` of the shard copies on which to execute the search.  By
diff --git a/docs/reference/search/request/query.asciidoc b/docs/reference/search/request/query.asciidoc
index fa06d0d9bb4..153608fa3d6 100644
--- a/docs/reference/search/request/query.asciidoc
+++ b/docs/reference/search/request/query.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-query]]
+[[request-body-search-query]]
 === Query
 
 The query element within the search request body allows to define a
diff --git a/docs/reference/search/request/rescore.asciidoc b/docs/reference/search/request/rescore.asciidoc
index c2277aada3f..4c8f8776c08 100644
--- a/docs/reference/search/request/rescore.asciidoc
+++ b/docs/reference/search/request/rescore.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-rescore]]
+[[request-body-search-rescore]]
 === Rescoring
 
 Rescoring can help to improve precision by reordering just the top (eg
diff --git a/docs/reference/search/request/script-fields.asciidoc b/docs/reference/search/request/script-fields.asciidoc
index 1bd61e00481..675237a0514 100644
--- a/docs/reference/search/request/script-fields.asciidoc
+++ b/docs/reference/search/request/script-fields.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-script-fields]]
+[[request-body-search-script-fields]]
 === Script Fields
 
 Allows to return a <<modules-scripting,script
diff --git a/docs/reference/search/request/scroll.asciidoc b/docs/reference/search/request/scroll.asciidoc
index 3503ad2c9c8..3c708f24a91 100644
--- a/docs/reference/search/request/scroll.asciidoc
+++ b/docs/reference/search/request/scroll.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-scroll]]
+[[request-body-search-scroll]]
 === Scroll
 
 While a `search` request returns a single ``page'' of results, the `scroll`
diff --git a/docs/reference/search/request/search-after.asciidoc b/docs/reference/search/request/search-after.asciidoc
index 53d25c613b9..663212d1c89 100644
--- a/docs/reference/search/request/search-after.asciidoc
+++ b/docs/reference/search/request/search-after.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-search-after]]
+[[request-body-search-search-after]]
 === Search After
 
 Pagination of results can be done by using the `from` and `size` but the cost becomes prohibitive when the deep pagination is reached.
diff --git a/docs/reference/search/request/search-type.asciidoc b/docs/reference/search/request/search-type.asciidoc
index 7cac034f29c..1000c771022 100644
--- a/docs/reference/search/request/search-type.asciidoc
+++ b/docs/reference/search/request/search-type.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-search-type]]
+[[request-body-search-search-type]]
 === Search Type
 
 There are different execution paths that can be done when executing a
diff --git a/docs/reference/search/request/seq-no.asciidoc b/docs/reference/search/request/seq-no.asciidoc
index 0ab7bec4487..8c12a3e3476 100644
--- a/docs/reference/search/request/seq-no.asciidoc
+++ b/docs/reference/search/request/seq-no.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-seq-no-primary-term]]
+[[request-body-search-seq-no-primary-term]]
 === Sequence Numbers and Primary Term
 
 Returns the sequence number and primary term of the last modification to each search hit.
diff --git a/docs/reference/search/request/sort.asciidoc b/docs/reference/search/request/sort.asciidoc
index c12ec3a679a..080bec6f976 100644
--- a/docs/reference/search/request/sort.asciidoc
+++ b/docs/reference/search/request/sort.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-sort]]
+[[request-body-search-sort]]
 === Sort
 
 Allows you to add one or more sorts on specific fields. Each sort can be
diff --git a/docs/reference/search/request/source-filtering.asciidoc b/docs/reference/search/request/source-filtering.asciidoc
index 483d3311d70..2b46b7ea632 100644
--- a/docs/reference/search/request/source-filtering.asciidoc
+++ b/docs/reference/search/request/source-filtering.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-source-filtering]]
+[[request-body-search-source-filtering]]
 === Source filtering
 
 
diff --git a/docs/reference/search/request/stored-fields.asciidoc b/docs/reference/search/request/stored-fields.asciidoc
index b55e0fce457..5cc8300afe6 100644
--- a/docs/reference/search/request/stored-fields.asciidoc
+++ b/docs/reference/search/request/stored-fields.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-stored-fields]]
+[[request-body-search-stored-fields]]
 === Stored Fields
 
 WARNING: The `stored_fields` parameter is about fields that are explicitly marked as
diff --git a/docs/reference/search/request/track-total-hits.asciidoc b/docs/reference/search/request/track-total-hits.asciidoc
index 210f6321816..44e353ded05 100644
--- a/docs/reference/search/request/track-total-hits.asciidoc
+++ b/docs/reference/search/request/track-total-hits.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-track-total-hits]]
+[[request-body-search-track-total-hits]]
 === Track total hits
 
 Generally the total hit count can't be computed accurately without visiting all
diff --git a/docs/reference/search/request/version.asciidoc b/docs/reference/search/request/version.asciidoc
index 57c6ce27feb..53343394fa3 100644
--- a/docs/reference/search/request/version.asciidoc
+++ b/docs/reference/search/request/version.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-version]]
+[[request-body-search-version]]
 === Version
 
 Returns a version for each search hit.
diff --git a/docs/reference/search/suggesters/completion-suggest.asciidoc b/docs/reference/search/suggesters/completion-suggest.asciidoc
index 0ed0601b086..e72d0e16eac 100644
--- a/docs/reference/search/suggesters/completion-suggest.asciidoc
+++ b/docs/reference/search/suggesters/completion-suggest.asciidoc
@@ -1,4 +1,4 @@
-[[search-suggesters-completion]]
+[[completion-suggester]]
 === Completion Suggester
 
 NOTE: In order to understand the format of suggestions, please
diff --git a/docs/reference/search/suggesters/context-suggest.asciidoc b/docs/reference/search/suggesters/context-suggest.asciidoc
index 63692f0b06f..759266658bf 100644
--- a/docs/reference/search/suggesters/context-suggest.asciidoc
+++ b/docs/reference/search/suggesters/context-suggest.asciidoc
@@ -1,4 +1,4 @@
-[[suggester-context]]
+[[context-suggester]]
 === Context Suggester
 
 The completion suggester considers all documents in the index, but it is often
diff --git a/docs/reference/search/suggesters/misc.asciidoc b/docs/reference/search/suggesters/misc.asciidoc
index 6866df24c09..736f79f010d 100644
--- a/docs/reference/search/suggesters/misc.asciidoc
+++ b/docs/reference/search/suggesters/misc.asciidoc
@@ -1,4 +1,4 @@
-[[returning-suggesters-type]]
+[[return-suggesters-type]]
 === Returning the type of the suggester
 
 Sometimes you need to know the exact type of a suggester in order to parse its results. The `typed_keys` parameter
diff --git a/docs/reference/search/suggesters/phrase-suggest.asciidoc b/docs/reference/search/suggesters/phrase-suggest.asciidoc
index 6b657a9e8ff..cdddf0daaea 100644
--- a/docs/reference/search/suggesters/phrase-suggest.asciidoc
+++ b/docs/reference/search/suggesters/phrase-suggest.asciidoc
@@ -1,4 +1,4 @@
-[[search-suggesters-phrase]]
+[[phrase-suggester]]
 === Phrase Suggester
 
 NOTE: In order to understand the format of suggestions, please
diff --git a/docs/reference/search/suggesters/term-suggest.asciidoc b/docs/reference/search/suggesters/term-suggest.asciidoc
index f9dd0c91335..9be7f111f61 100644
--- a/docs/reference/search/suggesters/term-suggest.asciidoc
+++ b/docs/reference/search/suggesters/term-suggest.asciidoc
@@ -1,4 +1,4 @@
-[[search-suggesters-term]]
+[[term-suggester]]
 === Term suggester
 
 NOTE: In order to understand the format of suggestions, please",Convert RestIntegTestTask to Java ( <issue_id> ) ( <issue_id> ) .,1
"diff --git a/src/test/java/org/junit/tests/AllTests.java b/src/test/java/org/junit/tests/AllTests.java
index aba58962bc93..ef9e1608eb2b 100644
--- a/src/test/java/org/junit/tests/AllTests.java
+++ b/src/test/java/org/junit/tests/AllTests.java
@@ -21,6 +21,8 @@
 import org.junit.tests.experimental.max.JUnit38SortingTest;
 import org.junit.tests.experimental.max.MaxComputerTest;
 import org.junit.tests.experimental.max.MaxStarterTest;
+import org.junit.tests.experimental.parallel.ParallelClassTest;
+import org.junit.tests.experimental.parallel.ParallelMethodTest;
 import org.junit.tests.experimental.theories.AllMembersSupplierTest;
 import org.junit.tests.experimental.theories.runner.TheoriesPerformanceTest;
 import org.junit.tests.junit3compatibility.AllTestsTest;
@@ -120,7 +122,9 @@
 	JUnit38SortingTest.class,
 	MaxComputerTest.class,
 	InterceptorTest.class,
-	TimeoutInterceptorTest.class
+	TimeoutInterceptorTest.class,
+	ParallelClassTest.class,
+	ParallelMethodTest.class
 })
 public class AllTests {
 	public static Test suite() {",Added parallel tests to AllTests,1
"diff --git a/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXMLConverter.java b/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXMLConverter.java
index 359ab0adbe..de62a06533 100644
--- a/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXMLConverter.java
+++ b/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXMLConverter.java
@@ -23,6 +23,8 @@ public class SimpleXMLConverter implements Converter {
 
   private final Serializer serializer;
 
+  private boolean strict = true;
+
   public SimpleXMLConverter() {
     this(new Persister());
   }
@@ -33,7 +35,7 @@ public SimpleXMLConverter(Serializer serializer) {
 
   @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {
     try {
-      return serializer.read((Class<?>) type, body.in());
+      return serializer.read((Class<?>) type, body.in(), strict);
     } catch (Exception e) {
       throw new ConversionException(e);
     }
@@ -60,4 +62,13 @@ public SimpleXMLConverter(Serializer serializer) {
       }
     }
   }
+
+  public boolean isStrict() {
+      return strict;
+  }
+
+  public void setStrict(boolean strict) {
+      this.strict = strict;
+  }
+
 }",Provide a setter to set strict mode to false,1
"diff --git a/java/client/src/org/openqa/selenium/remote/DesiredCapabilities.java b/java/client/src/org/openqa/selenium/remote/DesiredCapabilities.java
index adfb22c587..3271415ac9 100644
--- a/java/client/src/org/openqa/selenium/remote/DesiredCapabilities.java
+++ b/java/client/src/org/openqa/selenium/remote/DesiredCapabilities.java
@@ -65,7 +65,11 @@ public DesiredCapabilities(Map<String, ?> rawMap) {
     capabilities.putAll(rawMap);
     Object value = capabilities.get(PLATFORM);
     if (value instanceof String) {
-      capabilities.put(PLATFORM, Platform.valueOf((String) value));
+      try {
+        capabilities.put(PLATFORM, Platform.fromString((String) value));
+      } catch (WebDriverException ex) {
+        // unrecognized platform, fallback to string
+      }
     }
   }
 
diff --git a/java/client/test/org/openqa/selenium/remote/DesiredCapabilitiesTest.java b/java/client/test/org/openqa/selenium/remote/DesiredCapabilitiesTest.java
index 0177b6e262..9855b2e4ec 100644
--- a/java/client/test/org/openqa/selenium/remote/DesiredCapabilitiesTest.java
+++ b/java/client/test/org/openqa/selenium/remote/DesiredCapabilitiesTest.java
@@ -111,4 +111,14 @@ public void shouldNotAutomaticallyConvertPlatformIfItNotConvertible() {
     assertEquals(caps.getCapability(CapabilityType.PLATFORM), ""FreeBSD"");
   }
 
+  @Test
+  public void shouldNotAutomaticallyConvertPlatformIfItNotConvertibleInConstructor() {
+    Map<String, Object> capabilitiesMap = new HashMap<String, Object>() {{
+      put(CapabilityType.PLATFORM, ""FreeBSD"");
+    }};
+
+    DesiredCapabilities caps = new DesiredCapabilities(capabilitiesMap);
+    assertEquals(caps.getCapability(CapabilityType.PLATFORM), ""FreeBSD"");
+  }
+
 }",Add integration test to ensure - XepDisableAllChecks .,0
"diff --git a/spring-boot-dependencies/pom.xml b/spring-boot-dependencies/pom.xml
index 92840a05e58c..380595d31079 100644
--- a/spring-boot-dependencies/pom.xml
+++ b/spring-boot-dependencies/pom.xml
@@ -270,11 +270,6 @@
 				<artifactId>spring-boot-starter-jta-bitronix</artifactId>
 				<version>1.2.0.BUILD-SNAPSHOT</version>
 			</dependency>
-			<dependency>
-				<groupId>org.springframework.boot</groupId>
-				<artifactId>spring-boot-starter-jta-arjuna</artifactId>
-				<version>1.2.0.BUILD-SNAPSHOT</version>
-			</dependency>
 			<dependency>
 				<groupId>org.springframework.boot</groupId>
 				<artifactId>spring-boot-starter-log4j</artifactId>",Remove non-existent starter from dependencies pom,1
"diff --git a/pom.xml b/pom.xml
index 36a3079a7106..ec5c626c626d 100644
--- a/pom.xml
+++ b/pom.xml
@@ -48,7 +48,7 @@
         <contributor>
             <name>JUnit contributors</name>
             <organization>JUnit</organization>
-            <email>junit@yahoogroups.com</email>
+            <email>team@junit.org</email>
             <url>https://github.com/junit-team/junit4/graphs/contributors</url>
             <roles>
                 <role>developers</role>
@@ -56,14 +56,6 @@
         </contributor>
     </contributors>
 
-    <mailingLists>
-        <mailingList>
-            <name>JUnit Mailing List</name>
-            <post>junit@yahoogroups.com</post>
-            <archive>https://groups.yahoo.com/neo/groups/junit/info</archive>
-        </mailingList>
-    </mailingLists>
-
     <prerequisites>
         <maven>3.0.4</maven>
     </prerequisites>",Remove reference to obsolete mailing list,1
"diff --git a/dubbo-remoting/dubbo-remoting-zookeeper/src/test/java/com/alibaba/dubbo/remoting/zookeeper/curator/CuratorZookeeperClientTest.java b/dubbo-remoting/dubbo-remoting-zookeeper/src/test/java/com/alibaba/dubbo/remoting/zookeeper/curator/CuratorZookeeperClientTest.java
index dc26596c691..159c57a24fc 100644
--- a/dubbo-remoting/dubbo-remoting-zookeeper/src/test/java/com/alibaba/dubbo/remoting/zookeeper/curator/CuratorZookeeperClientTest.java
+++ b/dubbo-remoting/dubbo-remoting-zookeeper/src/test/java/com/alibaba/dubbo/remoting/zookeeper/curator/CuratorZookeeperClientTest.java
@@ -3,12 +3,14 @@
 import com.alibaba.dubbo.common.URL;
 
 import org.junit.Assert;
+import org.junit.Ignore;
 import org.junit.Test;
 
 /**
  * @author ken.lj
  * @date 2017/10/16
  */
+@Ignore
 public class CuratorZookeeperClientTest {
 
     @Test",Ignore unit test CuratorZookeeperClientTest(no zk server),1
"diff --git a/community/com/src/main/java/org/neo4j/com/MasterUtil.java b/community/com/src/main/java/org/neo4j/com/MasterUtil.java
index a8c5f901f1f..36a6200ec0b 100644
--- a/community/com/src/main/java/org/neo4j/com/MasterUtil.java
+++ b/community/com/src/main/java/org/neo4j/com/MasterUtil.java
@@ -74,13 +74,6 @@ public class MasterUtil
     
     public static SlaveContext rotateLogsAndStreamStoreFiles( GraphDatabaseService graphDb, StoreWriter writer )
     {
-        if ( Config.osIsWindows() )
-        {
-            throw new UnsupportedOperationException(
-                ""Streaming store files live (as used in HA and backup) ""
-                    + ""isn't supported on Windows due to limitations in OS/filesystem"" );
-        }
-
         File baseDir = getBaseDir( graphDb );
         XaDataSourceManager dsManager =
                 ((AbstractGraphDatabase) graphDb).getConfig().getTxModule().getXaDataSourceManager();
diff --git a/community/com/src/test/java/org/neo4j/com/backup/TestBackup.java b/community/com/src/test/java/org/neo4j/com/backup/TestBackup.java
index 7d55c553e4d..cb4acdf5391 100644
--- a/community/com/src/test/java/org/neo4j/com/backup/TestBackup.java
+++ b/community/com/src/test/java/org/neo4j/com/backup/TestBackup.java
@@ -91,7 +91,6 @@ public class TestBackup
     @Test
     public void fullThenIncremental() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         DbRepresentation initialDataSetRepresentation = createInitialDataSet( serverPath );
         ServerInterface server = startServer( serverPath );
         OnlineBackup backup = OnlineBackup.from( ""localhost"" );
@@ -109,7 +108,6 @@ public class TestBackup
     @Test
     public void makeSureStoreIdIsEnforced() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         // Create data set X on server A
         DbRepresentation initialDataSetRepresentation = createInitialDataSet( serverPath );
         ServerInterface server = startServer( serverPath );
diff --git a/community/com/src/test/java/org/neo4j/com/backup/TestConfiguration.java b/community/com/src/test/java/org/neo4j/com/backup/TestConfiguration.java
index 4ee63dbf284..d067458ef8e 100644
--- a/community/com/src/test/java/org/neo4j/com/backup/TestConfiguration.java
+++ b/community/com/src/test/java/org/neo4j/com/backup/TestConfiguration.java
@@ -29,7 +29,6 @@ import org.apache.commons.io.FileUtils;
 import org.junit.Before;
 import org.junit.Test;
 import org.neo4j.graphdb.GraphDatabaseService;
-import org.neo4j.kernel.Config;
 import org.neo4j.kernel.EmbeddedGraphDatabase;
 
 public class TestConfiguration
@@ -85,7 +84,6 @@ public class TestConfiguration
     @Test
     public void testEnableDefaultsInConfig() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         GraphDatabaseService db = newDb( ""true"" );
         OnlineBackup.from( ""localhost"" ).full( BACKUP_DIR );
         db.shutdown();
@@ -94,7 +92,6 @@ public class TestConfiguration
     @Test
     public void testEnableCustomPortInConfig() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         int customPort = 12345;
         GraphDatabaseService db = newDb( ""port="" + customPort );
         try
diff --git a/community/ha/src/test/java/slavetest/AbstractHaTest.java b/community/ha/src/test/java/slavetest/AbstractHaTest.java
index 969983f97df..f3cc6d9055e 100644
--- a/community/ha/src/test/java/slavetest/AbstractHaTest.java
+++ b/community/ha/src/test/java/slavetest/AbstractHaTest.java
@@ -46,7 +46,6 @@ import org.neo4j.graphdb.Relationship;
 import org.neo4j.graphdb.RelationshipType;
 import org.neo4j.helpers.collection.IteratorUtil;
 import org.neo4j.helpers.collection.MapUtil;
-import org.neo4j.kernel.Config;
 import org.neo4j.kernel.ha.Broker;
 import org.neo4j.kernel.ha.BrokerFactory;
 
@@ -393,7 +392,6 @@ public abstract class AbstractHaTest
     @Test
     public void slaveCreateNode() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 3, 2, 2, 2, 0, 0 );
         initializeDbs( 1 );
         executeJob( new CommonJobs.CreateSomeEntitiesJob(), 0 );
@@ -402,7 +400,6 @@ public abstract class AbstractHaTest
     @Test
     public void testMultipleSlaves() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 2, 1, 1, 1, 0, 0 );
         initializeDbs( 3 );
         executeJob( new CommonJobs.CreateSubRefNodeJob( CommonJobs.REL_TYPE.name(), null, null ), 0 );
@@ -415,7 +412,6 @@ public abstract class AbstractHaTest
     @Test
     public void testMasterFailure() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         initializeDbs( 1 );
         Serializable[] result = executeJob( new CommonJobs.CreateSubRefNodeMasterFailJob(
                 getMasterShutdownDispatcher() ), 0 );
@@ -429,7 +425,6 @@ public abstract class AbstractHaTest
     @Test
     public void testSlaveConstraintViolation() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 2, 1, 0, 1, 0, 0 );
         initializeDbs( 1 );
 
@@ -443,7 +438,6 @@ public abstract class AbstractHaTest
     @Test
     public void testMasterConstraintViolation() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 2, 1, 1, 1, 0, 0 );
         initializeDbs( 1 );
 
@@ -458,7 +452,6 @@ public abstract class AbstractHaTest
     @Test
     public void testGetRelationships() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 3, 2, 0, 0, 0, 0 );
         initializeDbs( 1 );
 
@@ -475,7 +468,6 @@ public abstract class AbstractHaTest
     @Test
     public void testNoTransaction() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 2, 1, 0, 1, 0, 0 );
         initializeDbs( 1 );
 
@@ -488,7 +480,6 @@ public abstract class AbstractHaTest
     @Test
     public void testNodeDeleted() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 1, 0, 0, 0, 0, 0 );
         initializeDbs( 1 );
 
@@ -503,7 +494,6 @@ public abstract class AbstractHaTest
     @Test
     public void testDeadlock() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         initializeDbs( 2 );
 
         Long[] nodes = executeJobOnMaster( new CommonJobs.CreateNodesJob( 2 ) );
@@ -526,7 +516,6 @@ public abstract class AbstractHaTest
     @Test
     public void createNodeAndIndex() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 2, 0, 1, 0, 1, 0 );
         initializeDbs( 1 );
         executeJob( new CommonJobs.CreateNodeAndIndexJob( ""name"", ""Neo"" ), 0 );
@@ -535,7 +524,6 @@ public abstract class AbstractHaTest
     @Test
     public void indexingAndTwoSlaves() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         initializeDbs( 2 );
         long id = executeJobOnMaster( new CommonJobs.CreateNodeAndIndexJob( ""name"", ""Morpheus"" ) );
         pullUpdates();
@@ -548,7 +536,6 @@ public abstract class AbstractHaTest
     @Test
     public void testNewIndexFramework() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 2, 0, 2, 0, 0, 2 );
         initializeDbs( 2 );
         long id = executeJobOnMaster( new CommonJobs.CreateNodeAndNewIndexJob( ""users"",
@@ -559,7 +546,6 @@ public abstract class AbstractHaTest
     @Test
     public void testLargeTransaction() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         initializeDbs( 1 );
         executeJob( new CommonJobs.LargeTransactionJob( 20, 1 ), 0 );
     }
@@ -567,7 +553,6 @@ public abstract class AbstractHaTest
     @Test
     public void testPullLargeTransaction() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         initializeDbs( 1 );
         executeJobOnMaster( new CommonJobs.LargeTransactionJob( 20, 1 ) );
         pullUpdates();
@@ -576,7 +561,6 @@ public abstract class AbstractHaTest
     @Test
     public void testLargeTransactionData() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         initializeDbs( 1 );
         executeJob( new CommonJobs.LargeTransactionJob( 1, 20 ), 0 );
     }
@@ -584,7 +568,6 @@ public abstract class AbstractHaTest
     @Test
     public void testPullLargeTransactionData() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         initializeDbs( 1 );
         executeJobOnMaster( new CommonJobs.LargeTransactionJob( 1, 20 ) );
         pullUpdates();
@@ -593,7 +576,6 @@ public abstract class AbstractHaTest
     @Test
     public void makeSureSlaveCanCopyLargeInitialDatabase() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         startUpMaster( MapUtil.stringMap() );
         executeJobOnMaster( new CommonJobs.LargeTransactionJob( 1, 60 ) );
         addDb( MapUtil.stringMap() );
@@ -604,7 +586,6 @@ public abstract class AbstractHaTest
     @Test
     public void canCopyInitialDbWithLuceneIndexes() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         int additionalNodeCount = 50;
         setExpectedResults( 1+additionalNodeCount, 0, additionalNodeCount*2, 0, 0, additionalNodeCount*2 );
         startUpMaster( MapUtil.stringMap() );
diff --git a/community/ha/src/test/java/slavetest/MultiJvmTest.java b/community/ha/src/test/java/slavetest/MultiJvmTest.java
index dec1cc8f691..06d100dbc64 100644
--- a/community/ha/src/test/java/slavetest/MultiJvmTest.java
+++ b/community/ha/src/test/java/slavetest/MultiJvmTest.java
@@ -29,7 +29,6 @@ import java.util.Map;
 import org.junit.After;
 import org.neo4j.graphdb.GraphDatabaseService;
 import org.neo4j.ha.StandaloneDatabase;
-import org.neo4j.kernel.Config;
 import org.neo4j.kernel.EmbeddedGraphDatabase;
 
 public class MultiJvmTest extends AbstractHaTest
@@ -68,7 +67,6 @@ public class MultiJvmTest extends AbstractHaTest
     @After
     public void shutdownDbsAndVerify() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         shutdownDbs();
 
         GraphDatabaseService masterDb = new EmbeddedGraphDatabase( dbPath( 0 ).getAbsolutePath() );
diff --git a/community/ha/src/test/java/slavetest/MultiJvmWithZooKeeperTest.java b/community/ha/src/test/java/slavetest/MultiJvmWithZooKeeperTest.java
index b9806cdc7ee..018208324b9 100644
--- a/community/ha/src/test/java/slavetest/MultiJvmWithZooKeeperTest.java
+++ b/community/ha/src/test/java/slavetest/MultiJvmWithZooKeeperTest.java
@@ -28,7 +28,6 @@ import org.junit.After;
 import org.junit.Before;
 import org.neo4j.ha.LocalhostZooKeeperCluster;
 import org.neo4j.ha.StandaloneDatabase;
-import org.neo4j.kernel.Config;
 
 public class MultiJvmWithZooKeeperTest extends MultiJvmTest
 {
@@ -43,7 +42,6 @@ public class MultiJvmWithZooKeeperTest extends MultiJvmTest
     @Before
     public void startZooKeeperCluster() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         FileUtils.deleteDirectory( BASE_ZOO_KEEPER_DATA_DIR );
         zooKeeperCluster = new LocalhostZooKeeperCluster( getClass(), /*ports:*/2181, 2182, 2183 );
     }
@@ -84,7 +82,6 @@ public class MultiJvmWithZooKeeperTest extends MultiJvmTest
     @After
     public void shutdownZooKeeperCluster()
     {
-        if ( Config.osIsWindows() ) return;
         zooKeeperCluster.shutdown();
     }
 }
diff --git a/community/ha/src/test/java/slavetest/SingleJvmTest.java b/community/ha/src/test/java/slavetest/SingleJvmTest.java
index 544c2db3373..b5eb6dead4e 100644
--- a/community/ha/src/test/java/slavetest/SingleJvmTest.java
+++ b/community/ha/src/test/java/slavetest/SingleJvmTest.java
@@ -119,7 +119,6 @@ public class SingleJvmTest extends AbstractHaTest
     @After
     public void verifyAndShutdownDbs()
     {
-        if ( Config.osIsWindows() ) return;
         try
         {
             verify( master.getGraphDb(), haDbs.toArray( new GraphDatabaseService[haDbs.size()] ) );
@@ -184,8 +183,6 @@ public class SingleJvmTest extends AbstractHaTest
     @Test
     public void testMixingEntitiesFromWrongDbs() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
-
         initializeDbs( 1 );
         GraphDatabaseService haDb1 = haDbs.get( 0 );
         GraphDatabaseService mDb = master.getGraphDb();
diff --git a/community/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java b/community/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java
index 61184920a50..e48248e2cf2 100644
--- a/community/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java
+++ b/community/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java
@@ -25,7 +25,6 @@ import org.junit.Test;
 import org.neo4j.com.Protocol;
 import org.neo4j.graphdb.GraphDatabaseService;
 import org.neo4j.helpers.Pair;
-import org.neo4j.kernel.Config;
 import org.neo4j.kernel.HighlyAvailableGraphDatabase;
 import org.neo4j.kernel.ha.AbstractBroker;
 import org.neo4j.kernel.ha.Broker;
@@ -39,7 +38,6 @@ public class SingleJvmWithNettyTest extends SingleJvmTest
     @Test
     public void assertThatNettyIsUsed() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         initializeDbs( 1 );
         assertTrue(
                 ""Slave Broker is not a client"",
diff --git a/community/kernel/src/main/java/org/neo4j/kernel/CommonFactories.java b/community/kernel/src/main/java/org/neo4j/kernel/CommonFactories.java
index 550752cf419..7b6805b6b49 100644
--- a/community/kernel/src/main/java/org/neo4j/kernel/CommonFactories.java
+++ b/community/kernel/src/main/java/org/neo4j/kernel/CommonFactories.java
@@ -31,6 +31,7 @@ import javax.transaction.TransactionManager;
 import org.neo4j.kernel.impl.core.DefaultRelationshipTypeCreator;
 import org.neo4j.kernel.impl.core.LastCommittedTxIdSetter;
 import org.neo4j.kernel.impl.core.RelationshipTypeCreator;
+import org.neo4j.kernel.impl.nioneo.store.FileLock;
 import org.neo4j.kernel.impl.nioneo.store.FileSystemAbstraction;
 import org.neo4j.kernel.impl.nioneo.store.IdGenerator;
 import org.neo4j.kernel.impl.nioneo.store.IdGeneratorImpl;
@@ -38,6 +39,8 @@ import org.neo4j.kernel.impl.nioneo.store.NeoStore;
 import org.neo4j.kernel.impl.transaction.LockManager;
 import org.neo4j.kernel.impl.transaction.TxFinishHook;
 import org.neo4j.kernel.impl.transaction.TxModule;
+import org.neo4j.kernel.impl.transaction.xaframework.DefaultLogBufferFactory;
+import org.neo4j.kernel.impl.transaction.xaframework.LogBufferFactory;
 import org.neo4j.kernel.impl.transaction.xaframework.TxIdGenerator;
 import org.neo4j.kernel.impl.transaction.xaframework.TxIdGeneratorFactory;
 
@@ -139,6 +142,17 @@ public class CommonFactories
             {
                 return new RandomAccessFile( fileName, mode ).getChannel();
             }
+            
+            @Override
+            public FileLock tryLock( String fileName, FileChannel channel ) throws IOException
+            {
+                return FileLock.getOsSpecificFileLock( fileName, channel );
+            }
         };
     }
+    
+    public static LogBufferFactory defaultLogBufferFactory( Map<?, ?> config )
+    {
+        return DefaultLogBufferFactory.create( config );
+    }
 }
diff --git a/community/kernel/src/main/java/org/neo4j/kernel/Config.java b/community/kernel/src/main/java/org/neo4j/kernel/Config.java
index 5f18875c8d9..abf36792d62 100644
--- a/community/kernel/src/main/java/org/neo4j/kernel/Config.java
+++ b/community/kernel/src/main/java/org/neo4j/kernel/Config.java
@@ -43,6 +43,7 @@ import org.neo4j.kernel.impl.persistence.IdGeneratorModule;
 import org.neo4j.kernel.impl.persistence.PersistenceModule;
 import org.neo4j.kernel.impl.transaction.LockManager;
 import org.neo4j.kernel.impl.transaction.TxModule;
+import org.neo4j.kernel.impl.transaction.xaframework.LogBufferFactory;
 import org.neo4j.kernel.impl.transaction.xaframework.TxIdGenerator;
 
 /**
@@ -111,7 +112,8 @@ public class Config
             LockReleaser lockReleaser, IdGeneratorFactory idGeneratorFactory,
             TxEventSyncHookFactory txSyncHookFactory,
             RelationshipTypeCreator relTypeCreator, TxIdGenerator txIdGenerator,
-            LastCommittedTxIdSetter lastCommittedTxIdSetter, FileSystemAbstraction fileSystem )
+            LastCommittedTxIdSetter lastCommittedTxIdSetter, FileSystemAbstraction fileSystem,
+            LogBufferFactory logBufferFactory )
     {
         this.storeDir = storeDir;
         this.inputParams = inputParams;
@@ -129,6 +131,7 @@ public class Config
         this.syncHookFactory = txSyncHookFactory;
         this.persistenceModule = new PersistenceModule();
         this.cacheManager = new AdaptiveCacheManager();
+        params.put( LogBufferFactory.class, logBufferFactory );
         graphDbModule = new GraphDbModule( graphDb, cacheManager, lockManager,
                 txModule.getTxManager(), idGeneratorModule.getIdGenerator(),
                 readOnly );
diff --git a/community/kernel/src/main/java/org/neo4j/kernel/EmbeddedGraphDbImpl.java b/community/kernel/src/main/java/org/neo4j/kernel/EmbeddedGraphDbImpl.java
index e48d8343e80..7c6e974f46d 100644
--- a/community/kernel/src/main/java/org/neo4j/kernel/EmbeddedGraphDbImpl.java
+++ b/community/kernel/src/main/java/org/neo4j/kernel/EmbeddedGraphDbImpl.java
@@ -111,7 +111,7 @@ class EmbeddedGraphDbImpl
         final Config config = new Config( graphDbService, storeDir, storeId, inputParams,
                 kernelPanicEventGenerator, txModule, lockManager, lockReleaser, idGeneratorFactory,
                 new SyncHookFactory(), relTypeCreator, txIdFactory.create( txModule.getTxManager() ),
-                lastCommittedTxIdSetter, fileSystem );
+                lastCommittedTxIdSetter, fileSystem, CommonFactories.defaultLogBufferFactory( inputParams ) );
         graphDbInstance = new GraphDbInstance( storeDir, true, config );
         this.msgLog = StringLogger.getLogger( storeDir );
         this.graphDbService = graphDbService;
diff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/CommonAbstractStore.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/CommonAbstractStore.java
index 53e62b027d7..1ad4282b7b5 100644
--- a/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/CommonAbstractStore.java
+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/CommonAbstractStore.java
@@ -23,7 +23,6 @@ import java.io.File;
 import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.nio.channels.FileChannel;
-import java.nio.channels.FileLock;
 import java.nio.channels.OverlappingFileLockException;
 import java.util.Map;
 import java.util.logging.Logger;
@@ -259,7 +258,7 @@ public abstract class CommonAbstractStore
         {
             if ( (!readOnly || backupSlave) && grabFileLock )
             {
-                this.fileLock = this.fileChannel.tryLock();
+                this.fileLock = getFileSystem().tryLock( storageFileName, fileChannel );
                 if ( fileLock == null )
                 {
                     throw new IllegalStateException( ""Unable to lock store [""
@@ -686,7 +685,10 @@ public abstract class CommonAbstractStore
                     fileChannel.write( buffer );
                     fileChannel.truncate( fileChannel.position() );
                     fileChannel.force( false );
-                    fileLock.release();
+                    if ( fileLock != null )
+                    {
+                        fileLock.release();
+                    }
                     fileChannel.close();
                     fileChannel = null;
                     success = true;
diff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/FileLock.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/FileLock.java
new file mode 100644
index 00000000000..62f3ef72bb7
--- /dev/null
+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/FileLock.java
@@ -0,0 +1,144 @@
+/**
+ * Copyright (c) 2002-2011 ""Neo Technology,""
+ * Network Engine for Objects in Lund AB [http://neotechnology.com]
+ *
+ * This file is part of Neo4j.
+ *
+ * Neo4j is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.neo4j.kernel.impl.nioneo.store;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.RandomAccessFile;
+import java.nio.channels.FileChannel;
+import java.nio.channels.OverlappingFileLockException;
+
+import org.neo4j.kernel.Config;
+
+public abstract class FileLock
+{
+    private static FileLock wrapOrNull( final java.nio.channels.FileLock lock )
+    {
+        if ( lock == null )
+        {
+            return null;
+        }
+        
+        return new FileLock()
+        {
+            @Override
+            public void release() throws IOException
+            {
+                lock.release();
+            }
+        };
+    }
+    
+    public static FileLock getOsSpecificFileLock( String fileName, FileChannel channel )
+            throws IOException
+    {
+        if ( Config.osIsWindows() )
+        {
+            // Only grab one lock, say for the ""neostore"" file
+            if ( fileName.endsWith( ""neostore"" ) )
+            {
+                return getWindowsFileLock( new File( fileName ).getParentFile() );
+            }
+            
+            // For the rest just return placebo locks
+            return new PlaceboFileLock();
+        }
+        else
+        {
+            return wrapOrNull( channel.tryLock() );
+        }
+    }
+    
+    private static FileLock getWindowsFileLock( File storeDir ) throws IOException
+    {
+        File lockFile = new File( storeDir, ""lock"" );
+        if ( !lockFile.exists() )
+        {
+            if ( !lockFile.createNewFile() )
+            {
+                throw new IOException( ""Couldn't create lock file "" + lockFile.getAbsolutePath() );
+            }
+        }
+        FileChannel fileChannel = new RandomAccessFile( lockFile, ""rw"" ).getChannel();
+        java.nio.channels.FileLock fileChannelLock = null;
+        try
+        {
+            fileChannelLock = fileChannel.tryLock(); 
+        }
+        catch ( OverlappingFileLockException e )
+        {
+            // OK, let fileChannelLock continue to be null and we'll deal with it below
+        }
+        if ( fileChannelLock == null )
+        {
+            fileChannel.close();
+            return null;
+        }
+        return new WindowsFileLock( lockFile, fileChannel, fileChannelLock );
+    }
+
+    public abstract void release() throws IOException;
+    
+    private static class PlaceboFileLock extends FileLock
+    {
+        @Override
+        public void release() throws IOException
+        {
+        }
+    }
+    
+    private static class WindowsFileLock extends FileLock
+    {
+        private final File lockFile;
+        private final FileChannel fileChannel;
+        private final java.nio.channels.FileLock fileChannelLock;
+
+        public WindowsFileLock( File lockFile, FileChannel fileChannel, java.nio.channels.FileLock lock )
+                throws IOException
+        {
+            this.lockFile = lockFile;
+            this.fileChannel = fileChannel;
+            this.fileChannelLock",update favorites right drawer layout,0
"diff --git a/src/main/java/net/sf/jabref/gui/autocompleter/AutoCompleteListener.java b/src/main/java/net/sf/jabref/gui/autocompleter/AutoCompleteListener.java
index 4e216c691d..6d0b5bbe3b 100644
--- a/src/main/java/net/sf/jabref/gui/autocompleter/AutoCompleteListener.java
+++ b/src/main/java/net/sf/jabref/gui/autocompleter/AutoCompleteListener.java
@@ -370,9 +370,6 @@ public class AutoCompleteListener extends KeyAdapter implements FocusListener {
                 comp.replaceSelection("""");
 
                 StringBuffer currentword = getCurrentWord(comp);
-                if (currentword == null) {
-                    currentword = new StringBuffer();
-                }
 
                 // only ""real characters"" end up here
                 assert (!Character.isISOControl(ch));
@@ -429,7 +426,7 @@ public class AutoCompleteListener extends KeyAdapter implements FocusListener {
                         && Character.isWhitespace(comp.getText().charAt(comp.getCaretPosition()))) {",Add a new Maven profile to support Jetty ALPN on jdk8u161 ( <issue_id> ) .,0
"diff --git a/modules/http/src/retrofit/http/HttpMethod.java b/modules/http/src/retrofit/http/HttpMethod.java
new file mode 100644
index 0000000000..4354af2af9
--- /dev/null
+++ b/modules/http/src/retrofit/http/HttpMethod.java
@@ -0,0 +1,19 @@
+package retrofit.http;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+/**
+ * Type of HTTP request to make.
+ *
+ * @author Rob Dickerson (rdickerson@squareup.com)
+ */
+@Target({ METHOD })
+@Retention(RUNTIME)
+public @interface HttpMethod {
+  enum Type {GET, POST}
+  Type value();
+}
diff --git a/modules/http/src/retrofit/http/RestAdapter.java b/modules/http/src/retrofit/http/RestAdapter.java
index 5114690143..d81ebd2be3 100644
--- a/modules/http/src/retrofit/http/RestAdapter.java
+++ b/modules/http/src/retrofit/http/RestAdapter.java
@@ -2,14 +2,23 @@
 
 import com.google.gson.Gson;
 import com.google.gson.JsonParseException;
-import com.google.inject.*;
+import com.google.inject.Binder;
+import com.google.inject.Inject;
+import com.google.inject.Module;
+import com.google.inject.Provider;
+import com.google.inject.Singleton;
 import com.google.inject.name.Named;
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
+import org.apache.http.NameValuePair;
 import org.apache.http.client.HttpClient;
 import org.apache.http.client.ResponseHandler;
 import org.apache.http.client.entity.UrlEncodedFormEntity;
+import org.apache.http.client.methods.HttpGet;
 import org.apache.http.client.methods.HttpPost;
+import org.apache.http.client.methods.HttpUriRequest;
+import org.apache.http.client.utils.URIUtils;
+import org.apache.http.client.utils.URLEncodedUtils;
 import org.apache.http.entity.mime.HttpMultipartMode;
 import org.apache.http.entity.mime.MIME;
 import org.apache.http.entity.mime.MultipartEntity;
@@ -25,7 +34,14 @@
 import java.io.OutputStream;
 import java.io.UnsupportedEncodingException;
 import java.lang.annotation.Annotation;
-import java.lang.reflect.*;
+import java.lang.reflect.InvocationHandler;
+import java.lang.reflect.Method;
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Proxy;
+import java.lang.reflect.Type;
+import java.lang.reflect.WildcardType;
+import java.net.URI;
+import java.net.URISyntaxException;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.Executor;
@@ -113,59 +129,28 @@ private void backgroundInvoke(Method method, Object[] args) {
         String relativePath = getRelativePath(method);
         final String apiUrl = server.apiUrl();
 
-        // Construct POST HTTP request.
-        final HttpPost post = new HttpPost(apiUrl + relativePath);
-        headers.setHeaders(post);
-
-        // Convert all but the last method argument to HTTP request parameters.
-        Type[] genericParameterTypes = method.getGenericParameterTypes();
-        Class<?>[] parameterTypes = method.getParameterTypes();
-
-        Annotation[][] parameterAnnotations = method.getParameterAnnotations();
-        int count = parameterAnnotations.length - 1;
-
-        if (useMultipart(parameterTypes)) {
-          MultipartEntity form = new MultipartEntity(
-              HttpMultipartMode.BROWSER_COMPATIBLE);
-          for (int i = 0; i < count; i++) {
-            Object arg = args[i];
-            if (arg == null) continue;
-            Annotation[] annotations = parameterAnnotations[i];
-            String name = getName(annotations, method, i);
-            Class<?> type = parameterTypes[i];
-
-            if (TypedBytes.class.isAssignableFrom(type)) {
-              TypedBytes typedBytes = (TypedBytes) arg;
-              form.addPart(name, new TypedBytesBody(typedBytes, name));
-            } else {
-              try {
-                form.addPart(name, new StringBody(String.valueOf(arg)));
-              } catch (UnsupportedEncodingException e) {
-                throw new AssertionError(e);
-              }
-            }
-          }
-          post.setEntity(form);
-        } else {
-          List<BasicNameValuePair> pairs
-              = new ArrayList<BasicNameValuePair>(count);
-          for (int i = 0; i < count; i++) {
-            Object arg = args[i];
-            if (arg == null) continue;
-            String name = getName(parameterAnnotations[i], method, i);
-            pairs.add(new BasicNameValuePair(name, String.valueOf(arg)));
-          }
-          try {
-            post.setEntity(new UrlEncodedFormEntity(pairs));
-          } catch (UnsupportedEncodingException e) {
-            throw new AssertionError(e);
-          }
+        // Construct HTTP request.
+        HttpUriRequest request;
+        HttpMethod.Type requestType = getRequestType(method);
+        switch (requestType) {
+          case GET:
+            request = createGet(apiUrl, relativePath, method, args);
+            break;
+          case POST:
+            request = createPost(apiUrl, relativePath, method, args);
+            break;
+          default:
+            throw new IllegalStateException(
+                ""Unrecognized HTTP Method: "" + requestType);
         }
+        headers.setHeaders(request);
 
         // The last parameter should be of type Callback<T>. Determine T.
+        Type[] genericParameterTypes = method.getGenericParameterTypes();
         final Type resultType = getCallbackParameterType(method,
             genericParameterTypes);
-        logger.fine(String.format(""POSTing to %s."", post.getURI()));
+        logger.fine(String.format(""Sending "" + requestType + "" request to %s."",
+            request.getURI()));
 
         final GsonResponseHandler<?> gsonResponseHandler =
             GsonResponseHandler.create(resultType, callback);
@@ -176,7 +161,7 @@ private void backgroundInvoke(Method method, Object[] args) {
             : new ProfilingResponseHandler(gsonResponseHandler, profiler,
                 HttpProfiler.Method.POST, apiUrl, relativePath);
 
-        httpClientProvider.get().execute(post, rh);
+        httpClientProvider.get().execute(request, rh);
       } catch (IOException e) {
         logger.log(Level.WARNING, e.getMessage(), e);
         callback.networkError();
@@ -185,6 +170,98 @@ private void backgroundInvoke(Method method, Object[] args) {
       }
     }
 
+    /**
+     * Converts all but the last method argument to a list of HTTP request
+     * parameters.
+     */
+    private List<NameValuePair> createParamList(Method method, Object[] args) {
+
+      Annotation[][] parameterAnnotations = method.getParameterAnnotations();
+      int count = parameterAnnotations.length - 1;
+
+      List<NameValuePair> params = new ArrayList<NameValuePair>();
+      for (int i = 0; i < count; i++) {
+        Object arg = args[i];
+        if (arg == null) continue;
+        String name = getName(parameterAnnotations[i], method, i);
+        params.add(new BasicNameValuePair(name, String.valueOf(arg)));
+      }
+
+      return params;
+    }
+
+    private HttpGet createGet(String apiUrl, String relativePath,
+        Method method, Object[] args) throws URISyntaxException {
+
+      List<NameValuePair> queryParams = createParamList(method, args);
+      String queryString = URLEncodedUtils.format(queryParams, ""UTF-8"");
+
+      URI uri = URIUtils.createURI(scheme(apiUrl), host(apiUrl), -1,
+          relativePath, queryString, null);
+      return new HttpGet(uri);
+    }
+
+    private HttpPost createPost(String apiUrl, String relativePath,
+        Method method, Object[] args) throws URISyntaxException {
+      URI uri = URIUtils.createURI(scheme(apiUrl), host(apiUrl), -1,
+          relativePath, null, null);
+      HttpPost post = new HttpPost(uri);
+      addParamsToPost(post, method, args);
+      return post;
+    }
+
+    private String scheme(String apiUrl) {
+      return apiUrl.substring(0, apiUrl.indexOf(""://""));
+    }
+
+    private String host(String apiUrl) {
+      String host = apiUrl.substring(
+          apiUrl.indexOf(""://"") + 3, apiUrl.length());
+      if (host.endsWith(""/"")) host = host.substring(0, host.length() - 1);
+      return host;
+    }
+
+    private void addParamsToPost(HttpPost post, Method method, Object[] args) {
+
+      // Convert all but the last method argument to HTTP request parameters.
+
+      Class<?>[] parameterTypes = method.getParameterTypes();
+
+      Annotation[][] parameterAnnotations = method.getParameterAnnotations();
+      int count = parameterAnnotations.length - 1;
+
+      if (useMultipart(parameterTypes)) {
+        MultipartEntity form = new MultipartEntity(
+            HttpMultipartMode.BROWSER_COMPATIBLE);
+        for (int i = 0; i < count; i++) {
+          Object arg = args[i];
+          if (arg == null) continue;
+          Annotation[] annotations = parameterAnnotations[i];
+          String name = getName(annotations, method, i);
+          Class<?> type = parameterTypes[i];
+
+          if (TypedBytes.class.isAssignableFrom(type)) {
+            TypedBytes typedBytes = (TypedBytes) arg;
+            form.addPart(name, new TypedBytesBody(typedBytes, name));
+          } else {
+            try {
+              form.addPart(name, new StringBody(String.valueOf(arg)));
+            } catch (UnsupportedEncodingException e) {
+              throw new AssertionError(e);
+            }
+          }
+        }
+        post.setEntity(form);
+      } else {
+        try {
+          List<NameValuePair> paramList = createParamList(method, args);
+          post.setEntity(new UrlEncodedFormEntity(paramList));
+        } catch (UnsupportedEncodingException e) {
+          throw new AssertionError(e);
+        }
+      }
+    }
+
     /** Returns true if the post contains a file upload. */
     private boolean useMultipart(Class<?>[] parameterTypes) {
       for (Class<?> parameterType : parameterTypes) {
@@ -264,6 +341,15 @@ private String getRelativePath(Method method) {
       return pathAnnotation.value();
     }
 
+    private HttpMethod.Type getRequestType(Method method) {
+      HttpMethod requestTypeAnnotation = method.getAnnotation(
+          HttpMethod.class);
+
+      // Default to POST.
+      return requestTypeAnnotation == null ? HttpMethod.Type.POST :
+          requestTypeAnnotation.value();
+    }
+
   }
 
   /** Adapts ContentBody to TypedBytes. */",Adding GET support to RestAdapter,1
"diff --git a/src/org/junit/internal/runners/CompositeRunner.java b/src/org/junit/internal/runners/CompositeRunner.java
index a6e6310cd938..75e28e48020c 100644
--- a/src/org/junit/internal/runners/CompositeRunner.java
+++ b/src/org/junit/internal/runners/CompositeRunner.java
@@ -6,7 +6,6 @@
 import java.util.Iterator;
 import java.util.List;
 
-import org.junit.internal.runners.links.Statement;
 import org.junit.runner.Description;
 import org.junit.runner.Runner;
 import org.junit.runner.manipulation.Filter;
@@ -37,11 +36,6 @@ public CompositeRunner(Class<?> type) {
 		this(type, null);
 	}
 
-	protected void runChildren(RunNotifier notifier) {
-		for (Runner each : fRunners)
-			each.run(notifier);
-	}
-
 	@Override
 	public Description getDescription() {
 		Description spec= Description.createSuiteDescription(fName);
@@ -84,16 +78,6 @@ public int compare(Runner o1, Runner o2) {
 			sorter.apply(each);
 	}
 
-	@Override
-	protected Statement classBlock(final RunNotifier notifier) {
-		return new Statement() {
-			@Override
-			public void evaluate() throws Throwable {
-				runChildren(notifier);
-			}			
-		};
-	}
-
 	@Override
 	protected Description describeChild(Runner child) {
 		return child.getDescription();
@@ -103,4 +87,9 @@ protected Description describeChild(Runner child) {
 	protected List<Runner> getChildren() {
 		return fRunners;
 	}
+
+	@Override
+	protected void runChild(Runner each, final RunNotifier notifier) {
+		each.run(notifier);
+	}
 }
diff --git a/src/org/junit/internal/runners/JUnit4ClassRunner.java b/src/org/junit/internal/runners/JUnit4ClassRunner.java
index 8f4167e47b89..15e40f9f9f3f 100644
--- a/src/org/junit/internal/runners/JUnit4ClassRunner.java
+++ b/src/org/junit/internal/runners/JUnit4ClassRunner.java
@@ -54,16 +54,6 @@ protected void collectInitializationErrors(List<Throwable> errors) {
 	}
 
 	@Override
-	protected Statement classBlock(final RunNotifier notifier) {
-		return new Statement() {
-			@Override
-			public void evaluate() {
-				for (FrameworkMethod method : getChildren())
-					runChild(method, notifier);
-			}
-		};
-	}
-
 	protected void runChild(FrameworkMethod method, RunNotifier notifier) {
 		Description description= describeChild(method);
 		EachTestNotifier eachNotifier= new EachTestNotifier(notifier,
diff --git a/src/org/junit/internal/runners/ParentRunner.java b/src/org/junit/internal/runners/ParentRunner.java
index 54a38bb0435e..12b4aa9affe6 100644
--- a/src/org/junit/internal/runners/ParentRunner.java
+++ b/src/org/junit/internal/runners/ParentRunner.java
@@ -25,8 +25,23 @@ public ParentRunner(Class<?> testClass) {
 	protected abstract List<T> getChildren();
 	
 	protected abstract Description describeChild(T child);
-	
-	protected abstract Statement classBlock(RunNotifier notifier);
+
+	// TODO: (Nov 24, 2007 11:50:17 PM) can I avoid RunNotifier?
+
+	protected abstract void runChild(T child, RunNotifier notifier);
+
+
+	// TODO: (Nov 25, 2007 12:03:48 AM) remove final
+
+	private Statement classBlock(final RunNotifier notifier) {
+		return new Statement() {
+					@Override
+					public void evaluate() {
+						for (T each : getChildren())
+							runChild(each, notifier);
+					}
+				};
+	}
 	
 	@Override
 	public void run(final RunNotifier notifier) {
diff --git a/src/org/junit/runners/Suite.java b/src/org/junit/runners/Suite.java
index 20280b70b392..02e235fa9d4d 100644
--- a/src/org/junit/runners/Suite.java
+++ b/src/org/junit/runners/Suite.java
@@ -13,7 +13,6 @@
 import java.util.Set;
 
 import org.junit.internal.runners.ParentRunner;
-import org.junit.internal.runners.links.Statement;
 import org.junit.internal.runners.model.InitializationError;
 import org.junit.internal.runners.model.TestClass;
 import org.junit.runner.Description;
@@ -100,27 +99,13 @@ protected void validate(List<Throwable> errors) {
 		fTestClass.validateInstanceMethods(errors);
 	}
 
-
-	@Override
-	protected Statement classBlock(final RunNotifier notifier) {
-		// TODO: (Oct 29, 2007 2:49:03 PM) Is this duplicated with other classBlocks?
-
-		return new Statement() {
-					@Override
-					public void evaluate() {
-						for (Runner each : getChildren())
-							runChild(each, notifier);
-					}
-				};
-	}
-
 	@Override
 	public List<Runner> getChildren() {
 		return fRunners;
 	}
 
-	private void runChild(Runner each,
-			final RunNotifier notifier) {
+	@Override
+	protected void runChild(Runner each, final RunNotifier notifier) {
 		each.run(notifier);
 	}",Pull classBlock up into ParentRunner,1
"diff --git a/.cvsignore b/.cvsignore
index b90a06416622..c9069f444995 100644
--- a/.cvsignore
+++ b/.cvsignore
@@ -4,3 +4,4 @@ junit*-SNAPSHOT-*
 target
 reports
 buildfile
+java.hprof.txt
diff --git a/build.xml b/build.xml
index b464f3a31a54..42b4eec8cf58 100644
--- a/build.xml
+++ b/build.xml
@@ -142,6 +142,19 @@
 		</java>
 	</target>
 
+	<!-- TODO: DUP above -->
+
+	<target name=""profile"" depends=""populate-dist"">
+		<java classname=""org.junit.runner.JUnitCore"" fork=""yes"" failonerror=""true"">
+			<jvmarg value=""-agentlib:hprof=cpu=samples""/>
+			<arg value=""org.junit.tests.AllTests""/>
+			<classpath>
+				<pathelement location=""${dist}"" />
+				<pathelement location=""${dist}/${binjar}"" />
+			</classpath>
+		</java>
+	</target>	
+
 	<target name=""zip"" depends=""dist"">
 		<zip zipfile=""${zipfile}"" basedir=""."" includes=""${dist}/**"" />
 	</target>
diff --git a/src/main/java/junit/runner/Version.java b/src/main/java/junit/runner/Version.java
index 2b461ec79e42..5bb89ee4c9da 100644
--- a/src/main/java/junit/runner/Version.java
+++ b/src/main/java/junit/runner/Version.java
@@ -9,7 +9,7 @@ private Version() {
 	}
 
 	public static String id() {
-		return ""4.5-SNAPSHOT-20080513-1059"";
+		return ""4.5-SNAPSHOT-20080602-1631"";
 	}
 	
 	public static void main(String[] args) {",Added profile task to build.xml,1
"diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java
index 1ede8a2037..6d1b600205 100644
--- a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java
+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java
@@ -373,6 +373,7 @@ public class AnkiDroidApp extends Application {
             }
         } catch (Exception e) {
             Timber.e(e, ""failed to update context with new language"");
+            //during AnkiDroidApp.attachBaseContext() ACRA is not initialized, so the exception report will not be sent
             sendExceptionReport(e,""AnkiDroidApp.updateContextWithLanguage"");
             return remoteContext;
         }
diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/Preferences.java b/AnkiDroid/src/main/java/com/ichi2/anki/Preferences.java
index 526864d431..26c400db22 100644
--- a/AnkiDroid/src/main/java/com/ichi2/anki/Preferences.java
+++ b/AnkiDroid/src/main/java/com/ichi2/anki/Preferences.java
@@ -810,22 +810,25 @@ public class Preferences extends AppCompatPreferenceActivity implements Preferen
 
     private void initializeLanguageDialog(PreferenceScreen screen) {
         ListPreference languageSelection = (ListPreference) screen.findPreference(LANGUAGE);
-        Locale currentAppLocale = LanguageUtil.getLocale(AnkiDroidApp.getSharedPrefs(AnkiDroidApp.getInstance())
-                .getString(Preferences.LANGUAGE, """"));
         if (languageSelection != null) {
-            Map<String, String> items = new TreeMap<>();
+            Map<String, List<String>> items = new TreeMap<>();
             for (String localeCode : LanguageUtil.APP_LANGUAGES) {
                 Locale loc = LanguageUtil.getLocale(localeCode);
-                items.put(loc.getDisplayName(currentAppLocale), loc.toString());
+                //TreeMap always sorted by key.
+                //      Key is a String: all display names converted to lower case for correct display order.
+                //      Value is list of 2 strings:
+                //          1st element is display name with unmodified case
+                //          2nd element is locale code
+                items.put(loc.getDisplayName(loc).toLowerCase(), Arrays.asList(loc.getDisplayName(loc), loc.toString()));
             }
             CharSequence[] languageDialogLabels = new CharSequence[items.size() + 1];
             CharSequence[] languageDialogValues = new CharSequence[items.size() + 1];
             languageDialogLabels[0] = getResources().getString(R.string.language_system);
             languageDialogValues[0] = """";
             int i = 1;
-            for (Map.Entry<String, String> e : items.entrySet()) {
-                languageDialogLabels[i] = e.getKey();
-",Updated russian and hungarian translation,0
"diff --git a/src/main/java/org/junit/rules/ExpectedException.java b/src/main/java/org/junit/rules/ExpectedException.java
index 01fc99cc8eb8..000e805a3097 100644
--- a/src/main/java/org/junit/rules/ExpectedException.java
+++ b/src/main/java/org/junit/rules/ExpectedException.java
@@ -215,7 +215,7 @@ private void handleException(Throwable e) throws Throwable {
     
     private String missingExceptionMessage() {
         if (isMissingExceptionMessageEmpty()) {
-        	String expectation = StringDescription.toString(fMatcherBuilder.build());
+            String expectation = StringDescription.toString(fMatcherBuilder.build());
             return ""Expected test to throw "" + expectation;
         } else {
             return missingExceptionMessage;",Converted tab to spaces,0
"diff --git a/querydsl-sql/src/test/java/com/mysema/query/sql/TemplateTest.java b/querydsl-sql/src/test/java/com/mysema/query/sql/TemplateTest.java
new file mode 100644
index 000000000..1fd1ebbda
--- /dev/null
+++ b/querydsl-sql/src/test/java/com/mysema/query/sql/TemplateTest.java
@@ -0,0 +1,40 @@
+package com.mysema.query.sql;
+
+import static org.junit.Assert.assertEquals;
+
+import java.util.Date;
+
+import org.junit.Test;
+
+import com.mysema.query.types.ConstantImpl;
+import com.mysema.query.types.Expression;
+import com.mysema.query.types.expr.DateExpression;
+import com.mysema.query.types.expr.StringExpression;
+import com.mysema.query.types.path.DatePath;
+import com.mysema.query.types.path.StringPath;
+import com.mysema.query.types.template.DateTemplate;
+import com.mysema.query.types.template.StringTemplate;
+
+public class TemplateTest {
+
+    @Test
+    public void ToDate(){
+        StringExpression str = new StringPath(""str"");
+        assertEquals(""to_date(str,'DD-MON-YYYY')"", to_date(str, ""DD-MON-YYYY"").toString());
+    }
+
+    @Test
+    public void ToChar(){
+        DateExpression<Date> date = new DatePath<Date>(Date.class,""date"");
+        assertEquals(""to_char(date,'DD-MON-YYYY')"", to_char(date, ""DD-MON-YYYY"").toString());
+    }
+
+    private DateExpression<Date> to_date(Expression<String> expr, String pattern){
+        return DateTemplate.create(Date.class, ""to_date({0},'{1s}')"", expr, ConstantImpl.create(pattern));
+    }
+
+    private StringExpression to_char(Expression<?> expr, String pattern){
+        return StringTemplate.create(""to_char({0},'{1s}')"", expr, ConstantImpl.create(pattern));
+    }
+        
+}",Show full condition source on condition hover,0
"diff --git a/retrofit/src/main/java/retrofit/RequestBuilder.java b/retrofit/src/main/java/retrofit/RequestBuilder.java
index 7da3d4b960..f3fababf17 100644
--- a/retrofit/src/main/java/retrofit/RequestBuilder.java
+++ b/retrofit/src/main/java/retrofit/RequestBuilder.java
@@ -241,7 +241,20 @@ void setArguments(Object[] args) {
           break;
         case FIELD:
           if (value != null) { // Skip null values.
-            formBody.addField(name, value.toString());
+            if (value instanceof Iterable) {
+              for (Object v : (Iterable<?>) value) {
+                formBody.addField(name, v.toString());
+              }
+            } else if (value instanceof Map) {
+              for (Map.Entry<?, ?> entry : ((Map<?, ?>) value).entrySet()) {
+                Object v = entry.getValue();
+                if (v != null) { // Skip null values.
+                  formBody.addField(entry.getKey().toString(), v.toString());
+                }
+              }
+            } else {
+              formBody.addField(name, value.toString());
+            }
           }
           break;
         case PART:
diff --git a/retrofit/src/test/java/retrofit/RequestBuilderTest.java b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
index 53adc342f9..666c4b7bb0 100644
--- a/retrofit/src/test/java/retrofit/RequestBuilderTest.java
+++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
@@ -499,6 +499,38 @@ public class RequestBuilderTest {
     assertTypedBytes(request.getBody(), ""foo=bar&kit=kat"");
   }
 
+  @Test public void formEncodedFieldList() throws Exception {
+    List<Object> values = new ArrayList<Object>(Arrays.asList(""foo"", ""bar"", 3));
+
+    Request request = new Helper() //
+        .setMethod(""POST"") //
+        .setHasBody() //
+        .setUrl(""http://example.com"") //
+        .setPath(""/foo"") //
+        .setFormEncoded() //
+        .addFieldList(""foo"", values) //
+        .addField(""kit"", ""kat"") //
+        .build();
+    assertTypedBytes(request.getBody(), ""foo=foo&foo=bar&foo=3&kit=kat"");
+  }
+
+  @Test public void formEncodedFieldMap() throws Exception {
+    Map<String, Object> params = new LinkedHashMap<String, Object>();
+    params.put(""kit"", ""kat"");
+    params.put(""foo"", null);
+    params.put(""ping"", ""pong"");
+
+    Request request = new Helper() //
+        .setMethod(""POST"") //
+        .setHasBody() //
+        .setUrl(""http://example.com"") //
+        .setPath(""/foo"") //
+        .setFormEncoded() //
+        .addFieldMap(""options"", params) //
+        .build();
+    assertTypedBytes(request.getBody(), ""kit=kat&ping=pong"");
+  }
+
   @Test public void simpleHeaders() throws Exception {
     Request request = new Helper() //
         .setMethod(""GET"") //
@@ -697,6 +729,20 @@ Helper addField(String name, String value) {
       return this;
     }
 
+    Helper addFieldList(String name, List<Object> values) {
+      paramNames.add(name);
+      paramUsages.add(FIELD);
+      args.add(values);
+      return this;
+    }
+
+    Helper addFieldMap(String name, Map<String, Object> values) {
+      paramNames.add(name);
+      paramUsages.add(FIELD);
+      args.add(values);
+      return this;
+    }
+
     Helper addPart(String name, Object value) {
       paramNames.add(name);
       paramUsages.add(PART);",RequestBuilder: Support Iterable / Map for @Field,1
"diff --git a/src/main/java/com/sk89q/bukkit/util/DynamicPluginCommand.java b/src/main/java/com/sk89q/bukkit/util/DynamicPluginCommand.java
index 4c11d194a..958fd94f5 100644
--- a/src/main/java/com/sk89q/bukkit/util/DynamicPluginCommand.java
+++ b/src/main/java/com/sk89q/bukkit/util/DynamicPluginCommand.java
@@ -18,11 +18,8 @@
 
 package com.sk89q.bukkit.util;
 
-import com.sk89q.minecraft.util.commands.Command;
 import org.bukkit.command.CommandExecutor;
 import org.bukkit.command.CommandSender;
-import org.bukkit.plugin.Plugin;
-
 import java.util.Arrays;
 
 /**",Set new log length when creating file to make the creation faster .,0
"diff --git a/metrics-core/src/main/java/com/codahale/metrics/ScheduledReporter.java b/metrics-core/src/main/java/com/codahale/metrics/ScheduledReporter.java
index c0fb2fb0..b7e9dd79 100644
--- a/metrics-core/src/main/java/com/codahale/metrics/ScheduledReporter.java
+++ b/metrics-core/src/main/java/com/codahale/metrics/ScheduledReporter.java
@@ -156,7 +156,7 @@ public abstract class ScheduledReporter implements Closeable, Reporter {
      * Starts the reporter polling at the given period with the specific runnable action.
      * Visible only for testing.
      */
-    synchronized public void start(long initialDelay, long period, TimeUnit unit, Runnable runnable) {
+    synchronized void start(long initialDelay, long period, TimeUnit unit, Runnable runnable) {
         if (this.scheduledFuture != null) {
             throw new IllegalArgumentException(""Reporter already started"");
         }",Renamed projects to remove spaces in their names . . git - svn - id : http : / / google - refine . googlecode . com / svn / trunk @ 987 7d457c2a - affb - 35e4 - 300a - 418c747d4874,0
"diff --git a/libsrc/ffdec_lib/src/com/jpexs/decompiler/flash/types/BUTTONCONDACTION.java b/libsrc/ffdec_lib/src/com/jpexs/decompiler/flash/types/BUTTONCONDACTION.java
index 7f890411a..a4cddf8b3 100644
--- a/libsrc/ffdec_lib/src/com/jpexs/decompiler/flash/types/BUTTONCONDACTION.java
+++ b/libsrc/ffdec_lib/src/com/jpexs/decompiler/flash/types/BUTTONCONDACTION.java
@@ -27,6 +27,7 @@ import com.jpexs.decompiler.flash.helpers.GraphTextWriter;
 import com.jpexs.decompiler.flash.tags.Tag;
 import com.jpexs.decompiler.flash.tags.base.ASMSource;
 import com.jpexs.decompiler.flash.types.annotations.Conditional;
+import com.jpexs.decompiler.flash.types.annotations.HideInRawEdit;
 import com.jpexs.decompiler.flash.types.annotations.Internal;
 import com.jpexs.decompiler.flash.types.annotations.SWFType;
 import com.jpexs.helpers.ByteArrayRange;
@@ -154,7 +155,7 @@ public class BUTTONCONDACTION implements ASMSource, Serializable {
     /**
      * Actions to perform in byte array
      */
-    @Internal
+    @HideInRawEdit
     public ByteArrayRange actionBytes;
 
     /**
diff --git a/src/com/jpexs/decompiler/flash/gui/PreviewPanel.java b/src/com/jpexs/decompiler/flash/gui/PreviewPanel.java
index 60171d41b..642b1c874 100644
--- a/src/com/jpexs/decompiler/flash/gui/PreviewPanel.java
+++ b/src/com/jpexs/decompiler/flash/gui/PreviewPanel.java
@@ -1211,7 +1211,7 @@ public class PreviewPanel extends JPersistentSplitPane implements TagEditorPanel
         tag.getTimelined().resetTimeline();
         swf.assignClassesToSymbols();
         swf.assignExportNamesToSymbols();
-        mainPanel.repaintTree();
+        mainPanel.refreshTree(swf);
         mainPanel.setTagTreeSelectedNode(tag);
         genericEditButton.setVisible(true);
         genericSaveButton.setVisible(false);",Add version and master_node parameter to _cluster / state,0
"diff --git a/website/index.html b/website/index.html
index 85358cfbfc..fa15e43f00 100644
--- a/website/index.html
+++ b/website/index.html
@@ -171,7 +171,7 @@ <h4>Gradle</h4>
               <p>Retrofit requires at minimum Java 7 or Android 2.3.</p>
 
               <h4>ProGuard</h4>
-              <p>If you are using Proguard in your project add the following lines to your configuration:</p>
+              <p>If you are using ProGuard in your project add the following lines to your configuration:</p>
               <pre class=""prettyprint"">
 # Platform calls Class.forName on types which do not exist on Android to determine platform.
 -dontnote retrofit2.Platform
@@ -182,6 +182,7 @@ <h4>ProGuard</h4>
 # Retain declared checked exceptions for use by a Proxy instance.
 -keepattributes Exceptions
 </pre>
+            <p>Retrofit uses <a href=""https://github.com/square/okio"">Okio</a> under the hood, so you may want to look at its <a href=""https://github.com/square/okio#proguard"">ProGuard rules</a> as well.</p>
             </section>
 
             <section id=""contributing"">",Okio proguard rules link,1
"diff --git a/retrofit-mock/pom.xml b/retrofit-mock/pom.xml
index 6e2da42603..6e68c6032e 100644
--- a/retrofit-mock/pom.xml
+++ b/retrofit-mock/pom.xml
@@ -24,6 +24,11 @@
       <artifactId>jsr305</artifactId>
       <scope>provided</scope>
     </dependency>
+    <dependency>
+      <groupId>org.jetbrains.kotlin</groupId>
+      <artifactId>kotlin-stdlib</artifactId>
+      <optional>true</optional>
+    </dependency>
 
     <dependency>
       <groupId>junit</groupId>
@@ -35,10 +40,35 @@
       <artifactId>assertj-core</artifactId>
       <scope>test</scope>
     </dependency>
+    <dependency>
+      <groupId>org.jetbrains.kotlinx</groupId>
+      <artifactId>kotlinx-coroutines-core</artifactId>
+      <scope>test</scope>
+    </dependency>
   </dependencies>
 
   <build>
     <plugins>
+      <plugin>
+        <groupId>org.jetbrains.kotlin</groupId>
+        <artifactId>kotlin-maven-plugin</artifactId>
+        <executions>
+          <execution>
+            <id>compile</id>
+            <phase>process-sources</phase>
+            <goals>
+              <goal>compile</goal>
+            </goals>
+          </execution>
+          <execution>
+            <id>test-compile</id>
+            <phase>test-compile</phase>
+            <goals>
+              <goal>test-compile</goal>
+            </goals>
+          </execution>
+        </executions>
+      </plugin>
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-jar-plugin</artifactId>
diff --git a/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java
index c1adf9cfad..9cce6af358 100644
--- a/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java
+++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java
@@ -16,12 +16,18 @@
 package retrofit2.mock;
 
 import java.lang.annotation.Annotation;
+import java.lang.reflect.Method;
+import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Proxy;
 import java.lang.reflect.Type;
+import java.lang.reflect.WildcardType;
 import java.util.concurrent.ExecutorService;
 import javax.annotation.Nullable;
+import kotlin.coroutines.Continuation;
 import retrofit2.Call;
 import retrofit2.CallAdapter;
+import retrofit2.KotlinExtensions;
+import retrofit2.Response;
 import retrofit2.Retrofit;
 
 /**
@@ -54,11 +60,101 @@ public <R> T returning(Call<R> call) {
     final Call<R> behaviorCall = new BehaviorCall<>(behavior, executor, call);
     return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class[] { service },
         (proxy, method, args) -> {
-          Type returnType = method.getGenericReturnType();
+          ServiceMethodAdapterInfo adapterInfo = parseServiceMethodAdapterInfo(method);
+
           Annotation[] methodAnnotations = method.getAnnotations();
           CallAdapter<R, T> callAdapter =
-              (CallAdapter<R, T>) retrofit.callAdapter(returnType, methodAnnotations);
-          return callAdapter.adapt(behaviorCall);
+              (CallAdapter<R, T>) retrofit.callAdapter(adapterInfo.responseType, methodAnnotations);
+
+          T adapted = callAdapter.adapt(behaviorCall);
+          if (!adapterInfo.isSuspend) {
+            return adapted;
+          }
+
+          Call<Object> adaptedCall = (Call<Object>) adapted;
+          Continuation<Object> continuation = (Continuation<Object>) args[args.length - 1];
+          try {
+            return adapterInfo.wantsResponse
+                ? KotlinExtensions.awaitResponse(adaptedCall, continuation)
+                : KotlinExtensions.await(adaptedCall, continuation);
+          } catch (Exception e) {
+            return KotlinExtensions.suspendAndThrow(e, continuation);
+          }
         });
   }
+
+  /**
+   * Computes the adapter type of the method for lookup via {@link Retrofit#callAdapter} as well as
+   * information on whether the method is a {@code suspend fun}.
+   * <p>
+   * In the case of a Kotlin {@code suspend fun}, the last parameter type is a {@code Continuation}
+   * whose parameter carries the actual response type. In this case, we return {@code Call<T>} where
+   * {@code T} is the body type.
+   */
+  private static ServiceMethodAdapterInfo parseServiceMethodAdapterInfo(Method method) {
+    Type[] genericParameterTypes = method.getGenericParameterTypes();
+    if (genericParameterTypes.length != 0) {
+      Type lastParameterType = genericParameterTypes[genericParameterTypes.length - 1];
+      if (lastParameterType instanceof ParameterizedType) {
+        ParameterizedType parameterizedLastParameterType = (ParameterizedType) lastParameterType;
+        try {
+          if (parameterizedLastParameterType.getRawType() == Continuation.class) {
+            Type resultType = parameterizedLastParameterType.getActualTypeArguments()[0];
+            if (resultType instanceof WildcardType) {
+              resultType = ((WildcardType) resultType).getLowerBounds()[0];
+            }
+            if (resultType instanceof ParameterizedType) {
+              ParameterizedType parameterizedResultType = (ParameterizedType) resultType;
+              if (parameterizedResultType.getRawType() == Response.class) {
+                Type bodyType = parameterizedResultType.getActualTypeArguments()[0];
+                Type callType = new CallParameterizedTypeImpl(bodyType);
+                return new ServiceMethodAdapterInfo(true, true, callType);
+              }
+            }
+            Type callType = new CallParameterizedTypeImpl(resultType);
+            return new ServiceMethodAdapterInfo(true, false, callType);
+          }
+        } catch (NoClassDefFoundError ignored) {
+          // Not using coroutines.
+        }
+      }
+    }
+    return new ServiceMethodAdapterInfo(false, false, method.getGenericReturnType());
+  }
+
+  static final class CallParameterizedTypeImpl implements ParameterizedType {
+    private final Type bodyType;
+
+    CallParameterizedTypeImpl(Type bodyType) {
+      this.bodyType = bodyType;
+    }
+
+    @Override public Type[] getActualTypeArguments() {
+      return new Type[] { bodyType };
+    }
+
+    @Override public Type getRawType() {
+      return Call.class;
+    }
+
+    @Override public @Nullable Type getOwnerType() {
+      return null;
+    }
+  }
+
+  static class ServiceMethodAdapterInfo {
+    final boolean isSuspend;
+    /**
+     * Whether the suspend function return type was {@code Response<T>}.
+     * Only meaningful if {@link #isSuspend} is true.
+     */
+    final boolean wantsResponse;
+    final Type responseType;
+
+    ServiceMethodAdapterInfo(boolean isSuspend, boolean wantsResponse, Type responseType) {
+      this.isSuspend = isSuspend;
+      this.wantsResponse = wantsResponse;
+      this.responseType = responseType;
+    }
+  }
 }
diff --git a/retrofit-mock/src/main/java/retrofit2/mock/KotlinExtensions.kt b/retrofit-mock/src/main/java/retrofit2/mock/KotlinExtensions.kt
new file mode 100644
index 0000000000..2952951a24
--- /dev/null
+++ b/retrofit-mock/src/main/java/retrofit2/mock/KotlinExtensions.kt
@@ -0,0 +1,18 @@
+/*
+ * Copyright (C) 2019 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit2.mock
+
+inline fun <reified T> MockRetrofit.create(): BehaviorDelegate<T> = create(T::class.java)
diff --git a/retrofit-mock/src/test/java/retrofit2/mock/BehaviorDelegateKotlinTest.kt b/retrofit-mock/src/test/java/retrofit2/mock/BehaviorDelegateKotlinTest.kt
new file mode 100644
index 0000000000..2a9e27c275
--- /dev/null
+++ b/retrofit-mock/src/test/java/retrofit2/mock/BehaviorDelegateKotlinTest.kt
@@ -0,0 +1,166 @@
+/*
+ * Copyright (C) 2019 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit2.mock
+
+import kotlinx.coroutines.runBlocking
+import org.assertj.core.api.Assertions.assertThat
+import org.junit.Before
+import org.junit.Test
+import retrofit2.Response
+import retrofit2.Retrofit
+import java.io.IOException
+import java.util.Random
+import java.util.concurrent.TimeUnit.MILLISECONDS
+import java.util.concurrent.TimeUnit.NANOSECONDS
+
+class BehaviorDelegateKotlinTest {
+  internal interface DoWorkService {
+    suspend fun body(): String
+    suspend fun failure(): String
+    suspend fun response(): Response<String>
+    suspend fun responseWildcard(): Response<out String>
+  }
+
+  private val mockFailure = IOException(""Timeout!"")
+  private val behavior = NetworkBehavior.create(Random(2847))
+  private lateinit var service: DoWorkService
+
+  @Before fun before() {
+    val retrofit = Retrofit.Builder()
+        .baseUrl(""http://example.com"")
+        .build()
+    val mockRetrofit = MockRetrofit.Builder(retrofit)
+        .networkBehavior(behavior)
+        .build()
+    val delegate = mockRetrofit.create<DoWorkService>()
+
+    service = object : DoWorkService {
+      override suspend fun body(): String {
+        return delegate.returning(Calls.response(""Response!"")).body()
+      }
+
+      override suspend fun failure(): String {
+        val failure = Calls.failure<String>(mockFailure)
+        return delegate.returning(failure).failure()
+      }
+
+      override suspend fun response(): Response<String> {
+        val response = Calls.response(""Response!"")
+        return delegate.returning(response).response()
+      }
+
+      override suspend fun responseWildcard() = response()
+    }
+  }
+
+  @Test fun body() {
+    behavior.setDelay(100, MILLISECONDS)
+    behavior.setVariancePercent(0)
+    behavior.setFailurePercent(0)
+
+    val startNanos = System.nanoTime()
+    val result = runBlocking { service.body() }
+    val tookMs = NANOSECONDS.toMillis(System.nanoTime() - startNanos)
+
+    assertThat(tookMs).isGreaterThanOrEqualTo(100)
+    assertThat(result).isEqualTo(""Response!"")
+  }
+
+  @Test fun bodyFailure() {
+    behavior.setDelay(100, MILLISECONDS)
+    behavior.setVariancePercent(0)
+    behavior.setFailurePercent(100)
+
+    val startNanos = System.nanoTime()
+    val exception = runBlocking {
+      try {
+        throw AssertionError(service.body())
+      } catch (e: Exception) {
+        e
+      }
+    }
+    val tookMs = NANOSECONDS.toMillis(System.nanoTime() - startNanos)
+
+    assertThat(tookMs).isGreaterThanOrEqualTo(100)
+    assertThat(exception).isSameAs(behavior.failureException())
+  }
+
+  @Test fun failure() {
+    behavior.setDelay(100, MILLISECONDS)
+    behavior.setVariancePercent(0)
+    behavior.setFailurePercent(0)
+
+    val startNanos = System.nanoTime()
+    val exception = runBlocking {
+      try {
+        throw AssertionError(service.failure())
+      } catch (e: Exception) {
+        e
+      }
+    }
+    val tookMs = NANOSECONDS.toMillis(System.nanoTime() - startNanos)
+
+    assertThat(tookMs).isGreaterThanOrEqualTo(100)
+    // Coroutines break referential transparency on exceptions so compare type and message.
+    assertThat(exception).isExactlyInstanceOf(mockFailure.javaClass)
+    assertThat(exception).hasMessage(mockFailure.message)
+  }
+
+  @Test fun response() {
+    behavior.setDelay(100, MILLISECONDS)
+    behavior.setVariancePercent(0)
+    behavior.setFailurePercent(0)
+
+    val startNanos = System.nanoTime()
+    val result = runBlocking { service.response() }
+    val tookMs = NANOSECONDS.toMillis(System.nanoTime() - startNanos)
+
+    assertThat(tookMs).isGreaterThanOrEqualTo(100)
+    assertThat(result.body()).isEqualTo(""Response!"")
+  }
+
+  @Test fun responseFailure() {
+    behavior.setDelay(100, MILLISECONDS)
+    behavior.setVariancePercent(0)
+    behavior.setFailurePercent(100)
+
+    val startNanos = System.nanoTime()
+    val exception = runBlocking {
+      try {
+        throw AssertionError(service.response())
+      } catch (e: Exception) {
+        e
+      }
+    }
+    val tookMs = NANOSECONDS.toMillis(System.nanoTime() - startNanos)
+
+    assertThat(tookMs).isGreaterThanOrEqualTo(100)
+    assertThat(exception).isSameAs(behavior.failureException())
+  }
+
+  @Test fun responseWildcard() {
+    behavior.setDelay(100, MILLISECONDS)
+    behavior.setVariancePercent(0)
+    behavior.setFailurePercent(0)
+
+    val startNanos = System.nanoTime()
+    val result = runBlocking { service.responseWildcard() }
+    val tookMs = NANOSECONDS.toMillis(System.nanoTime() - startNanos)
+
+    assertThat(tookMs).isGreaterThanOrEqualTo(100)
+    assertThat(result.body()).isEqualTo(""Response!"")
+  }
+}",Add coroutine support to BehaviorDelegate,1
"diff --git a/src/main/java/net/dv8tion/jda/core/entities/Guild.java b/src/main/java/net/dv8tion/jda/core/entities/Guild.java
index ea4dce7d..aed17f3e 100644
--- a/src/main/java/net/dv8tion/jda/core/entities/Guild.java
+++ b/src/main/java/net/dv8tion/jda/core/entities/Guild.java
@@ -117,21 +117,9 @@ public interface Guild extends ISnowflake
      */
     List<TextChannel> getTextChannels();
     List<TextChannel> getTextChannelsByName(String name, boolean ignoreCase);
-//
-//    /**
-//     * Creates a new {@link net.dv8tion.jda.core.entities.TextChannel TextChannel} in this Guild.
-//     * For this to be successful, the logged in account has to have the {@link net.dv8tion.jda.Permission#MANAGE_CHANNEL MANAGE_CHANNEL Permission}
-//     *
-//     * @param name
-//     *      the name of the TextChannel to create
-//     * @return
-//     *      the ChannelManager for the created TextChannel
-//     * @throws net.dv8tion.jda.exceptions.GuildUnavailableException
-//     *      if the guild is temporarily unavailable
-//     */
-//    ChannelManager createTextChannel(String name);
-//
+
     VoiceChannel getVoiceChannelById(String id);
+
     /**
      * The {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannels} available on the {@link net.dv8tion.jda.core.entities.Guild Guild}.
      * The channels returned will be sorted according to their position.
@@ -140,20 +128,8 @@ public interface Guild extends ISnowflake
      *      An Immutable List of {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannels}.
      */
     List<VoiceChannel> getVoiceChannels();
+
     List<VoiceChannel> getVoiceChannelsByName(String name, boolean ignoreCase);
-//
-//    /**
-//     * Creates a new {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannel} in this Guild.
-//     * For this to be successful, the logged in account has to have the {@link net.dv8tion.jda.Permission#MANAGE_CHANNEL MANAGE_CHANNEL Permission}
-//     *
-//     * @param name
-//     *      the name of the VoiceChannel to create
-//     * @return
-//     *      the ChannelManager for the created VoiceChannel
-//     * @throws net.dv8tion.jda.exceptions.GuildUnavailableException
-//     *      if the guild is temporarily unavailable
-//     */
-//    ChannelManager createVoiceChannel(String name);
 
     /**
      * This returns the {@link net.dv8tion.jda.core.entities.Role Role} which has the same id as the one provided.<br>
@@ -175,42 +151,6 @@ public interface Guild extends ISnowflake
      */
     List<Role> getRoles();
     List<Role> getRolesByName(String name, boolean ignoreCase);
-//
-//    /**
-//     * Creates a new {@link net.dv8tion.jda.core.entities.Role Role} in this Guild.
-//     * For this to be successful, the logged in account has to have the {@link net.dv8tion.jda.Permission#MANAGE_ROLES MANAGE_ROLES Permission}
-//     *
-//     * @return
-//     *      the RoleManager for the created Role
-//     * @throws net.dv8tion.jda.exceptions.GuildUnavailableException
-//     *      if the guild is temporarily unavailable
-//     */
-//    RoleManager createRole();
-//
-//    /**
-//     * Creates a new {@link net.dv8tion.jda.core.entities.Role Role} in this {@link net.dv8tion.jda.core.entities.Guild Guild} with the same settings as the given {@link net.dv8tion.jda.core.entities.Role Role}.
-//     * It will be placed at the bottom (just over the @everyone role) to avoid permission hierarchy conflicts.
-//     * For this to be successful, the logged in account has to have the {@link net.dv8tion.jda.Permission#MANAGE_ROLES MANAGE_ROLES Permission}
-//     * and all {@link net.dv8tion.jda.Permission Permissions} the given {@link net.dv8tion.jda.core.entities.Role Role} has.
-//     *
-//     * @param role
-//     *      The {@link net.dv8tion.jda.core.entities.Role Role} that should be copied
-//     * @return
-//     *      the RoleManager for the created Role
-//     * @throws net.dv8tion.jda.exceptions.GuildUnavailableException
-//     *      if the guild is temporarily unavailable
-//     * @throws net.dv8tion.jda.exceptions.PermissionException
-//     *      if the bot doesn't has {@link net.dv8tion.jda.Permission#MANAGE_ROLES MANAGE_ROLES Permission} and every Permission the given Role has
-//     */
-//    RoleManager createCopyOfRole(Role role);
-
-//
-//    /**
-//     * Provides the {@link net.dv8tion.jda.core.entities.Role Role} that determines the color for the provided {@link net.dv8tion.jda.core.entities.User User}
-//     *
-//     * If the {@link net.dv8tion.jda.core.entities.User User} has the default color, this returns the same as getPublicRole();
-//     */
-//    Role getColorDeterminantRoleForUser(User user);
 
     /**
      * The @everyone {@link net.dv8tion.jda.core.entities.Role Role} of this {@link net.dv8tion.jda.core.entities.Guild Guild}
diff --git a/src/main/java/net/dv8tion/jda/core/managers/GuildController.java b/src/main/java/net/dv8tion/jda/core/managers/GuildController.java
index ccc405fd..cf56fabe 100644
--- a/src/main/java/net/dv8tion/jda/core/managers/GuildController.java
+++ b/src/main/java/net/dv8tion/jda/core/managers/GuildController.java
@@ -872,6 +872,100 @@ public class GuildController
         };
     }
 
+    /**
+     * Creates a new {@link net.dv8tion.jda.core.entities.TextChannel TextChannel} in this Guild.
+     * For this to be successful, the logged in account has to have the
+     * {@link net.dv8tion.jda.core.Permission#MANAGE_CHANNEL MANAGE_CHANNEL} Permission
+     *
+     * @param name
+     *      the name of the TextChannel to create
+     * @return
+     *      {@link net.dv8tion.jda.core.requests.RestAction RestAction} - <br>
+     *      &nbsp;&nbsp;&nbsp;&nbsp;<b>Type</b>: {@link net.dv8tion.jda.core.entities.TextChannel TextChannel}<br>
+     *      &nbsp;&nbsp;&nbsp;&nbsp;<b>Value</b>: The newly created {@link net.dv8tion.jda.core.entities.TextChannel TextChannel}
+     * @throws net.dv8tion.jda.core.exceptions.PermissionException
+     *      If the logged in account does not have the {@link net.dv8tion.jda.core.Permission#MANAGE_CHANNEL} permission.
+     * @throws java.lang.IllegalArgumentException
+     *      If the provided name is less than 2 characters or greater than 100 characters in length
+     * @throws net.dv8tion.jda.core.exceptions.GuildUnavailableException
+     *      if the guild is temporarily unavailable
+     */
+    public RestAction<TextChannel> createTextChannel(String name)
+    {
+        checkAvailable();
+        checkPermission(Permission.MANAGE_CHANNEL);
+        checkNull(name, ""name"");
+
+        if (name.length() < 2 || name.length() > 100)
+            throw new IllegalArgumentException(""Provided name must be 2 - 100 characters in length"");
+
+        JSONObject body = new JSONObject()
+                .put(""type"", ""text"")
+                .put(""name"", name);
+        Route.CompiledRoute route = Route.Guilds.CREATE_CHANNEL.compile(guild.getId());
+        return new RestAction<TextChannel>(getJDA(), route, body)
+        {
+            @Override
+            protected void handleResponse(Response response, Request request)
+            {
+                if (!response.isOk())
+                    request.onFailure(response);
+
+                JSONObject chanJson = response.getObject();
+                TextChannel tc = EntityBuilder.get(api).createTextChannel(chanJson, guild.getId());
+
+                request.onSuccess(tc);
+            }
+        };
+    }
+
+    /**
+     * Creates a new {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannel} in this Guild.
+     * For this to be successful, the logged in account has to have the
+     * {@link net.dv8tion.jda.core.Permission#MANAGE_CHANNEL MANAGE_CHANNEL} Permission.
+     *
+     * @param name
+     *      the name of the VoiceChannel to create
+     * @return
+     *      {@link net.dv8tion.jda.core.requests.RestAction RestAction} - <br>
+     *      &nbsp;&nbsp;&nbsp;&nbsp;<b>Type</b>: {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannel}<br>
+     *      &nbsp;&nbsp;&nbsp;&nbsp;<b>Value</b>: The newly created {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannel}
+     * @throws net.dv8tion.jda.core.exceptions.PermissionException
+     *      If the logged in account does not have the {@link net.dv8tion.jda.core.Permission#MANAGE_CHANNEL} permission.
+     * @throws java.lang.IllegalArgumentException
+     *      If the provided name is less than 2 characters or greater than 100 characters in length
+     * @throws net.dv8tion.jda.core.exceptions.GuildUnavailableException
+     *      if the guild is temporarily unavailable
+     */
+    public RestAction<VoiceChannel> createVoiceChannel(String name)
+    {
+        checkAvailable();
+        checkPermission(Permission.MANAGE_CHANNEL);
+        checkNull(name, ""name"");
+
+        if (name.length() < 2 || name.length() > 100)
+            throw new IllegalArgumentException(""Provided name must be 2 to 100 characters in length"");
+
+        JSONObject body = new JSONObject()
+                .put(""type"", ""voice"")
+                .put(""name"", name);
+        Route.CompiledRoute route = Route.Guilds.CREATE_CHANNEL.compile(guild.getId());
+        return new RestAction<VoiceChannel>(getJDA(), route, body)
+        {
+            @Override
+            protected void handleResponse(Response response, Request request)
+            {
+                if (!response.isOk())
+                    request.onFailure(response);
+
+                JSONObject chanJson = response.getObject();
+                VoiceChannel vc = EntityBuilder.get(api).createVoiceChannel(chanJson, guild.getId());
+
+                request.onSuccess(vc);
+            }
+        };
+    }
+
     protected void checkAvailable()
     {
         if (!guild.isAvailable())
diff --git a/src/main/java/net/dv8tion/jda/core/requests/Route.java b/src/main/java/net/dv8tion/jda/core/requests/Route.java
index 9524a9f2..b94cd7eb 100644
--- a/src/main/java/net/dv8tion/jda/core/requests/Route.java
+++ b/src/main/java/net/dv8tion/jda/core/requests/Route.java
@@ -52,6 +52,7 @@ public class Route
     {
         public static final Route GET_GUILD =        new Route(GET,    ""guilds/{guild_id}"",                   ""guild_id"");
         public static final Route MODIFY_GUILD =     new Route(PATCH,  ""guilds/{guild_id}"",                   ""guild_id"");
+        public static final Route CREATE_CHANNEL =   new Route(POST,   ""guilds/{guild_id}/channels"",          ""guild_id"");
         public static final Route GET_CHANNELS =     new Route(GET,    ""guilds/{guild_id}/channels"",          ""guild_id"");
         public static final Route MODIFY_CHANNELS =  new Route(PATCH,  ""guilds/{guild_id}/channels"",          ""guild_id"");
         public static final Route GET_BANS =         new Route(GET,    ""guilds/{guild_id}/bans"",              ""guild_id"");
@@ -60,7 +61,7 @@ public class Route
         public static final Route UNBAN =            new Route(DELETE, ""guilds/{guild_id}/bans/{user_id}"",    ""guild_id"");
         public static final Route KICK_MEMBER =      new Route(DELETE, ""guilds/{guild_id}/members/{user_id}"", ""guild_id"");
         public static final Route MODIFY_MEMBER =    new Route(PATCH,  ""guilds/{guild_id}/members/{user_id}"", ""guild_id"");
-        public static final Route MODIFY_SELF_NICK = new Route(PATCH, ""guilds/{guild_id}/members/@me/nick"",  ""guild_id"");
+        public static final Route MODIFY_SELF_NICK = new Route(PATCH,  ""guilds/{guild_id}/members/@me/nick"",  ""guild_id"");
         public static final Route PRUNABLE_COUNT =   new Route(GET,    ""guilds/{guild_id}/prune?days={}"",     ""guild_id"");
         public static final Route PRUNE_MEMBERS =    new Route(POST,   ""guilds/{guild_id}/prune?days={}"",     ""guild_id"");
 
@@ -80,9 +81,9 @@ public class Route
 
     public static class Channels
     {
-        public static final Route DELETE_CHANNEL = new Route(DELETE, ""channels/{channel_id}"",        ""channel_id"");
-        public static final Route MODIFY_CHANNEL = new Route(PATCH,  ""channels/{channel_id}"",        ""channel_id"");
-        public static final Route SEND_TYPING =    new Route(POST,   ""channels/{channel_id}/typing"", ""channel_id"");
+        public static final Route DELETE_CHANNEL =       new Route(DELETE, ""channels/{channel_id}"");
+        public static final Route MODIFY_CHANNEL =       new Route(PATCH,  ""channels/{channel_id}"",        ""channel_id"");
+        public static final Route SEND_TYPING =          new Route(POST,   ""channels/{channel_id}/typing"", ""channel_id"");
         public static final Route GET_PERMISSIONS =      new Route(GET,    ""channels/{channel_id}/permissions"",                   ""channel_id"");
         public static final Route GET_PERM_OVERRIDE =    new Route(GET,    ""channels/{channel_id}/permissions/{permoverride_id}"", ""channel_id"");
         public static final Route CREATE_PERM_OVERRIDE = new Route(PUT,    ""channels/{channel_id}/permissions/{permoverride_id}"", ""channel_id"");",Add onion address for @ robkaandorp \' s btcnode .,0
"diff --git a/buildSrc/src/main/kotlin/androidx/build/Jetify.kt b/buildSrc/src/main/kotlin/androidx/build/Jetify.kt
index 25b8e8b50b3..ec84188c299 100644
--- a/buildSrc/src/main/kotlin/androidx/build/Jetify.kt
+++ b/buildSrc/src/main/kotlin/androidx/build/Jetify.kt
@@ -30,6 +30,7 @@ val archivesToDejetify = listOf(
     ""m2repository/androidx/arch/**"",
     ""m2repository/androidx/arch/core/**"",
     ""m2repository/androidx/asynclayoutinflater/**"",
+    ""m2repository/androidx/benchmark/**"",
     ""m2repository/androidx/biometric/**"",
     ""m2repository/androidx/browser/**"",
     ""m2repository/androidx/camera/**"",
diff --git a/jetifier/jetifier/migration.config b/jetifier/jetifier/migration.config
index 03e7d2abd62..16ac67b77aa 100644
--- a/jetifier/jetifier/migration.config
+++ b/jetifier/jetifier/migration.config
@@ -613,6 +613,10 @@
       ""from"": ""androidx/wear/(.*)"",
       ""to"": ""ignore""
     },
+    {
+      ""from"": ""androidx/benchmark/(.*)"",
+      ""to"": ""ignore""
+    },
     {
       ""from"": ""androidx/camera/(.*)"",
       ""to"": ""ignore""
@@ -971,6 +975,10 @@
       ""from"": ""androidx/sharetarget"",
       ""to"": ""androidx/sharetarget""
     },
+    {
+      ""from"": ""androidx/benchmark"",
+      ""to"": ""androidx/benchmark""
+    },
     {
       ""from"": ""androidx/camera"",
       ""to"": ""androidx/camera""
@@ -3021,6 +3029,30 @@
         ""version"": ""{newSlVersion}""
       }
     },
+    {
+      ""from"": {
+        ""groupId"": ""androidx.benchmark"",
+        ""artifactId"": ""benchmark-common"",
+        ""version"": ""{newBenchmarkVersion}""
+      },
+      ""to"": {
+        ""groupId"": ""androidx.benchmark"",
+        ""artifactId"": ""benchmark-common"",
+        ""version"": ""{newBenchmarkVersion}""
+      }
+    },
+    {
+      ""from"": {
+        ""groupId"": ""androidx.benchmark"",
+        ""artifactId"": ""benchmark-junit4"",
+        ""version"": ""{newBenchmarkVersion}""
+      },
+      ""to"": {
+        ""groupId"": ""androidx.benchmark"",
+        ""artifactId"": ""benchmark-junit4"",
+        ""version"": ""{newBenchmarkVersion}""
+      }
+    },
     {
       ""from"": {
         ""groupId"": ""androidx.camera"",
@@ -3133,6 +3165,7 @@
       ""newBiometricVersion"": ""1.0.0-alpha03"",
       ""newDataBindingVersion"": ""undefined"",
       ""newWorkManagerVersion"": ""2.0.0"",
+      ""newBenchmarkVersion"": ""1.0.0-alpha04"",
       ""newCameraVersion"": ""1.0.0-alpha01""
     }
   },",Add more rest client tests ( <issue_id> ) ( <issue_id> ),0
"diff --git a/src/main/java/org/junit/Assert.java b/src/main/java/org/junit/Assert.java
index 09c021ba1c93..aa47acc0b146 100644
--- a/src/main/java/org/junit/Assert.java
+++ b/src/main/java/org/junit/Assert.java
@@ -585,6 +585,7 @@ static public void assertEquals(String message, float expected,
 			return;
 		if (!(Math.abs(expected - actual) <= delta))
 			failNotEquals(message, new Float(expected), new Float(actual));
+		}
 	static private boolean doubleIsDifferent(double d1, double d2, double delta) {
 		if (Double.compare(d1, d2) == 0)
 			return false;",closed method assertEquals with },1
"diff --git a/src/main/java/com/google/devtools/build/lib/rules/proto/ProtoCommon.java b/src/main/java/com/google/devtools/build/lib/rules/proto/ProtoCommon.java
index 543bf64e8c..36c0b8d222 100644
--- a/src/main/java/com/google/devtools/build/lib/rules/proto/ProtoCommon.java
+++ b/src/main/java/com/google/devtools/build/lib/rules/proto/ProtoCommon.java
@@ -292,9 +292,9 @@ public class ProtoCommon {
     NestedSetBuilder<Artifact> result = NestedSetBuilder.stableOrder();
     ImmutableList<Artifact> srcs = ruleContext.getPrerequisiteArtifacts(""srcs"", TARGET).list();
     if (srcs.isEmpty()) {
-      for (ProtoSupportDataProvider provider :
-          ruleContext.getPrerequisites(""deps"", TARGET, ProtoSupportDataProvider.class)) {
-        result.addTransitive(provider.getSupportData().getProtosInDirectDeps());
+      for (ProtoSourcesProvider provider :
+          ruleContext.getPrerequisites(""deps"", TARGET, ProtoSourcesProvider.class)) {
+        result.addTransitive(provider.getProtosInDirectDeps());
       }
     } else {
       for (ProtoSourcesProvider provider :
@@ -312,9 +312,9 @@ public class ProtoCommon {
   @Nullable
   public static NestedSet<Artifact> computeProtosInExportedDeps(RuleContext ruleContext) {
     NestedSetBuilder<Artifact> result = NestedSetBuilder.stableOrder();
-    for (ProtoSupportDataProvider provider :
-        ruleContext.getPrerequisites(""exports"", TARGET, ProtoSupportDataProvider.class)) {
-      result.addTransitive(provider.getSupportData().getProtosInDirectDeps());
+    for (ProtoSourcesProvider provider :
+        ruleContext.getPrerequisites(""exports"", TARGET, ProtoSourcesProvider.class)) {
+      result.addTransitive(provider.getProtosInDirectDeps());
     }
     return result.build();
   }",added support for auto config reloadig of native profiles,0
"diff --git a/modules/flowable-app-engine-rest/src/main/java/org/flowable/app/rest/AppRestApiInterceptor.java b/modules/flowable-app-engine-rest/src/main/java/org/flowable/app/rest/AppRestApiInterceptor.java
index aa186538f9..350a2fff25 100644
--- a/modules/flowable-app-engine-rest/src/main/java/org/flowable/app/rest/AppRestApiInterceptor.java
+++ b/modules/flowable-app-engine-rest/src/main/java/org/flowable/app/rest/AppRestApiInterceptor.java
@@ -15,6 +15,7 @@ package org.flowable.app.rest;
 import org.flowable.app.api.repository.AppDefinition;
 import org.flowable.app.api.repository.AppDefinitionQuery;
 import org.flowable.app.api.repository.AppDeployment;
+import org.flowable.app.api.repository.AppDeploymentBuilder;
 import org.flowable.app.api.repository.AppDeploymentQuery;
 
 public interface AppRestApiInterceptor {
@@ -28,6 +29,8 @@ public interface AppRestApiInterceptor {
     void accessDeploymentsWithQuery(AppDeploymentQuery deploymentQuery);
     
     void executeNewDeploymentForTenantId(String tenantId);
+
+    void enhanceDeployment(AppDeploymentBuilder deploymentBuilder);
     
     void deleteDeployment(AppDeployment deployment);
     
diff --git a/modules/flowable-app-engine-rest/src/main/java/org/flowable/app/rest/service/api/repository/AppDeploymentCollectionResource.java b/modules/flowable-app-engine-rest/src/main/java/org/flowable/app/rest/service/api/repository/AppDeploymentCollectionResource.java
index ca94247f9b..4663e99792 100644
--- a/modules/flowable-app-engine-rest/src/main/java/org/flowable/app/rest/service/api/repository/AppDeploymentCollectionResource.java
+++ b/modules/flowable-app-engine-rest/src/main/java/org/flowable/app/rest/service/api/repository/AppDeploymentCollectionResource.java
@@ -202,6 +202,10 @@ public class AppDeploymentCollectionResource {
                 deploymentBuilder.tenantId(tenantId);
             }
 
+            if (restApiInterceptor != null) {
+                restApiInterceptor.enhanceDeployment(deploymentBuilder);
+            }
+
             AppDeployment deployment = deploymentBuilder.deploy();
             response.setStatus(HttpStatus.CREATED.value());
 
diff --git a/modules/flowable-cmmn-rest/src/main/java/org/flowable/cmmn/rest/service/api/CmmnRestApiInterceptor.java b/modules/flowable-cmmn-rest/src/main/java/org/flowable/cmmn/rest/service/api/CmmnRestApiInterceptor.java
index 824ecef26a..211e1b5ec3 100644
--- a/modules/flowable-cmmn-rest/src/main/java/org/flowable/cmmn/rest/service/api/CmmnRestApiInterceptor.java
+++ b/modules/flowable-cmmn-rest/src/main/java/org/flowable/cmmn/rest/service/api/CmmnRestApiInterceptor.java
@@ -22,6 +22,7 @@ import org.flowable.cmmn.api.history.HistoricVariableInstanceQuery;
 import org.flowable.cmmn.api.repository.CaseDefinition;
 import org.flowable.cmmn.api.repository.CaseDefinitionQuery;
 import org.flowable.cmmn.api.repository.CmmnDeployment;
+import org.flowable.cmmn.api.repository.CmmnDeploymentBuilder;
 import org.flowable.cmmn.api.repository.CmmnDeploymentQuery;
 import org.flowable.cmmn.api.runtime.CaseInstance;
 import org.flowable.cmmn.api.runtime.CaseInstanceBuilder;
@@ -87,6 +88,8 @@ public interface CmmnRestApiInterceptor {
     void accessDeploymentsWithQuery(CmmnDeploymentQuery deploymentQuery);
     
     void executeNewDeploymentForTenantId(String tenantId);
+
+    void enhanceDeployment(CmmnDeploymentBuilder cmmnDeploymentBuilder);
     
     void deleteDeployment(CmmnDeployment deployment);
     
diff --git a/modules/flowable-cmmn-rest/src/main/java/org/flowable/cmmn/rest/service/api/repository/DeploymentCollectionResource.java b/modules/flowable-cmmn-rest/src/main/java/org/flowable/cmmn/rest/service/api/repository/DeploymentCollectionResource.java
index 85c832c565..9f0817b614 100644
--- a/modules/flowable-cmmn-rest/src/main/java/org/flowable/cmmn/rest/service/api/repository/DeploymentCollectionResource.java
+++ b/modules/flowable-cmmn-rest/src/main/java/org/flowable/cmmn/rest/service/api/repository/DeploymentCollectionResource.java
@@ -212,6 +212,10 @@ public class DeploymentCollectionResource {
                 deploymentBuilder.tenantId(tenantId);
             }
 
+            if (restApiInterceptor != null) {
+                restApiInterceptor.enhanceDeployment(deploymentBuilder);
+            }
+
             CmmnDeployment deployment = deploymentBuilder.deploy();
 
             response.setStatus(HttpStatus.CREATED.value());
diff --git a/modules/flowable-dmn-rest/src/main/java/org/flowable/dmn/rest/service/api/DmnRestApiInterceptor.java b/modules/flowable-dmn-rest/src/main/java/org/flowable/dmn/rest/service/api/DmnRestApiInterceptor.java
index 86d73dd1bc..d356d41a42 100644
--- a/modules/flowable-dmn-rest/src/main/java/org/flowable/dmn/rest/service/api/DmnRestApiInterceptor.java
+++ b/modules/flowable-dmn-rest/src/main/java/org/flowable/dmn/rest/service/api/DmnRestApiInterceptor.java
@@ -15,6 +15,7 @@ package org.flowable.dmn.rest.service.api;
 import org.flowable.dmn.api.DmnDecisionTable;
 import org.flowable.dmn.api.DmnDecisionTableQuery;
 import org.flowable.dmn.api.DmnDeployment;
+import org.flowable.dmn.api.DmnDeploymentBuilder;
 import org.flowable.dmn.api.DmnDeploymentQuery;
 import org.flowable.dmn.api.DmnHistoricDecisionExecution;
 import org.flowable.dmn.api.DmnHistoricDecisionExecutionQuery;
@@ -33,6 +34,8 @@ public interface DmnRestApiInterceptor {
     void accessDeploymentsWithQuery(DmnDeploymentQuery deploymentQuery);
     
     void executeNewDeploymentForTenantId(String tenantId);
+
+    void enhanceDeployment(DmnDeploymentBuilder dmnDeploymentBuilder);
     
     void deleteDeployment(DmnDeployment deployment);
     
diff --git a/modules/flowable-dmn-rest/src/main/java/org/flowable/dmn/rest/service/api/repository/DmnDeploymentCollectionResource.java b/modules/flowable-dmn-rest/src/main/java/org/flowable/dmn/rest/service/api/repository/DmnDeploymentCollectionResource.java
index 1eca4ea4db..77bd587bfb 100644
--- a/modules/flowable-dmn-rest/src/main/java/org/flowable/dmn/rest/service/api/repository/DmnDeploymentCollectionResource.java
+++ b/modules/flowable-dmn-rest/src/main/java/org/flowable/dmn/rest/service/api/repository/DmnDeploymentCollectionResource.java
@@ -183,6 +183,10 @@ public class DmnDeploymentCollectionResource {
                 deploymentBuilder.tenantId(tenantId);
             }
 
+            if (restApiInterceptor != null) {
+                restApiInterceptor.enhanceDeployment(deploymentBuilder);
+            }
+
             DmnDeployment deployment = deploymentBuilder.deploy();
 
             response.setStatus(HttpStatus.CREATED.value());
diff --git a/modules/flowable-form-rest/src/main/java/org/flowable/form/rest/FormRestApiInterceptor.java b/modules/flowable-form-rest/src/main/java/org/flowable/form/rest/FormRestApiInterceptor.java
index 154b1612d8..a06e5df1dc 100644
--- a/modules/flowable-form-rest/src/main/java/org/flowable/form/rest/FormRestApiInterceptor.java
+++ b/modules/flowable-form-rest/src/main/java/org/flowable/form/rest/FormRestApiInterceptor.java
@@ -15,6 +15,7 @@ package org.flowable.form.rest;
 import org.flowable.form.api.FormDefinition;
 import org.flowable.form.api.FormDefinitionQuery;
 import org.flowable.form.api.FormDeployment;
+import org.flowable.form.api.FormDeploymentBuilder;
 import org.flowable.form.api.FormDeploymentQuery;
 import org.flowable.form.api.FormInfo;
 import org.flowable.form.api.FormInstance;
@@ -41,6 +42,8 @@ public interface FormRestApiInterceptor {
     void accessDeploymentsWithQuery(FormDeploymentQuery deploymentQuery);
     
     void executeNewDeploymentForTenantId(String tenantId);
+
+    void enhanceDeployment(FormDeploymentBuilder deploymentBuilder);
     
     void deleteDeployment(FormDeployment deployment);
     
diff --git a/modules/flowable-form-rest/src/main/java/org/flowable/form/rest/service/api/repository/FormDeploymentCollectionResource.java b/modules/flowable-form-rest/src/main/java/org/flowable/form/rest/service/api/repository/FormDeploymentCollectionResource.java
index 6bc3a307c3..09b1e4736c 100644
--- a/modules/flowable-form-rest/src/main/java/org/flowable/form/rest/service/api/repository/FormDeploymentCollectionResource.java
+++ b/modules/flowable-form-rest/src/main/java/org/flowable/form/rest/service/api/repository/FormDeploymentCollectionResource.java
@@ -180,6 +180,10 @@ public class FormDeploymentCollectionResource {
                 deploymentBuilder.tenantId(tenantId);
             }
 
+            if (restApiInterceptor != null) {
+                restApiInterceptor.enhanceDeployment(deploymentBuilder);
+            }
+
             FormDeployment deployment = deploymentBuilder.deploy();
             response.setStatus(HttpStatus.CREATED.value());
 
diff --git a/modules/flowable-rest/src/main/java/org/flowable/rest/service/api/BpmnRestApiInterceptor.java b/modules/flowable-rest/src/main/java/org/flowable/rest/service/api/BpmnRestApiInterceptor.java
index 3b40aff23f..50aed9d22e 100644
--- a/modules/flowable-rest/src/main/java/org/flowable/rest/service/api/BpmnRestApiInterceptor.java
+++ b/modules/flowable-rest/src/main/java/org/flowable/rest/service/api/BpmnRestApiInterceptor.java
@@ -19,6 +19,7 @@ import org.flowable.engine.history.HistoricDetailQuery;
 import org.flowable.engine.history.HistoricProcessInstance;
 import org.flowable.engine.history.HistoricProcessInstanceQuery;
 import org.flowable.engine.repository.Deployment;
+import org.flowable.engine.repository.DeploymentBuilder;
 import org.flowable.engine.repository.DeploymentQuery;
 import org.flowable.engine.repository.Model;
 import org.flowable.engine.repository.ModelQuery;
@@ -113,6 +114,8 @@ public interface BpmnRestApiInterceptor {
     void accessDeploymentsWithQuery(DeploymentQuery deploymentQuery);
     
     void executeNewDeploymentForTenantId(String tenantId);
+
+    void enhanceDeployment(DeploymentBuilder deploymentBuilder);
     
     void deleteDeployment(Deployment deployment);
     
diff --git a/modules/flowable-rest/src/main/java/org/flowable/rest/service/api/repository/DeploymentCollectionResource.java b/modules/flowable-rest/src/main/java/org/flowable/rest/service/api/repository/DeploymentCollectionResource.java
index 70518860ed..748cf32889 100644
--- a/modules/flowable-rest/src/main/java/org/flowable/rest/service/api/repository/DeploymentCollectionResource.java
+++ b/modules/flowable-rest/src/main/java/org/flowable/rest/service/api/repository/DeploymentCollectionResource.java
@@ -215,6 +215,10 @@ public class DeploymentCollectionResource {
                 deploymentBuilder.tenantId(tenantId);
             }
 
+            if (restApiInterceptor != null) {
+                restApiInterceptor.enhanceDeployment(deploymentBuilder);
+            }
+
             Deployment deployment = deploymentBuilder.deploy();
 
             response.setStatus(HttpStatus.CREATED.value());",Updated SoftwareSerial examples so that they work easier with Leonardo and Mega,0
"diff --git a/doc/ReleaseNotes4.9b1.html b/doc/ReleaseNotes4.9b1.html
new file mode 100644
index 000000000000..c9cbdc48243a
--- /dev/null
+++ b/doc/ReleaseNotes4.9b1.html
@@ -0,0 +1,4 @@
+
+Can't open /Users/saff/git-repos/cry-overconfident-headline/junit/doc/ReleaseNotes4.9b1.txt: No such file or directory at build/Markdown.pl line 218.
+Use of uninitialized value $text in substitution (s///) at build/Markdown.pl line 245.
+Use of uninitialized value $text in substitution (s///) at build/Markdown.pl line 246.","Adding bogus markdown, but should be removed later",0
"diff --git a/src/main/java/org/junit/experimental/theories/Theories.java b/src/main/java/org/junit/experimental/theories/Theories.java
index 0ade9015504d..14e8232ba004 100644
--- a/src/main/java/org/junit/experimental/theories/Theories.java
+++ b/src/main/java/org/junit/experimental/theories/Theories.java
@@ -9,14 +9,14 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.junit.Assert;
+import org.junit.Assume;
 import org.junit.Assume.AssumptionViolatedException;
 import org.junit.experimental.theories.PotentialAssignment.CouldNotGenerateValueException;
 import org.junit.experimental.theories.internal.Assignments;
 import org.junit.experimental.theories.internal.ParameterizedAssertionError;
+import org.junit.internal.runners.InitializationError;
 import org.junit.internal.runners.JUnit4ClassRunner;
 import org.junit.internal.runners.links.Statement;
-import org.junit.internal.runners.model.InitializationError;
 import org.junit.internal.runners.model.FrameworkMethod;
 
 @SuppressWarnings(""restriction"")
@@ -66,7 +66,7 @@ public void evaluate() throws Throwable {
 					fTestMethod.getMethod(), fTestClass.getJavaClass()));
 
 			if (successes == 0)
-				Assert
+				Assume
 						.fail(""Never found parameters that satisfied method.  Violated assumptions: ""
 								+ fInvalidParameters);
 		}
@@ -126,9 +126,6 @@ protected Statement invoke(FrameworkMethod method, Object test) {
 
 				@Override
 				public Object createTest() throws Exception {
-					// TODO: (Nov 26, 2007 8:44:14 PM) no matching data should
-					// ignore
-
 					return getTestClass().getConstructor().newInstance(
 							complete.getConstructorArguments(nullsOk()));
 				}
@@ -181,7 +178,4 @@ protected void handleDataPointSuccess() {
 			successes++;
 		}
 	}
-
-	// TODO: (Nov 26, 2007 12:14:24 PM) complex
-
 }
\ No newline at end of file","No matching parameters is now an assumption failure, not an assertion failure",1
"diff --git a/src/main/java/com/google/devtools/build/lib/runtime/CommandEnvironment.java b/src/main/java/com/google/devtools/build/lib/runtime/CommandEnvironment.java
index 73c00d3fa2..1208995695 100644
--- a/src/main/java/com/google/devtools/build/lib/runtime/CommandEnvironment.java
+++ b/src/main/java/com/google/devtools/build/lib/runtime/CommandEnvironment.java
@@ -166,10 +166,10 @@ public final class CommandEnvironment {
   }
 
   /**
-   * Return an ordered version of the client environment restricted to those variables
-   * whitelisted by the command-line options to be inheritable by actions.
+   * Return an ordered version of the client environment restricted to those variables whitelisted
+   * by the command-line options to be inheritable by actions.
    */
-  private Map<String, String> getCommandlineWhitelistedClientEnv() {
+  public Map<String, String> getWhitelistedClientEnv() {
     Map<String, String> visibleEnv = new TreeMap<>();
     for (String var : visibleClientEnv) {
       String value = clientEnv.get(var);
@@ -426,7 +426,7 @@ public final class CommandEnvironment {
         getCommandId(),
         // TODO(bazel-team): this optimization disallows rule-specified additional dependencies
         // on the client environment!
-        getCommandlineWhitelistedClientEnv(),
+        getWhitelistedClientEnv(),
         timestampGranularityMonitor);
   }
 
diff --git a/src/main/java/com/google/devtools/build/lib/runtime/commands/InfoCommand.java b/src/main/java/com/google/devtools/build/lib/runtime/commands/InfoCommand.java
index 0d7fb6abab..b5e596fb88 100644
--- a/src/main/java/com/google/devtools/build/lib/runtime/commands/InfoCommand.java
+++ b/src/main/java/com/google/devtools/build/lib/runtime/commands/InfoCommand.java
@@ -193,29 +193,31 @@ public class InfoCommand implements BlazeCommand {
 
   static Map<String, InfoItem> getHardwiredInfoItemMap(OptionsProvider commandOptions,
       String productName) {
-    List<InfoItem> hardwiredInfoItems = ImmutableList.<InfoItem>of(
-        new InfoItem.WorkspaceInfoItem(),
-        new InfoItem.InstallBaseInfoItem(),
-        new InfoItem.OutputBaseInfoItem(productName),
-        new InfoItem.ExecutionRootInfoItem(),
-        new InfoItem.OutputPathInfoItem(),
-        new InfoItem.BlazeBinInfoItem(productName),
-        new InfoItem.BlazeGenfilesInfoItem(productName),
-        new InfoItem.BlazeTestlogsInfoItem(productName),
-        new InfoItem.CommandLogInfoItem(),
-        new InfoItem.MessageLogInfoItem(),
-        new InfoItem.ReleaseInfoItem(productName),
-        new InfoItem.ServerPidInfoItem(productName),
-        new InfoItem.PackagePathInfoItem(commandOptions),
-        new InfoItem.UsedHeapSizeInfoItem(),
-        new InfoItem.UsedHeapSizeAfterGcInfoItem(),
-        new InfoItem.CommitedHeapSizeInfoItem(),
-        new InfoItem.MaxHeapSizeInfoItem(),
-        new InfoItem.GcTimeInfoItem(),
-        new InfoItem.GcCountInfoItem(),
-        new InfoItem.DefaultsPackageInfoItem(),
-        new InfoItem.BuildLanguageInfoItem(),
-        new InfoItem.DefaultPackagePathInfoItem(commandOptions));
+    List<InfoItem> hardwiredInfoItems =
+        ImmutableList.<InfoItem>of(
+            new InfoItem.WorkspaceInfoItem(),
+            new InfoItem.InstallBaseInfoItem(),
+            new InfoItem.OutputBaseInfoItem(productName),
+            new InfoItem.ExecutionRootInfoItem(),
+            new InfoItem.OutputPathInfoItem(),
+            new InfoItem.ClientEnv(),
+            new InfoItem.BlazeBinInfoItem(productName),
+            new InfoItem.BlazeGenfilesInfoItem(productName),
+            new InfoItem.BlazeTestlogsInfoItem(productName),
+            new InfoItem.CommandLogInfoItem(),
+            new InfoItem.MessageLogInfoItem(),
+            new InfoItem.ReleaseInfoItem(productName),
+            new InfoItem.ServerPidInfoItem(productName),
+            new InfoItem.PackagePathInfoItem(commandOptions),
+            new InfoItem.UsedHeapSizeInfoItem(),
+            new InfoItem.UsedHeapSizeAfterGcInfoItem(),
+            new InfoItem.CommitedHeapSizeInfoItem(),
+            new InfoItem.MaxHeapSizeInfoItem(),
+            new InfoItem.GcTimeInfoItem(),
+            new InfoItem.GcCountInfoItem(),
+            new InfoItem.DefaultsPackageInfoItem(),
+            new InfoItem.BuildLanguageInfoItem(),
+            new InfoItem.DefaultPackagePathInfoItem(commandOptions));
     ImmutableMap.Builder<String, InfoItem> result = new ImmutableMap.Builder<>();
     for (InfoItem item : hardwiredInfoItems) {
       result.put(item.getName(), item);
diff --git a/src/main/java/com/google/devtools/build/lib/runtime/commands/InfoItem.java b/src/main/java/com/google/devtools/build/lib/runtime/commands/InfoItem.java
index e8dc77f352..e8836e554f 100644
--- a/src/main/java/com/google/devtools/build/lib/runtime/commands/InfoItem.java
+++ b/src/main/java/com/google/devtools/build/lib/runtime/commands/InfoItem.java
@@ -46,6 +46,7 @@ import java.lang.management.ManagementFactory;
 import java.lang.management.MemoryMXBean;
 import java.lang.management.MemoryUsage;
 import java.util.Collection;
+import java.util.Map;
 
 /**
  * An item that is returned by <code>blaze info</code>.
@@ -482,6 +483,29 @@ public abstract class InfoItem {
     }
   }
 
+  /** Info item for the effective current client environment. */
+  public static final class ClientEnv extends InfoItem {
+    public ClientEnv() {
+      super(
+          ""client-env"",
+          ""The specifications that need to be added to the project-specific rc file to freeze the""
+              + "" current client environment"",
+          true);
+    }
+
+    @Override
+    public byte[] get(Supplier<BuildConfiguration> configurationSupplier, CommandEnvironment env)
+        throws AbruptExitException {
+      String result = """";
+      for (Map.Entry<String, String> entry : env.getWhitelistedClientEnv().entrySet()) {
+        // TODO(bazel-team): as the syntax of our rc-files does not support to express new-lines in
+        // values, we produce syntax errors if the value of the entry contains a newline character.
+        result += ""common --action_env="" + entry.getKey() + ""="" + entry.getValue() + ""\n"";
+      }
+      return print(result);
+    }
+  }
+
   /**
    * Info item for the default package. It is deprecated, it still works, when
    * explicitly requested, but are not shown by default. It prints multi-line messages and thus
diff --git a/src/test/shell/integration/action_env_test.sh b/src/test/shell/integration/action_env_test.sh
index 017aa892d3..80976ed34b 100755
--- a/src/test/shell/integration/action_env_test.sh
+++ b/src/test/shell/integration/action_env_test.sh
@@ -121,4 +121,26 @@ function test_latest_wins_env() {
   expect_not_log ""FOO=foo""
 }
 
+function test_env_freezing() {
+  cat > .${PRODUCT_NAME}rc <<EOF
+common --action_env=FREEZE_TEST_FOO
+common --action_env=FREEZE_TEST_BAR=is_fixed
+common --action_env=FREEZE_TEST_BAZ=will_be_overridden
+build --action_env=FREEZE_TEST_BUILD
+EOF
+
+  export FREEZE_TEST_FOO=client_foo
+  export FREEZE_TEST_BAR=client_bar
+  export FREEZE_TEST_BAZ=client_baz
+  export FREEZE_TEST_BUILD=client_build
+
+  $bazel info --action_env=FREEZE_TEST_BAZ client-env > $TEST_log
+  expect_log ""common --action_env=FREEZE_TEST_FOO=client_foo""
+  expect_not_log ""FREEZE_TEST_BAR""
+  expect_log ""common --action_env=FREEZE_TEST_BAZ=client_baz""
+  expect_log ""common --action_env=FREEZE_TEST_BUILD=client_build""
+
+  rm -f .${PRODUCT_NAME}rc
+}
+
 run_suite ""Tests for bazel's handling of environment variables in actions""",exclude SchemaLogEnsureSqlScriptTest .,0
"diff --git a/src/main/java/org/junit/internal/requests/ClassRequest.java b/src/main/java/org/junit/internal/requests/ClassRequest.java
index 54309f980c7e..26aeff844e44 100644
--- a/src/main/java/org/junit/internal/requests/ClassRequest.java
+++ b/src/main/java/org/junit/internal/requests/ClassRequest.java
@@ -1,10 +1,10 @@
 package org.junit.internal.requests;
 
 import org.junit.Ignore;
+import org.junit.internal.runners.InitializationError;
 import org.junit.internal.runners.JUnit38ClassRunner;
 import org.junit.internal.runners.JUnit4ClassRunner;
 import org.junit.internal.runners.SuiteMethod;
-import org.junit.internal.runners.model.InitializationError;
 import org.junit.runner.Request;
 import org.junit.runner.RunWith;
 import org.junit.runner.Runner;
diff --git a/src/main/java/org/junit/internal/requests/ErrorReportingRequest.java b/src/main/java/org/junit/internal/requests/ErrorReportingRequest.java
index d45f03d1d8ba..bbe79a21f91b 100644
--- a/src/main/java/org/junit/internal/requests/ErrorReportingRequest.java
+++ b/src/main/java/org/junit/internal/requests/ErrorReportingRequest.java
@@ -6,7 +6,7 @@
 
 import org.junit.internal.runners.CompositeRunner;
 import org.junit.internal.runners.ErrorReportingRunner;
-import org.junit.internal.runners.model.InitializationError;
+import org.junit.internal.runners.InitializationError;
 import org.junit.runner.Description;
 import org.junit.runner.Request;
 import org.junit.runner.Runner;
diff --git a/src/main/java/org/junit/internal/runners/model/InitializationError.java b/src/main/java/org/junit/internal/runners/InitializationError.java
similarity index 82%
rename from src/main/java/org/junit/internal/runners/model/InitializationError.java
rename to src/main/java/org/junit/internal/runners/InitializationError.java
index 456919421e4a..70c540b05082 100644
--- a/src/main/java/org/junit/internal/runners/model/InitializationError.java
+++ b/src/main/java/org/junit/internal/runners/InitializationError.java
@@ -1,11 +1,8 @@
-package org.junit.internal.runners.model;
+package org.junit.internal.runners;
 
 import java.util.Arrays;
 import java.util.List;
 
-// TODO: (Nov 14, 2007 12:03:52 PM) Does this belong here?
-
-
 public class InitializationError extends Exception {
 	private static final long serialVersionUID= 1L;
 	private final List<Throwable> fErrors;
diff --git a/src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java b/src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java
index 10d063320727..b36df64939fb 100644
--- a/src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java
+++ b/src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java
@@ -18,9 +18,9 @@
 import org.junit.internal.runners.links.Statement;
 import org.junit.internal.runners.model.EachTestNotifier;
 import org.junit.internal.runners.model.FrameworkMethod;
-import org.junit.internal.runners.model.InitializationError;
 import org.junit.internal.runners.model.ReflectiveCallable;
 import org.junit.internal.runners.model.TestAnnotation;
+import org.junit.internal.runners.model.TestMethodElement;
 import org.junit.runner.Description;
 import org.junit.runner.manipulation.Filter;
 import org.junit.runner.manipulation.Filterable;
diff --git a/src/main/java/org/junit/internal/runners/ParentRunner.java b/src/main/java/org/junit/internal/runners/ParentRunner.java
index d8a810523907..462143eb4f69 100644
--- a/src/main/java/org/junit/internal/runners/ParentRunner.java
+++ b/src/main/java/org/junit/internal/runners/ParentRunner.java
@@ -11,7 +11,6 @@
 import org.junit.internal.runners.links.RunBefores;
 import org.junit.internal.runners.links.Statement;
 import org.junit.internal.runners.model.EachTestNotifier;
-import org.junit.internal.runners.model.InitializationError;
 import org.junit.internal.runners.model.TestClass;
 import org.junit.runner.Description;
 import org.junit.runner.Runner;
@@ -37,8 +36,6 @@ public ParentRunner(Class<?> testClass) {
 	
 	protected abstract Description describeChild(T child);
 
-	// TODO: (Nov 24, 2007 11:50:17 PM) can I avoid RunNotifier?
-
 	protected abstract void runChild(T child, RunNotifier notifier);
 
 	private Statement classBlock(final RunNotifier notifier) {
diff --git a/src/main/java/org/junit/runners/Enclosed.java b/src/main/java/org/junit/runners/Enclosed.java
index 3c258e5fbdd9..afe473da9930 100644
--- a/src/main/java/org/junit/runners/Enclosed.java
+++ b/src/main/java/org/junit/runners/Enclosed.java
@@ -1,6 +1,6 @@
 package org.junit.runners;
 
-import org.junit.internal.runners.model.InitializationError;
+import org.junit.internal.runners.InitializationError;
 
 public class Enclosed extends Suite {
 	public Enclosed(Class<?> klass) throws InitializationError {
diff --git a/src/main/java/org/junit/runners/Parameterized.java b/src/main/java/org/junit/runners/Parameterized.java
index 628fbf858de0..19b2c5a927a2 100644
--- a/src/main/java/org/junit/runners/Parameterized.java
+++ b/src/main/java/org/junit/runners/Parameterized.java
@@ -10,8 +10,8 @@
 import java.util.List;
 
 import org.junit.internal.runners.CompositeRunner;
+import org.junit.internal.runners.InitializationError;
 import org.junit.internal.runners.JUnit4ClassRunner;
-import org.junit.internal.runners.model.InitializationError;
 import org.junit.internal.runners.model.TestClass;
 import org.junit.internal.runners.model.FrameworkMethod;
 import org.junit.runner.manipulation.Filterable;
diff --git a/src/main/java/org/junit/runners/Suite.java b/src/main/java/org/junit/runners/Suite.java
index 866550caff2f..31c5533829bc 100644
--- a/src/main/java/org/junit/runners/Suite.java
+++ b/src/main/java/org/junit/runners/Suite.java
@@ -9,8 +9,8 @@
 import java.util.List;
 import java.util.Set;
 
+import org.junit.internal.runners.InitializationError;
 import org.junit.internal.runners.ParentRunner;
-import org.junit.internal.runners.model.InitializationError;
 import org.junit.internal.runners.model.TestClass;
 import org.junit.runner.Description;
 import org.junit.runner.Request;
diff --git a/src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/StubbedTheories.java b/src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/StubbedTheories.java
index 1481b821ea4d..945645af8d3b 100644
--- a/src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/StubbedTheories.java
+++ b/src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/StubbedTheories.java
@@ -8,8 +8,8 @@
 import org.junit.experimental.theories.ParameterSignature;
 import org.junit.experimental.theories.Theories;
 import org.junit.experimental.theories.internal.Assignments;
+import org.junit.internal.runners.InitializationError;
 import org.junit.internal.runners.links.Statement;
-import org.junit.internal.runners.model.InitializationError;
 import org.junit.internal.runners.model.FrameworkMethod;
 
 public class StubbedTheories extends Theories {
diff --git a/src/test/java/org/junit/tests/running/methods/ParameterizedTestMethodTest.java b/src/test/java/org/junit/tests/running/methods/ParameterizedTestMethodTest.java
index c0e40d562f99..9f6e6b449479 100644
--- a/src/test/java/org/junit/tests/running/methods/ParameterizedTestMethodTest.java
+++ b/src/test/java/org/junit/tests/running/methods/ParameterizedTestMethodTest.java
@@ -13,8 +13,8 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
+import org.junit.internal.runners.InitializationError;
 import org.junit.internal.runners.JUnit4ClassRunner;
-import org.junit.internal.runners.model.InitializationError;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 import org.junit.runners.Parameterized.Parameters;
diff --git a/src/test/java/org/junit/tests/running/methods/TestMethodTest.java b/src/test/java/org/junit/tests/running/methods/TestMethodTest.java
index e0757a48b150..c362452b15d9 100644
--- a/src/test/java/org/junit/tests/running/methods/TestMethodTest.java
+++ b/src/test/java/org/junit/tests/running/methods/TestMethodTest.java
@@ -16,8 +16,8 @@
 import org.junit.BeforeClass;
 import org.junit.Ignore;
 import org.junit.Test;
+import org.junit.internal.runners.InitializationError;
 import org.junit.internal.runners.JUnit4ClassRunner;
-import org.junit.internal.runners.model.InitializationError;
 import org.junit.internal.runners.model.TestClass;
 import org.junit.runner.JUnitCore;
 import org.junit.runner.Result;",Moved InitializationError into proper package,1
"diff --git a/querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java b/querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
index fb5d8b205..fdd9f46b3 100644
--- a/querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
+++ b/querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
@@ -42,8 +42,6 @@ import com.mysema.query.types.ParamNotSetException;
 import com.mysema.query.types.Path;
 import com.mysema.util.ResultSetAdapter;
 
-import static com.mysema.query.sql.SQLListenerContextBuilder.newContext;
-
 /**
  * AbstractSQLQuery is the base type for SQL query implementations
  *
@@ -130,9 +128,9 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
      * @param metadata the meta data for that context
      * @return  the newly started context
      */
-    protected SQLListenerContext startContext(Connection connection, QueryMetadata metadata)
+    protected SQLListenerContextImpl startContext(Connection connection, QueryMetadata metadata)
     {
-        SQLListenerContext context = newContext(metadata).with(connection).build();
+        SQLListenerContextImpl context = new SQLListenerContextImpl(metadata,connection);
         listeners.start(context);
         return context;
     }
@@ -144,9 +142,9 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
      * @param e the exception
      * @return the new context
      */
-    protected SQLListenerContext onException(SQLListenerContext context, Exception e)
+    protected SQLListenerContextImpl onException(SQLListenerContextImpl context, Exception e)
     {
-        context = newContext(context).with(e).build();
+        context.setException(e);
         listeners.exception(context);
         return context;
     }
@@ -171,7 +169,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
     public ResultSet getResults(Expression<?>... exprs) {
         queryMixin.addProjection(exprs);
 
-        SQLListenerContext context = startContext(conn, queryMixin.getMetadata());
+        SQLListenerContextImpl context = startContext(conn, queryMixin.getMetadata());
 
         listeners.preRender(context);
         SQLSerializer serializer = serialize(false);
@@ -179,7 +177,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
         if (logger.isDebugEnabled()) {
             logger.debug(""query : {}"", queryString);
         }
-        context = newContext(context).with(queryString).build();
+        context.addSQL(queryString);
         listeners.rendered(context);
 
         listeners.notifyQuery(queryMixin.getMetadata());
@@ -189,7 +187,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
             listeners.prePrepare(context);
             final PreparedStatement stmt = conn.prepareStatement(queryString);
             setParameters(stmt, constants, serializer.getConstantPaths(), getMetadata().getParams());
-            context = newContext(context).with(stmt).build();
+            context.addPreparedStatement(stmt);
             listeners.prepared(context);
 
             listeners.preExecute(context);
@@ -227,7 +225,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
 
     @SuppressWarnings(""unchecked"")
     private <RT> CloseableIterator<RT> iterateSingle(QueryMetadata metadata, @Nullable final Expression<RT> expr) {
-        SQLListenerContext context = startContext(conn,queryMixin.getMetadata());
+        SQLListenerContextImpl context = startContext(conn,queryMixin.getMetadata());
 
         listeners.preRender(context);
         SQLSerializer serializer = serialize(false);
@@ -235,7 +233,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
         if (logger.isDebugEnabled()) {
             logger.debug(""query : {}"", queryString);
         }
-        context = newContext(context).with(queryString).build();
+        context.addSQL(queryString);
         listeners.rendered(context);
 
 
@@ -245,7 +243,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
             listeners.prePrepare(context);
             final PreparedStatement stmt = conn.prepareStatement(queryString);
             setParameters(stmt, constants, serializer.getConstantPaths(), metadata.getParams());
-            context = newContext(context).with(stmt).build();
+            context.addPreparedStatement(stmt);
             listeners.prepared(context);
 
             listeners.preExecute(context);
@@ -300,7 +298,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
     @Override
     public <RT> List<RT> list(Expression<RT> expr) {
         expr = queryMixin.addProjection(expr);
-        SQLListenerContext context = startContext(conn, queryMixin.getMetadata());
+        SQLListenerContextImpl context = startContext(conn, queryMixin.getMetadata());
 
         listeners.preRender(context);
         SQLSerializer serializer = serialize(false);
@@ -308,7 +306,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
         if (logger.isDebugEnabled()) {
             logger.debug(""query : {}"", queryString);
         }
-        context = newContext(context).with(queryString).build();
+        context.addSQL(queryString);
         listeners.rendered(context);
 
         listeners.notifyQuery(queryMixin.getMetadata());
@@ -318,7 +316,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
             final PreparedStatement stmt = conn.prepareStatement(queryString);
             try {
                 setParameters(stmt, constants, serializer.getConstantPaths(), queryMixin.getMetadata().getParams());
-                context = newContext(context).with(stmt).build();
+                context.addPreparedStatement(stmt);
                 listeners.prepared(context);
 
                 listeners.preExecute(context);
@@ -359,23 +357,16 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
                     }
                     return rv;
                 } catch (IllegalAccessException e) {
-                    context = newContext(context).with(e).build();
-                    listeners.exception(context);
-
+                    onException(context, e);
                     throw new QueryException(e);
                 } catch (InvocationTargetException e) {
-                    context = newContext(context).with(e).build();
-                    listeners.exception(context);
-
+                    onException(context,e);
                     throw new QueryException(e);
                 } catch (InstantiationException e) {
-                    context = newContext(context).with(e).build();
-                    listeners.exception(context);
-
+                    onException(context,e);
                     throw new QueryException(e);
                 } catch (SQLException e) {
-                    context = onException(context, e);
-
+                    onException(context,e);
                     throw configuration.translate(queryString, constants, e);
                 } finally {
                     rs.close();
@@ -481,7 +472,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
     }
 
     private long unsafeCount() throws SQLException {
-        SQLListenerContext context = startContext(conn,getMetadata());
+        SQLListenerContextImpl context = startContext(conn,getMetadata());
 
         listeners.preRender(context);
         SQLSerializer serializer = serialize(true);
@@ -489,7 +480,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
         if (logger.isDebugEnabled()) {
             logger.debug(""query : {}"", queryString);
         }
-        context = newContext(context).with(queryString).build();
+        context.addSQL(queryString);
         listeners.rendered(context);
 
         List<Object> constants = serializer.getConstants();
@@ -501,7 +492,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
             stmt = conn.prepareStatement(queryString);
             setParameters(stmt, constants, serializer.getConstantPaths(), getMetadata().getParams());
 
-            context = newContext(context).with(stmt).build();
+            context.addPreparedStatement(stmt);
             listeners.prepared(context);
 
             listeners.preExecute(context);
diff --git a/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerAdapter.java b/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerAdapter.java
index d64107c66..e542adcb7 100644
--- a/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerAdapter.java
+++ b/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerAdapter.java
@@ -18,11 +18,11 @@ class SQLListenerAdapter implements SQLDetailedListener
 {
 
     private final SQLListener sqlListener;
-    private final SQLDetailedListener SQLDetailedListener;
+    private final SQLDetailedListener detailedListener;
 
     SQLListenerAdapter(final SQLListener sqlListener)
     {
-        this.SQLDetailedListener = sqlListener instanceof SQLDetailedListener ? (SQLDetailedListener) sqlListener : null;
+        this.detailedListener = sqlListener instanceof SQLDetailedListener ? (SQLDetailedListener) sqlListener : null;
         this.sqlListener = sqlListener;
     }
 
@@ -34,81 +34,81 @@ class SQLListenerAdapter implements SQLDetailedListener
     @Override
     public void start(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.start(context);
+            detailedListener.start(context);
         }
     }
 
     @Override
     public void preRender(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.preRender(context);
+            detailedListener.preRender(context);
         }
     }
 
     @Override
     public void rendered(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.rendered(context);
+            detailedListener.rendered(context);
         }
     }
 
     @Override
     public void prePrepare(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.prePrepare(context);
+            detailedListener.prePrepare(context);
         }
     }
 
     @Override
     public void prepared(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.prepared(context);
+            detailedListener.prepared(context);
         }
     }
 
     @Override
     public void preExecute(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.preExecute(context);
+            detailedListener.preExecute(context);
         }
     }
 
     @Override
     public void executed(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.executed(context);
+            detailedListener.executed(context);
         }
     }
 
     @Override
     public void end(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.end(context);
+            detailedListener.end(context);
         }
     }
 
     @Override
     public void exception(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.exception(context);
+            detailedListener.exception(context);
         }
     }
 
diff --git a/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContext.java b/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContext.java
index 5c8563edd..c5c14681b 100644
--- a/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContext.java
+++ b/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContext.java
@@ -5,23 +5,34 @@ import com.mysema.query.QueryMetadata;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.util.Collection;
-import java.util.Map;
 
 /**
- * A context object that is progressively filled out during query execution and is
- * passed to each {@link SQLDetailedListener} callback method
+ * A context object that is progressively filled out during query execution and is passed to each {@link
+ * SQLDetailedListener} callback method
  */
 public interface SQLListenerContext
 {
     /**
-     * The context getMap is a general purpose place that listeners can place objects.  It allows listeners to pass context
-     * between themselves during callbacks.
+     * The context getData is a general purpose place that listeners can place objects.  It allows listeners to pass
+     * context between themselves during callbacks.
      * <p/>
-     * This is never null but can be empty
      *
-     * @return the context getMap
+     * @param dataKey the key to look up
+     * @return the context object under that key
      */
-    Map<String, Object> getMap();
+    Object getData(String dataKey);
+
+    /**
+     * The context setData is a general purpose place that listeners can place objects.  It allows listeners to pass
+     * context between themselves during callbacks.
+     * <p/>
+     * A good time to place objects into the context is during {@link com.mysema.query.sql.SQLDetailedListener#start(SQLListenerContext)}
+     * and then access if after that.
+     *
+     * @param dataKey the key to use
+     * @param value the value to place under that key
+     */
+    void setData(String dataKey, Object value);
 
     /**
      * @return the underlying query metadata
@@ -31,10 +42,17 @@ public interface SQLListenerContext
     /**
      * NOTE : This can be null depending on the stage of the query execution
      *
-     * @return the underlying sql
+     * @return the underlying sql or first in a batch query
      */
     String getSQL();
 
+    /**
+     * NOTE : This can be empty depending on the stage of the query execution
+     *
+     * @return the underlying sql collection if the query is a batch query
+     */
+    Collection<String> getSQLStatements();
+
     /**
      * NOTE : This can be null depending on the stage of the query execution
      *
@@ -59,6 +77,13 @@ public interface SQLListenerContext
     /**
      * NOTE : This can be null depending on the stage of the query execution
      *
+     * @return the underlying prepared statement or the first if its batch query
+     */
+    PreparedStatement getPreparedStatement();
+
+    /**
+     * NOTE : This can be empty depending on the stage of the query execution
+     *
      * @return the underlying set of prepared statements
      */
     Collection<PreparedStatement> getPreparedStatements();
diff --git a/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContextBuilder.java b/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContextBuilder.java
deleted file mode 100644
index a1e663805..000000000
--- a/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContextBuilder.java
+++ /dev/null
@@ -1,175 +0,0 @@
-package com.mysema.query.sql;
-
-import com.google.common.collect.Lists;
-import com.mysema.query.QueryMetadata;
-
-import java.sql.Connection;
-import java.sql.PreparedStatement;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Map;
-
-/**
- * A builder of {@link com.mysema.query.sql.SQLListenerContext} objects
- */
-public class SQLListenerContextBuilder
-{
-    private Map<String, Object> contextMap = new HashMap<String, Object>();
-
-    private QueryMetadata md;
-
-    private String sql;
-
-    private RelationalPath<?> entity;
-
-    private Connection connection;
-
-    private Exception exception;
-
-    private Collection<PreparedStatement> preparedStatements;
-
-    SQLListenerContextBuilder(final QueryMetadata md)
-    {
-        this.md = md;
-    }
-
-    public static SQLListenerContextBuilder newContext(QueryMetadata md)
-    {
-        return new SQLListenerContextBuilder(md);
-    }
-
-    public static SQLListenerContextBuilder newContext(SQLListenerContext context)
-    {
-        return new SQLListenerContextBuilder(context.getMetadata())
-                .with(context.getMap())
-                .with(context.getConnection())
-                .with(context.getEntity())
-                .with(context.getException())
-                .with(context.getPreparedStatements())
-                .with(context.getSQL())
-                ;
-    }
-
-    SQLListenerContextBuilder with(Map<String, Object> contextMap)
-    {
-        this.contextMap = contextMap;
-        return this;
-    }
-
-    public SQLListenerContextBuilder with(RelationalPath<?> entity)
-    {
-        this.entity = entity;
-        return this;
-    }
-
-    public SQLListenerContextBuilder with(String sql)
-    {
-        this.sql = sql;
-        return this;
-    }
-
-    public SQLListenerContextBuilder with(Exception exception)
-    {
-        this.exception = exception;
-        return this;
-    }
-
-    public SQLListenerContextBuilder with(Connection connection)
-    {
-        this.connection = connection;
-        return this;
-    }
-
-    public SQLListenerContextBuilder with(PreparedStatement preparedStatement)
-    {
-        if (preparedStatement != null)
-        {
-            this.preparedStatements = Lists.newArrayList(preparedStatement);
-        }
-        return this;
-    }
-
-    public SQLListenerContextBuilder with(Collection<PreparedStatement> preparedStatements)
-    {
-        if (preparedStatements != null)
-        {
-            this.preparedStatements = Lists.newArrayList(preparedStatements);
-        }
-        return this;
-    }
-
-    public SQLListenerContext build()
-    {
-        return new SQLListenerContextImpl();
-    }
-
-    /**
-     * A simple implementation that looks at the builder for values
-     */
-    class SQLListenerContextImpl implements SQLListenerContext
-    {
-        @Override
-        public QueryMetadata getMetadata()
-        {
-            return md;
-        }
-
-        @Override
-        public RelationalPath<?> getEntity()
-        {
-            return entity;
-        }
-
-        @Override
-        public String getSQL()
-        {
-            return sql;
-        }
-
-        @Override
-        public Exception getException()
-        {
-            return exception;
-        }
-
-        @Override
-        public Connection getConnection()
-        {
-            return connection;
-        }
-
-        @Override
-        public Collection<PreparedStatement> getPreparedStatements()
-        {
-            return preparedStatements;
-        }
-
-        @Override
-        public Map<String, Object> getMap()
-        {
-            return contextMap;
-        }
-
-        @Override
-        public String toString()
-        {
-            StringBuilder sb = new StringBuilder()
-                    .append("" sql:"").append(nicerSql(sql))
-                    .append("" connection:"").append(connection == null ? ""not connected"" : ""connected"")
-                    .append("" entity:"").append(entity)
-                    .append("" exception:"").append(exception);
-
-            for (Map.Entry<String, Object> entry : contextMap.entrySet())
-            {
-",Add URLs from parent classloader in executable jar .,1
"diff --git a/h2/src/java9/precompiled/org/h2/util/Bits.class b/h2/src/java9/precompiled/org/h2/util/Bits.class
new file mode 100644
index 000000000..bff3d08b4
Binary files /dev/null and b/h2/src/java9/precompiled/org/h2/util/Bits.class differ
diff --git a/h2/src/java9/src/org/h2/util/Bits.java b/h2/src/java9/src/org/h2/util/Bits.java
new file mode 100644
index 000000000..ce96d5ffd
--- /dev/null
+++ b/h2/src/java9/src/org/h2/util/Bits.java
@@ -0,0 +1,118 @@
+/*
+ * Copyright 2004-2018 H2 Group. Multiple-Licensed under the MPL 2.0,
+ * and the EPL 1.0 (http://h2database.com/html/license.html).
+ * Initial Developer: H2 Group
+ */
+package org.h2.util;
+
+import java.lang.invoke.MethodHandles;
+import java.lang.invoke.VarHandle;
+import java.nio.ByteOrder;
+import java.util.UUID;
+
+/**
+ * Manipulations with bytes and arrays. Specialized implementation for Java 9
+ * and later versions.
+ */
+public final class Bits {
+
+    /**
+     * VarHandle giving access to elements of a byte[] array viewed as if it were a
+     * int[] array on big-endian system.
+     */
+    private static final VarHandle INT_VH = MethodHandles.byteArrayViewVarHandle(int[].class, ByteOrder.BIG_ENDIAN);
+
+    /**
+     * VarHandle giving access to elements of a byte[] array viewed as if it were a
+     * long[] array on big-endian system.
+     */
+    private static final VarHandle LONG_VH = MethodHandles.byteArrayViewVarHandle(long[].class, ByteOrder.BIG_ENDIAN);
+
+    /**
+     * Reads a int value from the byte array at the given position in big-endian
+     * order.
+     *
+     * @param buff
+     *            the byte array
+     * @param pos
+     *            the position
+     * @return the value
+     */
+    public static int readInt(byte[] buff, int pos) {
+        return (int) INT_VH.get(buff, pos);
+    }
+
+    /**
+     * Reads a long value from the byte array at the given position in big-endian
+     * order.
+     *
+     * @param buff
+     *            the byte array
+     * @param pos
+     *            the position
+     * @return the value
+     */
+    public static long readLong(byte[] buff, int pos) {
+        return (long) LONG_VH.get(buff, pos);
+    }
+
+    /**
+     * Converts UUID value to byte array in big-endian order.
+     *
+     * @param msb
+     *            most significant part of UUID
+     * @param lsb
+     *            least significant part of UUID
+     * @return byte array representation
+     */
+    public static byte[] uuidToBytes(long msb, long lsb) {
+        byte[] buff = new byte[16];
+        LONG_VH.set(buff, 0, msb);
+        LONG_VH.set(buff, 8, lsb);
+        return buff;
+    }
+
+    /**
+     * Converts UUID value to byte array in big-endian order.
+     *
+     * @param uuid
+     *            UUID value
+     * @return byte array representation
+     */
+    public static byte[] uuidToBytes(UUID uuid) {
+        return uuidToBytes(uuid.getMostSignificantBits(), uuid.getLeastSignificantBits());
+    }
+
+    /**
+     * Writes a int value to the byte array at the given position in big-endian
+     * order.
+     *
+     * @param buff
+     *            the byte array
+     * @param pos
+     *            the position
+     * @param x
+     *            the value to write
+     */
+    public static void writeInt(byte[] buff, int pos, int x) {
+        INT_VH.set(buff, pos, x);
+    }
+
+    /**
+     * Writes a long value to the byte array at the given position in big-endian
+     * order.
+     *
+     * @param buff
+     *            the byte array
+     * @param pos
+     *            the position
+     * @param x
+     *            the value to write
+     */
+    public static void writeLong(byte[] buff, int pos, long x) {
+        LONG_VH.set(buff, pos, x);
+    }
+
+    private Bits() {
+    }
+}
diff --git a/h2/src/java9/src/org/h2/util/package.html b/h2/src/java9/src/org/h2/util/package.html
new file mode 100644
index 000000000..ab7c51146
--- /dev/null
+++ b/h2/src/java9/src/org/h2/util/package.html
@@ -0,0 +1,14 @@
+<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Strict//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"">
+<!--
+Copyright 2004-2018 H2 Group. Multiple-Licensed under the MPL 2.0, Version 1.0,
+and under the Eclipse Public License, Version 1.0
+Initial Developer: H2 Group
+-->
+<html xmlns=""http://www.w3.org/1999/xhtml"" lang=""en"" xml:lang=""en"">
+<head><meta http-equiv=""Content-Type"" content=""text/html;charset=utf-8"" /><title>
+Javadoc package documentation
+</title></head><body style=""font: 9pt/130% Tahoma, Arial, Helvetica, sans-serif; font-weight: normal;""><p>
+
+Internal utility classes reimplemented for Java 9 and later versions.
+
+</p></body></html>
\ No newline at end of file
diff --git a/h2/src/main/META-INF/MANIFEST.MF b/h2/src/main/META-INF/MANIFEST.MF
index b01ded397..365074859 100644
--- a/h2/src/main/META-INF/MANIFEST.MF
+++ b/h2/src/main/META-INF/MANIFEST.MF
@@ -13,6 +13,7 @@ Bundle-Vendor: H2 Group
 Bundle-Version: ${version}
 Bundle-License: http://www.h2database.com/html/license.html
 Bundle-Category: jdbc
+Multi-Release: true
 Import-Package: javax.management,
  javax.naming;resolution:=optional,
  javax.naming.spi;resolution:=optional,
diff --git a/h2/src/main/org/h2/util/Bits.java b/h2/src/main/org/h2/util/Bits.java
index d780cc923..3e3e7262d 100644
--- a/h2/src/main/org/h2/util/Bits.java
+++ b/h2/src/main/org/h2/util/Bits.java
@@ -14,6 +14,12 @@
  */
 public final class Bits {
 
+    /*
+     * Signatures of methods should match with
+     * h2/src/java9/src/org/h2/util/Bits.java and precompiled
+     * h2/src/java9/precompiled/org/h2/util/Bits.class.
+     */
+
     /**
      * Reads a int value from the byte array at the given position in big-endian
      * order.
diff --git a/h2/src/tools/org/h2/build/Build.java b/h2/src/tools/org/h2/build/Build.java
index 798e60390..3da20f606 100644
--- a/h2/src/tools/org/h2/build/Build.java
+++ b/h2/src/tools/org/h2/build/Build.java
@@ -446,8 +446,10 @@ private FileList excludeTestMetaInfFiles(FileList files) {
     @Description(summary = ""Create the regular h2.jar file."")
     public void jar() {
         compile();
+        FileList files = files(""src/java9/precompiled"");
+        copy(""temp/META-INF/versions/9"", files, ""src/java9/precompiled"");
         manifest(""H2 Database Engine"", ""org.h2.tools.Console"");
-        FileList files = files(""temp"").
+        files = files(""temp"").
             exclude(""temp/android/*"").
             exclude(""temp/org/h2/android/*"").
             exclude(""temp/org/h2/build/*"").
diff --git a/h2/src/tools/org/h2/build/code/CheckTextFiles.java b/h2/src/tools/org/h2/build/code/CheckTextFiles.java
index e4f4e8d21..9c7f7cd5e 100644
--- a/h2/src/tools/org/h2/build/code/CheckTextFiles.java
+++ b/h2/src/tools/org/h2/build/code/CheckTextFiles.java
@@ -30,7 +30,7 @@ public class CheckTextFiles {
             ""Driver"", ""Processor"", ""prefs"" };
     private static final String[] SUFFIX_IGNORE = { ""gif"", ""png"", ""odg"", ""ico"",
             ""sxd"", ""layout"", ""res"", ""win"", ""jar"", ""task"", ""svg"", ""MF"", ""mf"",
-            ""sh"", ""DS_Store"", ""prop"" };
+            ""sh"", ""DS_Store"", ""prop"", ""class"" };
     private static final String[] SUFFIX_CRLF = { ""bat"" };
 
     private static final boolean ALLOW_TAB = false;
diff --git a/h2/src/tools/org/h2/build/doc/SpellChecker.java b/h2/src/tools/org/h2/build/doc/SpellChecker.java
index 0cfb98478..70e4895b5 100644
--- a/h2/src/tools/org/h2/build/doc/SpellChecker.java
+++ b/h2/src/tools/org/h2/build/doc/SpellChecker.java
@@ -31,7 +31,7 @@ public class SpellChecker {
             ""properties"", ""task"", ""MF"", ""mf"", ""sh"", """" };
     private static final String[] IGNORE = { ""dev"", ""nsi"", ""gif"", ""png"", ""odg"",
             ""ico"", ""sxd"", ""zip"", ""bz2"", ""rc"", ""layout"", ""res"", ""dll"", ""jar"",
-            ""svg"", ""prefs"", ""prop"", ""iml"" };
+            ""svg"", ""prefs"", ""prop"", ""iml"", ""class"" };
     private static final String DELIMITERS =
             "" \n.();-\""=,*/{}_<>+\r:'@[]&\\!#|?$^%~`\t"";
     private static final String PREFIX_IGNORE = ""abc"";",Automated merge with http : / / hg . netbeans . org / web - main,0
"diff --git a/okhttp/src/main/java/okhttp3/Dns.java b/okhttp/src/main/java/okhttp3/Dns.java
index a2e6db591c05..de3b4cb215de 100644
--- a/okhttp/src/main/java/okhttp3/Dns.java
+++ b/okhttp/src/main/java/okhttp3/Dns.java
@@ -36,7 +36,14 @@ public interface Dns {
   Dns SYSTEM = new Dns() {
     @Override public List<InetAddress> lookup(String hostname) throws UnknownHostException {
       if (hostname == null) throw new UnknownHostException(""hostname == null"");
-      return Arrays.asList(InetAddress.getAllByName(hostname));
+      try {
+        return Arrays.asList(InetAddress.getAllByName(hostname));
+      } catch (NullPointerException e) {
+        UnknownHostException unknownHostException =
+            new UnknownHostException(""Broken system behaviour for dns lookup of "" + hostname);
+        unknownHostException.initCause(e);
+        throw unknownHostException;
+      }
     }
   };",workaround broken system dns behaviour,1
"diff --git a/.cvsignore b/.cvsignore
index d04519a70a49..4c55ae14a714 100644
--- a/.cvsignore
+++ b/.cvsignore
@@ -1,3 +1,4 @@
 bin
 junit4.1
 junit*-SNAPSHOT-*
+target",Ignore target directory,1
"diff --git a/camel-core/src/main/docs/string-dataformat.adoc b/camel-core/src/main/docs/string-dataformat.adoc
new file mode 100644
index 00000000000..2ccf0c835ca
--- /dev/null
+++ b/camel-core/src/main/docs/string-dataformat.adoc
@@ -0,0 +1,56 @@
+[[String-Dataformat]]
+String Dataformat
+~~~~~~~~~~~~~~~~~
+
+The String link:data-format.html[Data Format] is a textual based format
+that supports encoding.
+
+[[String-Options]]
+Options
+^^^^^^^
+
+// dataformat options: START
+The String Encoding dataformat supports 1 options which are listed below.
+
+
+
+{% raw %}
+[width=""100%"",cols=""2s,1m,1m,6"",options=""header""]
+|=======================================================================
+| Name | Default | Java Type | Description
+| charset |  | String | Sets an encoding to use. Will by default use the JVM platform default charset.
+|=======================================================================
+{% endraw %}
+// dataformat options: END
+
+[[String-Marshal]]
+Marshal
+^^^^^^^
+
+In this example we marshal the file content to String object in UTF-8
+encoding.
+
+[source,java]
+----------------------------------------------------------------------
+from(""file://data.csv"").marshal().string(""UTF-8"").to(""jms://myqueue"");
+----------------------------------------------------------------------
+
+[[String-Unmarshal]]
+Unmarshal
+^^^^^^^^^
+
+In this example we unmarshal the payload from the JMS queue to a String
+object using UTF-8 encoding, before its processed by the newOrder
+processor.
+
+[source,java]
+-----------------------------------------------------------------------------
+from(""jms://queue/order"").unmarshal().string(""UTF-8"").processRef(""newOrder"");
+-----------------------------------------------------------------------------
+
+[[String-Dependencies]]
+Dependencies
+^^^^^^^^^^^^
+
+This data format is provided in *camel-core* so no additional
+dependencies is needed.",Add support for loading static resources from / META - INF / resources inside JARs bundled with a web application .,0
"diff --git a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/GenericFilter.java b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/GenericFilter.java
index 95b4a1f3098..2be7157531b 100644
--- a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/GenericFilter.java
+++ b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/GenericFilter.java
@@ -139,6 +139,7 @@ public Result invoke(Invoker<?> invoker, Invocation inv) throws RpcException {
                     }
                 }
                 RpcInvocation rpcInvocation = new RpcInvocation(method, args, inv.getAttachments(), inv.getAttributes());
+                rpcInvocation.setInvoker(inv.getInvoker());
                 rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName());
 
                 return invoker.invoke(rpcInvocation);",copy invoker to new invocation in generic filter,1
"diff --git a/src/org/junit/Assume.java b/src/org/junit/Assume.java
index 101e436a6e95..dd7f32be91a3 100644
--- a/src/org/junit/Assume.java
+++ b/src/org/junit/Assume.java
@@ -8,7 +8,7 @@
 import org.hamcrest.Matcher;
 import org.hamcrest.SelfDescribing;
 import org.hamcrest.StringDescription;
-import org.junit.experimental.theories.matchers.api.Each;
+import org.junit.matchers.Each;
 
 public class Assume {
 	public static class AssumptionViolatedException extends RuntimeException implements SelfDescribing {
diff --git a/src/org/junit/experimental/imposterization/FunctionPointer.java b/src/org/junit/experimental/imposterization/FunctionPointer.java
index e1376767b839..af74cf8f778e 100644
--- a/src/org/junit/experimental/imposterization/FunctionPointer.java
+++ b/src/org/junit/experimental/imposterization/FunctionPointer.java
@@ -4,7 +4,7 @@
 
 import org.jmock.api.Invocation;
 import org.jmock.api.Invokable;
-import org.junit.experimental.theories.javamodel.api.Function;
+import org.junit.experimental.theories.runner.Function;
 
 public class FunctionPointer extends Function {
 	public static FunctionPointer pointer() {
diff --git a/src/org/junit/experimental/test/TheoryTests.java b/src/org/junit/experimental/test/TheoryTests.java
new file mode 100644
index 000000000000..42a47a8e36a2
--- /dev/null
+++ b/src/org/junit/experimental/test/TheoryTests.java
@@ -0,0 +1,32 @@
+package org.junit.experimental.test;
+
+import org.junit.experimental.test.assertion.AssumptionViolatedExceptionTest;
+import org.junit.experimental.test.imposterization.AssumePassingTest;
+import org.junit.experimental.test.imposterization.PopperImposterizerTest;
+import org.junit.experimental.test.imposterization.ThrownMatcherTest;
+import org.junit.experimental.test.javamodel.ConcreteFunctionTest;
+import org.junit.experimental.test.javamodel.FunctionTest;
+import org.junit.experimental.test.matchers.EachTest;
+import org.junit.experimental.test.matchers.MatcherCharacterization;
+import org.junit.experimental.test.results.PrintableResultTest;
+import org.junit.experimental.test.results.ResultMatchersTest;
+import org.junit.experimental.test.runner.DataPointMethodTest;
+import org.junit.experimental.test.runner.ParameterizedAssertionErrorTest;
+import org.junit.experimental.test.runner.TheoriesTest;
+import org.junit.experimental.test.runner.TheoryContainerReferenceTest;
+import org.junit.runner.RunWith;
+import org.junit.runners.Suite;
+import org.junit.runners.Suite.SuiteClasses;
+
+@RunWith(Suite.class)
+@SuiteClasses( { AssumptionViolatedExceptionTest.class,
+		ConcreteFunctionTest.class, EachTest.class,
+		MatcherCharacterization.class, ParameterizedAssertionErrorTest.class,
+		TheoriesTest.class, TheoryContainerReferenceTest.class,
+		FunctionTest.class, PrintableResultTest.class,
+		ResultMatchersTest.class, DataPointMethodTest.class,
+		AssumePassingTest.class, PopperImposterizerTest.class,
+		ThrownMatcherTest.class })
+public class TheoryTests {
+
+}
diff --git a/src/org/junit/experimental/theories/test/assertion/AssumptionViolatedExceptionTest.java b/src/org/junit/experimental/test/assertion/AssumptionViolatedExceptionTest.java
similarity index 86%
rename from src/org/junit/experimental/theories/test/assertion/AssumptionViolatedExceptionTest.java
rename to src/org/junit/experimental/test/assertion/AssumptionViolatedExceptionTest.java
index 4b1b51c658df..487b27b5c3b7 100644
--- a/src/org/junit/experimental/theories/test/assertion/AssumptionViolatedExceptionTest.java
+++ b/src/org/junit/experimental/test/assertion/AssumptionViolatedExceptionTest.java
@@ -1,6 +1,6 @@
-package org.junit.experimental.theories.test.assertion;
+package org.junit.experimental.test.assertion;
 
-import static org.junit.experimental.theories.matchers.api.StringContains.containsString;
+import static org.junit.matchers.StringContains.containsString;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
 import org.hamcrest.Matcher;
diff --git a/src/org/junit/experimental/theories/test/imposterization/AssumePassingTest.java b/src/org/junit/experimental/test/imposterization/AssumePassingTest.java
similarity index 97%
rename from src/org/junit/experimental/theories/test/imposterization/AssumePassingTest.java
rename to src/org/junit/experimental/test/imposterization/AssumePassingTest.java
index 0f2567e69528..a4598782f00d 100644
--- a/src/org/junit/experimental/theories/test/imposterization/AssumePassingTest.java
+++ b/src/org/junit/experimental/test/imposterization/AssumePassingTest.java
@@ -1,4 +1,4 @@
-package org.junit.experimental.theories.test.imposterization;
+package org.junit.experimental.test.imposterization;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
diff --git a/src/org/junit/experimental/theories/test/imposterization/PopperImposterizerTest.java b/src/org/junit/experimental/test/imposterization/PopperImposterizerTest.java
similarity index 88%
rename from src/org/junit/experimental/theories/test/imposterization/PopperImposterizerTest.java
rename to src/org/junit/experimental/test/imposterization/PopperImposterizerTest.java
index 321481461e7d..54e4320d8c0e 100644
--- a/src/org/junit/experimental/theories/test/imposterization/PopperImposterizerTest.java
+++ b/src/org/junit/experimental/test/imposterization/PopperImposterizerTest.java
@@ -1,4 +1,4 @@
-package org.junit.experimental.theories.test.imposterization;
+package org.junit.experimental.test.imposterization;
 
 import static org.hamcrest.CoreMatchers.notNullValue;
 import static org.junit.Assert.assertThat;
diff --git a/src/org/junit/experimental/theories/test/imposterization/ThrownMatcherTest.java b/src/org/junit/experimental/test/imposterization/ThrownMatcherTest.java
similarity index 92%
rename from src/org/junit/experimental/theories/test/imposterization/ThrownMatcherTest.java
rename to src/org/junit/experimental/test/imposterization/ThrownMatcherTest.java
index cc8b7b01cb63..56f0ff7f6f36 100644
--- a/src/org/junit/experimental/theories/test/imposterization/ThrownMatcherTest.java
+++ b/src/org/junit/experimental/test/imposterization/ThrownMatcherTest.java
@@ -1,9 +1,9 @@
-package org.junit.experimental.theories.test.imposterization;
+package org.junit.experimental.test.imposterization;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.fail;
-import static org.junit.experimental.theories.matchers.api.StringContains.containsString;
+import static org.junit.matchers.StringContains.containsString;
 
 import java.util.ArrayList;
 
diff --git a/src/org/junit/experimental/theories/test/javamodel/ConcreteFunctionTest.java b/src/org/junit/experimental/test/javamodel/ConcreteFunctionTest.java
similarity index 89%
rename from src/org/junit/experimental/theories/test/javamodel/ConcreteFunctionTest.java
rename to src/org/junit/experimental/test/javamodel/ConcreteFunctionTest.java
index e59fa8fcaa9e..05e9c08f05ef 100644
--- a/src/org/junit/experimental/theories/test/javamodel/ConcreteFunctionTest.java
+++ b/src/org/junit/experimental/test/javamodel/ConcreteFunctionTest.java
@@ -1,15 +1,15 @@
-package org.junit.experimental.theories.test.javamodel;
+package org.junit.experimental.test.javamodel;
 
 import static org.hamcrest.CoreMatchers.allOf;
 import static org.hamcrest.CoreMatchers.not;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assume.assumeThat;
-import static org.junit.experimental.theories.matchers.api.StringContains.containsString;
+import static org.junit.matchers.StringContains.containsString;
 
 import java.lang.reflect.Method;
 
-import org.junit.experimental.theories.javamodel.api.ConcreteFunction;
 import org.junit.experimental.theories.methods.api.Theory;
+import org.junit.experimental.theories.runner.ConcreteFunction;
 import org.junit.experimental.theories.runner.api.Theories;
 import org.junit.runner.RunWith;
 
diff --git a/src/org/junit/experimental/theories/test/javamodel/FunctionTest.java b/src/org/junit/experimental/test/javamodel/FunctionTest.java
similarity index 94%
rename from src/org/junit/experimental/theories/test/javamodel/FunctionTest.java
rename to src/org/junit/experimental/test/javamodel/FunctionTest.java
index 634e007de15a..be9eeadf72e0 100644
--- a/src/org/junit/experimental/theories/test/javamodel/FunctionTest.java
+++ b/src/org/junit/experimental/test/javamodel/FunctionTest.java
@@ -1,4 +1,4 @@
-package org.junit.experimental.theories.test.javamodel;
+package org.junit.experimental.test.javamodel;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.nullValue;
diff --git a/src/org/junit/experimental/theories/test/matchers/EachTest.java b/src/org/junit/experimental/test/matchers/EachTest.java
similarity index 68%
rename from src/org/junit/experimental/theories/test/matchers/EachTest.java
rename to src/org/junit/experimental/test/matchers/EachTest.java
index a7df3c9ebcf3..db280f14093f 100644
--- a/src/org/junit/experimental/theories/test/matchers/EachTest.java
+++ b/src/org/junit/experimental/test/matchers/EachTest.java
@@ -1,9 +1,9 @@
-package org.junit.experimental.theories.test.matchers;
+package org.junit.experimental.test.matchers;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
 import org.junit.Test;
-import org.junit.experimental.theories.matchers.api.Each;
+import org.junit.matchers.Each;
 
 public class EachTest {
 	@Test
diff --git a/src/org/junit/experimental/theories/test/matchers/MatcherCharacterization.java b/src/org/junit/experimental/test/matchers/MatcherCharacterization.java
similarity index 88%
rename from src/org/junit/experimental/theories/test/matchers/MatcherCharacterization.java
rename to src/org/junit/experimental/test/matchers/MatcherCharacterization.java
index 2b3555d48d65..bdc03f4f268a 100644
--- a/src/org/junit/experimental/theories/test/matchers/MatcherCharacterization.java
+++ b/src/org/junit/experimental/test/matchers/MatcherCharacterization.java
@@ -1,4 +1,4 @@
-package org.junit.experimental.theories.test.matchers;
+package org.junit.experimental.test.matchers;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
diff --git a/src/org/junit/experimental/theories/test/results/PrintableResultTest.java b/src/org/junit/experimental/test/results/PrintableResultTest.java
similarity index 92%
rename from src/org/junit/experimental/theories/test/results/PrintableResultTest.java
rename to src/org/junit/experimental/test/results/PrintableResultTest.java
index 53f6d508330d..0a3e1e7a5c6b 100644
--- a/src/org/junit/experimental/theories/test/results/PrintableResultTest.java
+++ b/src/org/junit/experimental/test/results/PrintableResultTest.java
@@ -1,9 +1,9 @@
-package org.junit.experimental.theories.test.results;
+package org.junit.experimental.test.results;
 
 import static java.util.Arrays.asList;
 import static org.hamcrest.CoreMatchers.allOf;
 import static org.junit.Assert.assertThat;
-import static org.junit.experimental.theories.matchers.api.StringContains.containsString;
+import static org.junit.matchers.StringContains.containsString;
 
 import java.util.Arrays;
 
diff --git a/src/org/junit/experimental/theories/test/results/ResultMatchersTest.java b/src/org/junit/experimental/test/results/ResultMatchersTest.java
similarity index 79%
rename from src/org/junit/experimental/theories/test/results/ResultMatchersTest.java
rename to src/org/junit/experimental/test/results/ResultMatchersTest.java
index 50ea3d9519e2..5e355d97eb05 100644
--- a/src/org/junit/experimental/theories/test/results/ResultMatchersTest.java
+++ b/src/org/junit/experimental/test/results/ResultMatchersTest.java
@@ -1,8 +1,8 @@
-package org.junit.experimental.theories.test.results;
+package org.junit.experimental.test.results;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
-import static org.junit.experimental.theories.matchers.api.StringContains.containsString;
+import static org.junit.matchers.StringContains.containsString;
 import org.junit.Test;
 import org.junit.experimental.results.ResultMatchers;
 import org.junit.experimental.theories.methods.api.Theory;
diff --git a/src/org/junit/experimental/theories/test/runner/DataPointMethodTest.java b/src/org/junit/experimental/test/runner/DataPointMethodTest.java
similarity index 92%
rename from src/org/junit/experimental/theories/test/runner/DataPointMethodTest.java
rename to src/org/junit/experimental/test/runner/DataPointMethodTest.java
index 9b0b2bd4cdf5..f76ab2dacb0e 100644
--- a/src/org/junit/experimental/theories/test/runner/DataPointMethodTest.java
+++ b/src/org/junit/experimental/test/runner/DataPointMethodTest.java
@@ -1,8 +1,8 @@
-package org.junit.experimental.theories.test.runner;
+package org.junit.experimental.test.runner;
 
 import static org.hamcrest.CoreMatchers.nullValue;
 import static org.junit.Assert.assertThat;
-import static org.junit.experimental.theories.matchers.api.Each.each;
+import static org.junit.matchers.Each.each;
 
 import java.util.List;
 
diff --git a/src/org/junit/experimental/theories/test/runner/ParameterizedAssertionErrorTest.java b/src/org/junit/experimental/test/runner/ParameterizedAssertionErrorTest.java
similarity index 93%
rename from src/org/junit/experimental/theories/test/runner/ParameterizedAssertionErrorTest.java
rename to src/org/junit/experimental/test/runner/ParameterizedAssertionErrorTest.java
index dafd28bcf4ad..93271d84c419 100644
--- a/src/org/junit/experimental/theories/test/runner/ParameterizedAssertionErrorTest.java
+++ b/src/org/junit/experimental/test/runner/ParameterizedAssertionErrorTest.java
@@ -1,6 +1,6 @@
-package org.junit.experimental.theories.test.runner;
+package org.junit.experimental.test.runner;
 
-import static org.junit.experimental.theories.matchers.api.StringContains.containsString;
+import static org.junit.matchers.StringContains.containsString;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.not;
 import static org.junit.Assert.assertThat;
diff --git a/src/org/junit/experimental/theories/test/runner/TheoriesTest.java b/src/org/junit/experimental/test/runner/TheoriesTest.java
similarity index 97%
rename from src/org/junit/experimental/theories/test/runner/TheoriesTest.java
rename to src/org/junit/experimental/test/runner/TheoriesTest.java
index b452d9ac6c62..22f40b4ca9c0 100644
--- a/src/org/junit/experimental/theories/test/runner/TheoriesTest.java
+++ b/src/org/junit/experimental/test/runner/TheoriesTest.java
@@ -1,4 +1,4 @@
-package org.junit.experimental.theories.test.runner;
+package org.junit.experimental.test.runner;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.not;
@@ -6,7 +6,7 @@
 import static org.junit.Assume.assumeThat;
 import static org.junit.experimental.results.ResultMatchers.failureCountIs;
 import static org.junit.experimental.results.ResultMatchers.hasSingleFailureContaining;
-import static org.junit.experimental.theories.matchers.api.StringContains.containsString;
+import static org.junit.matchers.StringContains.containsString;
 import org.hamcrest.Matcher;
 import org.junit.Test;
 import org.junit.experimental.results.PrintableResult;
diff --git a/src/org/junit/experimental/theories/test/runner/TheoryContainerReferenceTest.java b/src/org/junit/experimental/test/runner/TheoryContainerReferenceTest.java
similarity index 93%
rename from src/org/junit/experimental/theories/test/runner/TheoryContainerReferenceTest.java
rename to src/org/junit/experimental/test/runner/TheoryContainerReferenceTest.java
index 7153e64020c7..70e1612f2fe0 100644
--- a/src/org/junit/experimental/theories/test/runner/TheoryContainerReferenceTest.java
+++ b/src/org/junit/experimental/test/runner/TheoryContainerReferenceTest.java
@@ -1,4 +1,4 @@
-package org.junit.experimental.theories.test.runner;
+package org.junit.experimental.test.runner;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.not;
@@ -15,7 +15,7 @@
 import org.junit.experimental.theories.runner.TheoryContainerReference;
 import org.junit.experimental.theories.runner.api.Theories;
 import org.junit.runner.RunWith;
-import static org.junit.experimental.theories.matchers.api.StringContains.containsString;
+import static org.junit.matchers.StringContains.containsString;
 
 public class TheoryContainerReferenceTest {
 	private FunctionPointer method = new FunctionPointer();
diff --git a/src/org/junit/experimental/theories/matchers/api/CamelCaseName.java b/src/org/junit/experimental/theories/matchers/api/CamelCaseName.java
deleted file mode 100644
index f97cff254bbd..000000000000
--- a/src/org/junit/experimental/theories/matchers/api/CamelCaseName.java
+++ /dev/null
@@ -1,26 +0,0 @@
-/**
- * 
- */
-package org.junit.experimental.theories.matchers.api;
-
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-
-public class CamelCaseName {
-	private static final Pattern PATTERN = Pattern.compile(""([A-Za-z][a-z]*)"");
-	
-	private final String methodName;
-
-	public CamelCaseName(String methodName) {
-		this.methodName = methodName;
-	}
-
-	public String asNaturalLanguage() {
-		String description = """";
-		Matcher matcher = PATTERN.matcher(methodName);
-		while (matcher.find())
-			description += "" "" + matcher.group().toLowerCase();
-		return description.substring(1);
-	}
-}
\ No newline at end of file
diff --git a/src/org/junit/experimental/theories/matchers/api/ClassNamedMatcher.java b/src/org/junit/experimental/theories/matchers/api/ClassNamedMatcher.java
deleted file mode 100644
index 38998d64f36a..000000000000
--- a/src/org/junit/experimental/theories/matchers/api/ClassNamedMatcher.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package org.junit.experimental.theories.matchers.api;
-
-
-import org.hamcrest.BaseMatcher;
-import org.hamcrest.Description;
-
-public abstract class ClassNamedMatcher<T> extends BaseMatcher<T> {
-	public void describeTo(Description description) {
-		description.appendText(new CamelCaseName(getClass().getSimpleName())
-				.asNaturalLanguage());
-	}
-}
diff --git a/src/org/junit/experimental/theories/matchers/api/MethodNamedMatcher.java b/src/org/junit/experimental/theories/matchers/api/MethodNamedMatcher.java
deleted file mode 100644
index 72051a17204c..000000000000
--- a/src/org/junit/experimental/theories/matchers/api/MethodNamedMatcher.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package org.junit.experimental.theories.matchers.api;
-
-
-import org.hamcrest.BaseMatcher;
-import org.hamcrest.Description;
-
-public abstract class MethodNamedMatcher<T> extends BaseMatcher<T> {
-	private StackTrace constructionStackTrace;
-
-	public MethodNamedMatcher() {
-		this.constructionStackTrace = StackTrace.create();
-	}
-
-	public void describeTo(Description description) {
-		description.appendText(new CamelCaseName(constructionStackTrace
-				.factoryMethodName()).asNaturalLanguage());
-	}
-}
diff --git a/src/org/junit/experimental/theories/matchers/api/StackTrace.java b/src/org/junit/experimental/theories/matchers/api/StackTrace.java
deleted file mode 100644
index e0625543395f..000000000000
--- a/src/org/junit/experimental/theories/matchers/api/StackTrace.java
+++ /dev/null
@@ -1,37 +0,0 @@
-/**
- * 
- */
-package org.junit.experimental.theories.matchers.api;
-
-public class StackTrace {
-	public static StackTrace create() {
-		return new StackTrace(new RuntimeException());
-	}
-
-	private final StackTraceElement[] stackTrace;
-
-	private StackTrace(Throwable e) {
-		this.stackTrace = e.getStackTrace();
-	}
-
-	public String factoryMethodName() {
-		return nameOfMethodThatCalledMostRecentConstructor();
-	}
-
-	private String nameOfMethodThatCalledMostRecentConstructor() {
-		boolean initSeen = false;
-		for (StackTraceElement element : getElements()) {
-			if (element.getMethodName().equals(""<init>""))
-				initSeen = true;
-			else if (initSeen)
-				return element.getMethodName();
-		}
-
-		return null;
-	}
-
-	public StackTraceElement[] getElements() {
-		return stackTrace;
-	}
-
-}
\ No newline at end of file
diff --git a/src/org/junit/experimental/theories/javamodel/api/ConcreteFunction.java b/src/org/junit/experimental/theories/runner/ConcreteFunction.java
similarity index 93%
rename from src/org/junit/experimental/theories/javamodel/api/ConcreteFunction.java
rename to src/org/junit/experimental/theories/runner/ConcreteFunction.java
index e76f78dd31be..4b932461ea81 100644
--- a/src/org/junit/experimental/theories/javamodel/api/ConcreteFunction.java
+++ b/src/org/junit/experimental/theories/runner/ConcreteFunction.java
@@ -1,7 +1,7 @@
 /**
  * 
  */
-package org.junit.experimental.theories.javamodel.api;
+package org.junit.experimental.theories.runner;
 
 import java.lang.reflect.Method;
 
diff --git a/src/org/junit/experimental/theories/javamodel/api/Function.java b/src/org/junit/experimental/theories/runner/Function.java
similarity index 97%
rename from src/org/junit/experimental/theories/javamodel/api/Function.java
rename to src/org/junit/experimental/theories/runner/Function.java
index b4c64bb30ee5..d8015078cfb0 100644
--- a/src/org/junit/experimental/theories/javamodel/api/Function.java
+++ b/src/org/junit/experimental/theories/runner/Function.java
@@ -1,4 +1,4 @@
-package org.junit.experimental.theories.javamodel.api;
+package org.junit.experimental.theories.runner;
 
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
diff --git a/src/org/junit/experimental/theories/runner/TheoryContainerReference.java b/src/org/junit/experimental/theories/runner/TheoryContainerReference.java
index acdbf7fe9054..5207208b0677 100644
--- a/src/org/junit/experimental/theories/runner/TheoryContainerReference.java
+++ b/src/org/junit/experimental/theories/runner/TheoryContainerReference.java
@@ -11,10 +11,8 @@
 import java.util.List;
 
 import org.junit.Assume.AssumptionViolatedException;
-import org.junit.experimental.theories.javamodel.api.ConcreteFunction;
 import org.junit.experimental.theories.methods.api.ParameterSignature;
 import org.junit.experimental.theories.methods.api.ParameterSupplier;
-import org.junit.experimental.theories.runner.api.Theories.TheoryMethod;
 
 public class TheoryContainerReference {
 	private final Object container;
diff --git a/src/org/junit/experimental/theories/runner/TheoryMethod.java b/src/org/junit/experimental/theories/runner/TheoryMethod.java
new file mode 100644
index 000000000000..b5a72559c5f8
--- /dev/null
+++ b/src/org/junit/experimental/theories/runner/TheoryMethod.java
@@ -0,0 +1,59 @@
+/**
+ * 
+ */
+package org.junit.experimental.theories.runner;
+
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.junit.Assert;
+import org.junit.Assume.AssumptionViolatedException;
+import org.junit.experimental.theories.methods.api.Theory;
+import org.junit.internal.runners.TestClass;
+import org.junit.internal.runners.TestMethod;
+
+public class TheoryMethod extends TestMethod {
+	private final Method fMethod;
+
+	private List<AssumptionViolatedException> fInvalidParameters= new ArrayList<AssumptionViolatedException>();
+
+	public TheoryMethod(Method method, TestClass testClass) {
+		super(method, testClass);
+		fMethod= method;
+	}
+
+	@Override
+	public void invoke(Object test) throws IllegalArgumentException,
+			IllegalAccessException, InvocationTargetException {
+		TheoryContainerReference container= new TheoryContainerReference(
+				test);
+
+		ConcreteFunction function= new ConcreteFunction(test, fMethod);
+
+		int runCount= 0;
+		try {
+			runCount+= container.runWithParameters(this,
+					new ArrayList<Object>(), function.signatures());
+		} catch (Throwable e) {
+			throw new InvocationTargetException(e);
+		}
+		if (runCount == 0)
+			Assert
+					.fail(""Never found parameters that satisfied method.  Violated assumptions: ""
+							+ fInvalidParameters);
+	}
+
+	public boolean nullsOk() {
+		return fMethod.getAnnotation(Theory.class).nullsAccepted();
+	}
+
+	public Method getMethod() {
+		return fMethod;
+	}
+
+	public void addAssumptionFailure(AssumptionViolatedException e) {
+		fInvalidParameters.add(e);
+	}
+}
\ No newline at end of file
diff --git a/src/org/junit/experimental/theories/runner/api/Theories.java b/src/org/junit/experimental/theories/runner/api/Theories.java
index a69c3df4f770..23d84709f637 100644
--- a/src/org/junit/experimental/theories/runner/api/Theories.java
+++ b/src/org/junit/experimental/theories/runner/api/Theories.java
@@ -3,67 +3,17 @@
  */
 package org.junit.experimental.theories.runner.api;
 
-import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
-import java.util.ArrayList;
 import java.util.List;
 
-import org.junit.Assert;
-import org.junit.Assume.AssumptionViolatedException;
-import org.junit.experimental.theories.javamodel.api.ConcreteFunction;
 import org.junit.experimental.theories.methods.api.Theory;
-import org.junit.experimental.theories.runner.TheoryContainerReference;
+import org.junit.experimental.theories.runner.TheoryMethod;
 import org.junit.internal.runners.InitializationError;
 import org.junit.internal.runners.JUnit4ClassRunner;
-import org.junit.internal.runners.TestClass;
 import org.junit.internal.runners.TestMethod;
 
 @SuppressWarnings(""restriction"")
 public class Theories extends JUnit4ClassRunner {
-	public static class TheoryMethod extends TestMethod {
-		private final Method fMethod;
-
-		private List<AssumptionViolatedException> fInvalidParameters= new ArrayList<AssumptionViolatedException>();
-
-		private TheoryMethod(Method method, TestClass testClass) {
-			super(method, testClass);
-			fMethod= method;
-		}
-
-		@Override
-		public void invoke(Object test) throws IllegalArgumentException,
-				IllegalAccessException, InvocationTargetException {
-			TheoryContainerReference container= new TheoryContainerReference(
-					test);
-
-			ConcreteFunction function= new ConcreteFunction(test, fMethod);
-
-			int runCount= 0;
-			try {
-				runCount+= container.runWithParameters(this,
-						new ArrayList<Object>(), function.signatures());
-			} catch (Throwable e) {
-				throw new InvocationTargetException(e);
-			}
-			if (runCount == 0)
-				Assert
-						.fail(""Never found parameters that satisfied method.  Violated assumptions: ""
-								+ fInvalidParameters);
-		}
-
-		public boolean nullsOk() {
-			return fMethod.getAnnotation(Theory.class).nullsAccepted();
-		}
-
-		public Method getMethod() {
-			return fMethod;
-		}
-
-		public void addAssumptionFailure(AssumptionViolatedException e) {
-			fInvalidParameters.add(e);
-		}
-	}
-
 	@Override
 	protected void validate() throws InitializationError {
 	}
diff --git a/src/org/junit/experimental/theories/test/TheoryTests.java b/src/org/junit/experimental/theories/test/TheoryTests.java
deleted file mode 100644
index 0a22701246a7..000000000000
--- a/src/org/junit/experimental/theories/test/TheoryTests.java
+++ /dev/null
@@ -1,38 +0,0 @@
-package org.junit.experimental.theories.test;
-
-import org.junit.experimental.theories.test.assertion.AssumptionViolatedExceptionTest;
-import org.junit.experimental.theories.test.imposterization.AssumePassingTest;
-import org.junit.experimental.theories.test.imposterization.PopperImposterizerTest;
-import org.junit.experimental.theories.test.imposterization.ThrownMatcherTest;
-import org.junit.experimental.theories.test.javamodel.ConcreteFunctionTest;
-import org.junit.experimental.theories.test.javamodel.FunctionTest;
-import org.junit.experimental.theories.test.matchers.CamelCaseNameTest;
-import org.junit.experimental.theories.test.matchers.ClassNamedMatcherTest;
-import org.junit.experimental.theories.test.matchers.EachTest;
-import org.junit.experimental.theories.test.matchers.MatcherCharacterization;
-import org.junit.experimental.theories.test.matchers.MethodNamedMatcherTest;
-import org.junit.experimental.theories.test.matchers.StackTraceTest;
-import org.junit.experimental.theories.test.results.PrintableResultTest;
-import org.junit.experimental.theories.test.results.ResultMatchersTest;
-import org.junit.experimental.theories.test.runner.DataPointMethodTest;
-import org.junit.experimental.theories.test.runner.ParameterizedAssertionErrorTest;
-import org.junit.experimental.theories.test.runner.TheoriesTest;
-import org.junit.experimental.theories.test.runner.TheoryContainerReferenceTest;
-import org.junit.runner.RunWith;
-import org.junit.runners.Suite;
-import org.junit.runners.Suite.SuiteClasses;
-
-@RunWith(Suite.class)
-@SuiteClasses( { AssumptionViolatedExceptionTest.class,
-		ConcreteFunctionTest.class, CamelCaseNameTest.class,
-		ClassNamedMatcherTest.class, EachTest.class,
-		MatcherCharacterization.class, MethodNamedMatcherTest.class,
-		StackTraceTest.class, ParameterizedAssertionErrorTest.class,
-		TheoriesTest.class, TheoryContainerReferenceTest.class,
-		FunctionTest.class, PrintableResultTest.class,
-		ResultMatchersTest.class, DataPointMethodTest.class,
-		AssumePassingTest.class, PopperImposterizerTest.class,
-		ThrownMatcherTest.class })
-public class TheoryTests {
-
-}
diff --git a/src/org/junit/experimental/theories/test/matchers/CamelCaseNameTest.java b/src/org/junit/experimental/theories/test/matchers/CamelCaseNameTest.java
deleted file mode 100644
index 96b55b7d5d76..000000000000
--- a/src/org/junit/experimental/theories/test/matchers/CamelCaseNameTest.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package org.junit.experimental.theories.test.matchers;
-
-import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
-import org.junit.Test;
-import org.junit.experimental.theories.matchers.api.CamelCaseName;
-
-
-public class CamelCaseNameTest {
-	@Test
-	public void basicParsing() {
-		assertThat(new CamelCaseName(""hasAFreezer"").asNaturalLanguage(),
-				is(""has a freezer""));
-	}
-}
diff --git a/src/org/junit/experimental/theories/test/matchers/ClassNamedMatcherTest.java b/src/org/junit/experimental/theories/test/matchers/ClassNamedMatcherTest.java
deleted file mode 100644
index ed33e50fecc3..000000000000
--- a/src/org/junit/experimental/theories/test/matchers/ClassNamedMatcherTest.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/**
- * 
- */
-package org.junit.experimental.theories.test.matchers;
-
-import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
-import org.junit.Test;
-import org.junit.experimental.theories.matchers.api.ClassNamedMatcher;
-
-public class ClassNamedMatcherTest {
-	public static class NothingMuch extends ClassNamedMatcher<Object> {
-		public boolean matches(Object item) {
-			return false;
-		}
-	}
-
-	@Test public void classNamedMatcherWorks() {
-		assertThat(new NothingMuch().toString(), is(""nothing much""));
-	}
-
-	public static class NothingMuchMore extends ClassNamedMatcher<Object> {
-		public boolean matches(Object item) {
-			return false;
-		}
-	}
-
-	@Test public void classNamedMatcherWorksTriangulation() {
-		assertThat(new NothingMuchMore().toString(),
-				is(""nothing much more""));
-	}
-}
\ No newline at end of file
diff --git a/src/org/junit/experimental/theories/test/matchers/MethodNamedMatcherTest.java b/src/org/junit/experimental/theories/test/matchers/MethodNamedMatcherTest.java
deleted file mode 100644
index 56ee4c761fae..000000000000
--- a/src/org/junit/experimental/theories/test/matchers/MethodNamedMatcherTest.java
+++ /dev/null
@@ -1,51 +0,0 @@
-package org.junit.experimental.theories.test.matchers;
-
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.CoreMatchers.nullValue;
-import static org.junit.Assert.assertThat;
-import org.hamcrest.Matcher;
-import org.junit.Test;
-import org.junit.experimental.theories.matchers.api.MethodNamedMatcher;
-import org.junit.experimental.theories.matchers.api.StackTrace;
-
-public class MethodNamedMatcherTest {
-	@Test public void noFactoryNameIfNoConstructor() {
-		assertThat(StackTrace.create().factoryMethodName(), nullValue());
-	}
-
-	@Test public void requirementDescriptionIsBasedOnMethodName() {
-		assertThat(hasAFrooble().toString(), is(""has a frooble""));
-	}
-
-	private Matcher<Object> hasAFrooble() {
-		return new MethodNamedMatcher<Object>() {
-			public boolean matches(Object value) {
-				return false;
-			}
-		};
-	}
-
-	@Test public void requirementDescriptionIsBasedOnMethodNameTriangulation() {
-		assertThat(hasAWidget().toString(), is(""has a widget""));
-	}
-
-	private Matcher<Object> hasAWidget() {
-		return new MethodNamedMatcher<Object>() {
-			public boolean matches(Object value) {
-				return false;
-			}
-		};
-	}
-
-	@Test public void requirementDescriptionIsBasedOnMethodNameMoreTriangulation() {
-		assertThat(doesNotAtAllExist().toString(), is(""does not at all exist""));
-	}
-
-	private Matcher<Object> doesNotAtAllExist() {
-		return new MethodNamedMatcher<Object>() {
-			public boolean matches(Object value) {
-				return false;
-			}
-		};
-	}
-}
diff --git a/src/org/junit/experimental/theories/test/matchers/StackTraceTest.java b/src/org/junit/experimental/theories/test/matchers/StackTraceTest.java
deleted file mode 100644
index 67fc02efd1e5..000000000000
--- a/src/org/junit/experimental/theories/test/matchers/StackTraceTest.java
+++ /dev/null
@@ -1,37 +0,0 @@
-package org.junit.experimental.theories.test.matchers;
-
-
-import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
-import static org.junit.experimental.theories.matchers.api.StringContains.containsString;
-import org.junit.Test;
-import org.junit.experimental.theories.matchers.api.StackTrace;
-
-public class StackTraceTest {
-	private static class ThingWithStackTrace {
-		private StackTrace stackTrace;
-
-		private ThingWithStackTrace() {
-			stackTrace = StackTrace.create();
-		}
-	}
-
-	private ThingWithStackTrace newThing() {
-		return new ThingWithStackTrace();
-	}
-
-	@Test public void factoryMethodName() {
-		assertThat(newThing().stackTrace.factoryMethodName(), is(""newThing""));
-	}
-
-	@Test public void characterizeStackTrace() {
-		StackTraceElement[] stackTrace = newThing().stackTrace.getElements();
-		String methodNames = """";
-
-		for (StackTraceElement element : stackTrace) {
-			methodNames += element.getMethodName() + "":"";
-		}
-
-		assertThat(methodNames.toString(), containsString("":<init>:""));
-	}
-}
diff --git a/src/org/junit/experimental/theories/matchers/api/Each.java b/src/org/junit/matchers/Each.java
similarity index 80%
rename from src/org/junit/experimental/theories/matchers/api/Each.java
rename to src/org/junit/matchers/Each.java
index fc69630b6ee5..3ef4d38a644f 100644
--- a/src/org/junit/experimental/theories/matchers/api/Each.java
+++ b/src/org/junit/matchers/Each.java
@@ -1,10 +1,10 @@
-package org.junit.experimental.theories.matchers.api;
+package org.junit.matchers;
 
 import static org.hamcrest.CoreMatchers.not;
 import org.hamcrest.BaseMatcher;
 import org.hamcrest.Description;
 import org.hamcrest.Matcher;
-import static org.junit.experimental.theories.matchers.api.IsCollectionContaining.hasItem;
+import static org.junit.matchers.IsCollectionContaining.hasItem;
 
 public class Each {
 	public static <T> Matcher<Iterable<T>> each(final Matcher<T> individual) {
diff --git a/src/org/junit/experimental/theories/matchers/api/IsCollectionContaining.java b/src/org/junit/matchers/IsCollectionContaining.java
similarity index 97%
rename from src/org/junit/experimental/theories/matchers/api/IsCollectionContaining.java
rename to src/org/junit/matchers/IsCollectionContaining.java
index ed0a4946934c..7699e8c2357d 100644
--- a/src/org/junit/experimental/theories/matchers/api/IsCollectionContaining.java
+++ b/src/org/junit/matchers/IsCollectionContaining.java
@@ -1,4 +1,4 @@
-package org.junit.experimental.theories.matchers.api;
+package org.junit.matchers;
 
 import static org.hamcrest.core.AllOf.allOf;
 import static org.hamcrest.core.IsEqual.equalTo;
diff --git a/src/org/junit/experimental/theories/matchers/api/StringContains.java b/src/org/junit/matchers/StringContains.java
similarity index 92%
rename from src/org/junit/experimental/theories/matchers/api/StringContains.java
rename to src/org/junit/matchers/StringContains.java
index 71148e41b7bb..67083db41677 100644
--- a/src/org/junit/experimental/theories/matchers/api/StringContains.java
+++ b/src/org/junit/matchers/StringContains.java
@@ -1,6 +1,6 @@
 /*  Copyright (c) 2000-2006 hamcrest.org
  */
-package org.junit.experimental.theories.matchers.api;
+package org.junit.matchers;
 
 import org.hamcrest.Factory;
 import org.hamcrest.Matcher;
diff --git a/src/org/junit/experimental/theories/matchers/api/SubstringMatcher.java b/src/org/junit/matchers/SubstringMatcher.java
similarity index 94%
rename from src/org/junit/experimental/theories/matchers/api/SubstringMatcher.java
rename to src/org/junit/matchers/SubstringMatcher.java
index 80227000309d..cab23cc2dd8c 100644
--- a/src/org/junit/experimental/theories/matchers/api/SubstringMatcher.java
+++ b/src/org/junit/matchers/SubstringMatcher.java
@@ -1,4 +1,4 @@
-package org.junit.experimental.theories.matchers.api;
+package org.junit.matchers;
 
 import org.hamcrest.Description;
 
diff --git a/src/org/junit/experimental/theories/matchers/api/TypeSafeMatcher.java b/src/org/junit/matchers/TypeSafeMatcher.java
similarity index 97%
rename from src/org/junit/experimental/theories/matchers/api/TypeSafeMatcher.java
rename to src/org/junit/matchers/TypeSafeMatcher.java
index f8ffafc708c0..47e35884d48c 100644
--- a/src/org/junit/experimental/theories/matchers/api/TypeSafeMatcher.java
+++ b/src/org/junit/matchers/TypeSafeMatcher.java
@@ -1,4 +1,4 @@
-package org.junit.experimental.theories.matchers.api;
+package org.junit.matchers;
 
 import java.lang.reflect.Method;
 
diff --git a/src/org/junit/tests/AssumptionTest.java b/src/org/junit/tests/AssumptionTest.java
index e7d71001aee2..e82445203aea 100644
--- a/src/org/junit/tests/AssumptionTest.java
+++ b/src/org/junit/tests/AssumptionTest.java
@@ -5,7 +5,7 @@
 import static org.junit.Assume.assumeNoException;
 import static org.junit.Assume.assumeNotNull;
 import static org.junit.Assume.assumeThat;
-import static org.junit.experimental.theories.matchers.api.StringContains.containsString;
+import static org.junit.matchers.StringContains.containsString;
 
 import org.junit.Assume;
 import org.junit.Test;",Re-organize theory packages,1
"diff --git a/core/src/mindustry/core/NetServer.java b/core/src/mindustry/core/NetServer.java
index 818fc0fa5..5734ee788 100644
--- a/core/src/mindustry/core/NetServer.java
+++ b/core/src/mindustry/core/NetServer.java
@@ -131,7 +131,7 @@ public class NetServer implements ApplicationListener{
                 return;
             }
 
-            if(admins.getPlayerLimit() > 0 && playerGroup.size() >= admins.getPlayerLimit()){
+            if(admins.getPlayerLimit() > 0 && playerGroup.size() >= admins.getPlayerLimit() && !netServer.admins.isAdmin(uuid, packet.usid)){
                 con.kick(KickReason.playerLimit);
                 return;",Prevent default action for form submit event in ` PivotConfiguration ` .,0
"diff --git a/.gitignore b/.gitignore
index 133735f7be28..226a3f3d65cd 100644
--- a/.gitignore
+++ b/.gitignore
@@ -15,6 +15,8 @@ release.properties
 
 .idea
 *.iml
+*.ipr
+*.iws
 classes
 
 obj
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
index 34aa9818a201..22d4395df7e4 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
@@ -278,7 +278,7 @@ protected final void connect() throws IOException {
         hostnameVerifier = policy.hostnameVerifier;
       }
       Address address = new Address(uriHost, getEffectivePort(uri), sslSocketFactory,
-          hostnameVerifier, policy.authenticator, policy.requestedProxy, policy.transports);
+          hostnameVerifier, policy.authenticator, policy.requestedProxy, policy.getTransports());
       routeSelector = new RouteSelector(address, uri, policy.proxySelector, policy.connectionPool,
           Dns.DEFAULT, policy.getFailedRoutes());
     }
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java
index f6d77b25085b..f04b31779f42 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java
@@ -127,10 +127,13 @@ public void writeRequestHeaders() throws IOException {
   }
 
   @Override public ResponseHeaders readResponseHeaders() throws IOException {
-    RawHeaders headers = RawHeaders.fromBytes(socketIn);
-    httpEngine.connection.setHttpMinorVersion(headers.getHttpMinorVersion());
-    httpEngine.receiveHeaders(headers);
-    return new ResponseHeaders(httpEngine.uri, headers);
+    RawHeaders rawHeaders = RawHeaders.fromBytes(socketIn);
+    httpEngine.connection.setHttpMinorVersion(rawHeaders.getHttpMinorVersion());
+    httpEngine.receiveHeaders(rawHeaders);
+
+    ResponseHeaders headers = new ResponseHeaders(httpEngine.uri, rawHeaders);
+    headers.setTransport(""http/1.1"");
+    return headers;
   }
 
   public boolean makeReusable(boolean streamCancelled, OutputStream requestBodyOut,
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java
index ee73c7fa3d00..c7d75a962e81 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java
@@ -40,6 +40,7 @@
 import java.net.URL;
 import java.security.Permission;
 import java.security.cert.CertificateException;
+import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -93,7 +94,7 @@ public class HttpURLConnectionImpl extends HttpURLConnection {
   /* SSL configuration; necessary for HTTP requests that get redirected to HTTPS. */
   SSLSocketFactory sslSocketFactory;
   HostnameVerifier hostnameVerifier;
-  List<String> transports;
+  private List<String> transports;
   OkAuthenticator authenticator;
   final Set<Route> failedRoutes;
 
@@ -125,6 +126,10 @@ Set<Route> getFailedRoutes() {
     return failedRoutes;
   }
 
+  List<String> getTransports() {
+    return transports;
+  }
+
   @Override public final void connect() throws IOException {
     initHttpEngine();
     boolean success;
@@ -547,7 +552,11 @@ final int getChunkLength() {
     if (field == null) {
       throw new NullPointerException(""field == null"");
     }
-    rawRequestHeaders.set(field, newValue);
+    if (""X-Android-Transports"".equals(field)) {
+      setTransports(newValue, false /* append */);
+    } else {
+      rawRequestHeaders.set(field, newValue);
+    }
   }
 
   @Override public final void addRequestProperty(String field, String value) {
@@ -557,6 +566,54 @@ final int getChunkLength() {
     if (field == null) {
       throw new NullPointerException(""field == null"");
     }
-    rawRequestHeaders.add(field, value);
+
+    if (""X-Android-Transports"".equals(field)) {
+      setTransports(value, true /* append */);
+    } else {
+      rawRequestHeaders.add(field, value);
+    }
+  }
+
+  /*
+   * Splits and validates a comma-separated string of transports.
+   * When append == false, we require that the transport list contains ""http/1.1"".
+   */
+  private void setTransports(String transportsString, boolean append) {
+    if (transportsString == null) {
+      throw new NullPointerException(""transportsString == null"");
+    }
+
+    String[] transports = transportsString.split("","", -1);
+    ArrayList<String> transportsList = new ArrayList<String>();
+    if (!append) {
+      // If we're not appending to the list, we need to make sure
+      // the list contains ""http/1.1"". We do this in a separate loop
+      // to avoid modifying any state before we validate the input.
+      boolean containsHttp = false;
+      for (int i = 0; i < transports.length; ++i) {
+        if (""http/1.1"".equals(transports[i])) {
+          containsHttp = true;
+          break;
+        }
+      }
+
+      if (!containsHttp) {
+        throw new IllegalArgumentException(""Transport list doesn't contain http/1.1"");
+      }
+    } else {
+      transportsList.addAll(this.transports);
+    }
+
+    for (int i = 0; i < transports.length; ++i) {
+      if (transports[i].length() == 0) {
+        throw new IllegalArgumentException(""Transport list contains an empty transport"");
+      }
+
+      if (!transportsList.contains(transports[i])) {
+        transportsList.add(transports[i]);
+      }
+    }
+
+    this.transports = Util.immutableList(transportsList);
   }
 }
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/ResponseHeaders.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/ResponseHeaders.java
index 2ab564dcf64d..97925c2a426e 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/ResponseHeaders.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/ResponseHeaders.java
@@ -42,6 +42,9 @@ public final class ResponseHeaders {
   /** HTTP synthetic header with the response source. */
   static final String RESPONSE_SOURCE = ""X-Android-Response-Source"";
 
+  /** HTTP synthetic header with the selected transport (spdy/3, http/1.1, etc.) */
+  static final String SELECTED_TRANSPORT = ""X-Android-Selected-Transport"";
+
   private final URI uri;
   private final RawHeaders headers;
 
@@ -278,6 +281,10 @@ public void setResponseSource(ResponseSource responseSource) {
     headers.set(RESPONSE_SOURCE, responseSource.toString() + "" "" + headers.getResponseCode());
   }
 
+  public void setTransport(String transport) {
+    headers.set(SELECTED_TRANSPORT, transport);
+  }
+
   /**
    * Returns the current age of the response, in milliseconds. The calculation
    * is specified by RFC 2616, 13.2.3 Age Calculations.
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java
index 18ab5668e12f..73709b581d40 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java
@@ -71,7 +71,10 @@ public SpdyTransport(HttpEngine httpEngine, SpdyConnection spdyConnection) {
     RawHeaders rawHeaders = RawHeaders.fromNameValueBlock(nameValueBlock);
     rawHeaders.computeResponseStatusLineFromSpdyHeaders();
     httpEngine.receiveHeaders(rawHeaders);
-    return new ResponseHeaders(httpEngine.uri, rawHeaders);
+
+    ResponseHeaders headers = new ResponseHeaders(httpEngine.uri, rawHeaders);
+    headers.setTransport(""spdy/3"");
+    return headers;
   }
 
   @Override public InputStream getTransferStream(CacheRequest cacheRequest) throws IOException {",Support querying & setting transport lists on connections. <enter>  <enter> The list is specified via a magic request property <enter> 'X-Android-Transports' and can be queried via the request <enter> property 'X-Android-Selected-Transport'. <enter>  <enter> System wide defaults / switches don't need any changes <enter> to okhttp. They can be set as options on the OkHttpClient <enter> used by the platform UrlStreamHandlers.,1
"diff --git a/common/src/main/java/com/google/auto/common/MoreTypes.java b/common/src/main/java/com/google/auto/common/MoreTypes.java
index ca6b99b21..6df1acdc6 100644
--- a/common/src/main/java/com/google/auto/common/MoreTypes.java
+++ b/common/src/main/java/com/google/auto/common/MoreTypes.java
@@ -39,6 +39,10 @@ import javax.lang.model.type.ArrayType;
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.ErrorType;
 import javax.lang.model.type.ExecutableType;
+import javax.lang.model.type.NoType;
+import javax.lang.model.type.NullType;
+import javax.lang.model.type.PrimitiveType;
+import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.type.TypeVariable;
 import javax.lang.model.type.TypeVisitor;
@@ -389,5 +393,183 @@ public final class MoreTypes {
     return builder.build();
   }
 
+  /**
+   * Returns a {@link ArrayType} if the {@link TypeMirror} represents a primitive array or
+   * throws an {@link IllegalArgumentException}.
+   */
+  public static ArrayType asArray(TypeMirror maybeArrayType) {
+    return maybeArrayType.accept(new CastingTypeVisitor<ArrayType>() {
+      @Override public ArrayType visitArray(ArrayType type, String ignore) {
+        return type;
+      }
+    }, ""primitive array"");
+  }
+
+  /**
+   * Returns a {@link DeclaredType} if the {@link TypeMirror} represents a declared type such
+   * as a class, interface, union/compound, or enum or throws an {@link IllegalArgumentException}.
+   */
+  public static DeclaredType asDeclared(TypeMirror maybeDeclaredType) {
+    return maybeDeclaredType.accept(new CastingTypeVisitor<DeclaredType>() {
+      @Override public DeclaredType visitDeclared(DeclaredType type, String ignored) {
+        return type;
+      }
+    }, ""declared type"");
+  }
+
+  /**
+   * Returns a {@link ExecutableType} if the {@link TypeMirror} represents an executable type such
+   * as may result from missing code, or bad compiles or throws an {@link IllegalArgumentException}.
+   */
+  public static ErrorType asError(TypeMirror maybeErrorType) {
+    return maybeErrorType.accept(new CastingTypeVisitor<ErrorType>() {
+      @Override public ErrorType visitError(ErrorType type, String p) {
+        return type;
+      }
+    }, ""error type"");
+  }
+
+  /**
+   * Returns a {@link ExecutableType} if the {@link TypeMirror} represents an executable type such
+   * as a method, constructor, or initializer or throws an {@link IllegalArgumentException}.
+   */
+  public static ExecutableType asExecutable(TypeMirror maybeExecutableType) {
+    return maybeExecutableType.accept(new CastingTypeVisitor<ExecutableType>() {
+      @Override public ExecutableType visitExecutable(ExecutableType type, String p) {
+        return type;
+      }
+    }, ""executable type"");
+  }
+
+  /**
+   * Returns a {@link NoType} if the {@link TypeMirror} represents an non-type such
+   * as void, or package, etc. or throws an {@link IllegalArgumentException}.
+   */
+  public static NoType asNoType(TypeMirror maybeNoType) {
+    return maybeNoType.accept(new CastingTypeVisitor<NoType>() {
+      @Override public NoType visitNoType(NoType noType, String p) {
+        return noType;
+      }
+    }, ""non-type"");
+  }
+
+  /**
+   * Returns a {@link NullType} if the {@link TypeMirror} represents the null type
+   * or throws an {@link IllegalArgumentException}.
+   */
+  public static NullType asNullType(TypeMirror maybeNullType) {
+    return maybeNullType.accept(new CastingTypeVisitor<NullType>() {
+      @Override public NullType visitNull(NullType nullType, String p) {
+        return nullType;
+      }
+    }, ""null"");
+  }
+
+  /**
+   * Returns a {@link PrimitiveType} if the {@link TypeMirror} represents a primitive type
+   * or throws an {@link IllegalArgumentException}.
+   */
+  public static PrimitiveType asPrimitiveType(TypeMirror maybePrimitiveType) {
+    return maybePrimitiveType.accept(new CastingTypeVisitor<PrimitiveType>() {
+      @Override public PrimitiveType visitPrimitive(PrimitiveType type, String p) {
+        return type;
+      }
+    }, ""primitive type"");
+  }
+
+  //
+  // visitUnionType would go here, but it is a 1.7 API.
+  //
+
+  /**
+   * Returns a {@link TypeVariable} if the {@link TypeMirror} represents a type variable
+   * or throws an {@link IllegalArgumentException}.
+   */
+  public static TypeVariable asTypeVariable(TypeMirror maybeTypeVariable) {
+    return maybeTypeVariable.accept(new CastingTypeVisitor<TypeVariable>() {
+      @Override public TypeVariable visitTypeVariable(TypeVariable type, String p) {
+        return type;
+      }
+    }, ""type variable"");
+  }
+
+  /**
+   * Returns a {@link WildcardType} if the {@link TypeMirror} represents a wildcard type
+   * or throws an {@link IllegalArgumentException}.
+   */
+  public static WildcardType asWildcard(WildcardType maybeWildcardType) {
+    return maybeWildcardType.accept(new CastingTypeVisitor<WildcardType>() {
+      @Override public WildcardType visitWildcard(WildcardType type, String p) {
+        return type;
+      }
+    }, ""wildcard type"");
+  }
+
+  /**
+   *
+   * Returns true if the raw type underlying the given {@link TypeMirror} represents the
+   * same raw type as the given {@link Class} and throws an IllegalArgumentException if the
+   * {@link TypeMirror} does not represent a type that can be referenced by a {@link Class}
+   */
+  public static boolean isTypeOf(final Class<?> clazz, TypeMirror type) {
+    checkNotNull(clazz);
+    return type.accept(new SimpleTypeVisitor6<Boolean, Void>() {
+      @Override protected Boolean defaultAction(TypeMirror type, Void ignored) {
+        throw new IllegalArgumentException(type + "" cannot be represented as a Class<?>."");
+      }
+
+      @Override public Boolean visitNoType(NoType noType, Void p) {
+        if (noType.getKind().equals(TypeKind.VOID)) {
+          return clazz.equals(Void.TYPE);
+        }
+        throw new IllegalArgumentException(noType + "" cannot be represented as a Class<?>."");
+      }
+
+      @Override public Boolean visitPrimitive(PrimitiveType type, Void p) {
+        switch (type.getKind()) {
+          case BOOLEAN:
+            return clazz.equals(Boolean.TYPE);
+          case BYTE:
+            return clazz.equals(Byte.TYPE);
+          case CHAR:
+            return clazz.equals(Character.TYPE);
+          case DOUBLE:
+            return clazz.equals(Double.TYPE);
+          case FLOAT:
+            return clazz.equals(Float.TYPE);
+          case INT:
+            return clazz.equals(Integer.TYPE);
+          case LONG:
+            return clazz.equals(Long.TYPE);
+          case SHORT:
+            return clazz.equals(Short.TYPE);
+          default:
+            throw new IllegalArgumentException(type + "" cannot be represented as a Class<?>."");
+        }
+      }
+
+      @Override public Boolean visitArray(ArrayType array, Void p) {
+        return clazz.isArray()
+            && isTypeOf(clazz.getComponentType(), array.getComponentType());
+      }
+
+      @Override public Boolean visitDeclared(DeclaredType type, Void ignored) {
+        TypeElement typeElement;
+        try {
+          typeElement = MoreElements.asType(type.asElement());
+        } catch (IllegalArgumentException iae) {
+          throw new IllegalArgumentException(type + "" does not represent a class or interface."");
+        }
+        return typeElement.getQualifiedName().contentEquals(clazz.getCanonicalName());
+      }
+    }, null);
+  }
+
+  private static class CastingTypeVisitor<T> extends SimpleTypeVisitor6<T, String> {
+    @Override protected T defaultAction(TypeMirror e, String label) {
+      throw new IllegalArgumentException(e + "" does not represent a "" + label);
+    }
+  }
+
   private MoreTypes() {}
 }
diff --git a/common/src/main/java/com/google/auto/common/SuperficialValidation.java b/common/src/main/java/com/google/auto/common/SuperficialValidation.java
index 43193c944..e87930818 100644
--- a/common/src/main/java/com/google/auto/common/SuperficialValidation.java
+++ b/common/src/main/java/com/google/auto/common/SuperficialValidation.java
@@ -16,6 +16,7 @@
 package com.google.auto.common;
 
 import java.util.List;
+import java.util.Map;
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.AnnotationValue;
 import javax.lang.model.element.AnnotationValueVisitor;
@@ -30,6 +31,7 @@ import javax.lang.model.type.ArrayType;
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.ErrorType;
 import javax.lang.model.type.ExecutableType;
+import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.type.TypeVisitor;
 import javax.lang.model.type.WildcardType;
@@ -73,7 +75,7 @@ public final class SuperficialValidation {
         @Override public Boolean visitExecutable(ExecutableElement e, Void p) {
           AnnotationValue defaultValue = e.getDefaultValue();
           return isValidBaseElement(e)
-              && (defaultValue == null || validateAnnotationValue(defaultValue))
+              && (defaultValue == null || validateAnnotationValue(defaultValue, e.getReturnType()))
               && validateType(e.getReturnType())
               && validateTypes(e.getThrownTypes())
               && validateElements(e.getTypeParameters())
@@ -85,8 +87,7 @@ public final class SuperficialValidation {
               && validateTypes(e.getBounds());
         }
 
-        @Override
-        public Boolean visitUnknown(Element e, Void p) {
+        @Override public Boolean visitUnknown(Element e, Void p) {
           // just assume that unknown elements are OK
           return true;
         }
@@ -177,41 +178,49 @@ public final class SuperficialValidation {
 
   private static boolean validateAnnotation(AnnotationMirror annotationMirror) {
     return validateType(annotationMirror.getAnnotationType())
-        && validateAnnotationValues(annotationMirror.getElementValues().values());
+        && validateAnnotationValues(annotationMirror.getElementValues());
   }
 
   private static boolean validateAnnotationValues(
-      Iterable<? extends AnnotationValue> annotationValues) {
-    for (AnnotationValue annotationMirror : annotationValues) {
-      if (!validateAnnotationValue(annotationMirror)) {
+      Map<? extends ExecutableElement, ? extends AnnotationValue> valueMap) {
+    for (Map.Entry<? extends ExecutableElement, ? extends AnnotationValue> valueEntry :
+        valueMap.entrySet()) {
+      TypeMirror expectedType = valueEntry.getKey().getReturnType();
+      if (!validateAnnotationValue(valueEntry.getValue(), expectedType)) {
         return false;
       }
     }
     return true;
   }
 
-  private static final AnnotationValueVisitor<Boolean, Void> ANNOTATION_VALUE_VALIDATING_VISITOR =
-      new SimpleAnnotationValueVisitor6<Boolean, Void>() {
-        @Override
-        protected Boolean defaultAction(Object o, Void p) {
-          return true;
+  private static final AnnotationValueVisitor<Boolean, TypeMirror> VALUE_VALIDATING_VISITOR =
+      new SimpleAnnotationValueVisitor6<Boolean, TypeMirror>() {
+        @Override protected Boolean defaultAction(Object o, TypeMirror expectedType) {
+          return MoreTypes.isTypeOf(o.getClass(), expectedType);
         }
 
-        @Override
-        public Boolean visitUnknown(AnnotationValue av, Void p) {
+        @Override public Boolean visitUnknown(AnnotationValue av, TypeMirror expectedType) {
           // just take the default action for the unknown
-          return defaultAction(av, p);
+          return defaultAction(av, expectedType);
         }
 
-        @Override
-        public Boolean visitAnnotation(AnnotationMirror a, Void p) {
-          return validateAnnotation(a);
+        @Override public Boolean visitAnnotation(AnnotationMirror a, TypeMirror expectedType) {
+          return MoreTypes.equivalence().equivalent(a.getAnnotationType(), expectedType)
+              && validateAnnotation(a);
         }
 
         @Override
-        public Boolean visitArray(List<? extends AnnotationValue> values, Void p) {
+        public Boolean visitArray(List<? extends AnnotationValue> values, TypeMirror expectedType) {
+          if (!expectedType.getKind().equals(TypeKind.ARRAY)) {
+            return false;
+          }
+          try {
+            expectedType = MoreTypes.asArray(expectedType).getComponentType();
+          } catch (IllegalArgumentException e) {
+            return false; // Not an array expected, ergo invalid.
+          }
           for (AnnotationValue value : values) {
-            if (!value.accept(this, null)) {
+            if (!value.accept(this, expectedType)) {
               return false;
             }
           }
@@ -219,17 +228,54 @@ public final class SuperficialValidation {
         }
 
         @Override
-        public Boolean visitEnumConstant(VariableElement c, Void p) {
-          return validateElement(c);
+        public Boolean visitEnumConstant(VariableElement enumConstant, TypeMirror expectedType) {
+          return MoreTypes.equivalence().equivalent(enumConstant.asType(), expectedType)
+              && validateElement(enumConstant);
         }
 
-        @Override
-        public Boolean visitType(TypeMirror t, Void p) {
-          return validateType(t);
+        @Override public Boolean visitType(TypeMirror type, TypeMirror ignored) {
+          // We could check assignability here, but would require a Types instance. Since this
+          // isn't really the sort of thing that shows up in a bad AST from upstream compilation
+          // we ignore the expected type and just validate the type.  It might be wrong, but
+          // it's valid.
+          return validateType(type);
+        }
+
+        @Override public Boolean visitBoolean(boolean b, TypeMirror expectedType) {
+          return MoreTypes.isTypeOf(Boolean.TYPE, expectedType);
+        }
+
+        @Override public Boolean visitByte(byte b, TypeMirror expectedType) {
+          return MoreTypes.isTypeOf(Byte.TYPE, expectedType);
+        }
+
+        @Override public Boolean visitChar(char c, TypeMirror expectedType) {
+          return MoreTypes.isTypeOf(Character.TYPE, expectedType);
+        }
+
+        @Override public Boolean visitDouble(double d, TypeMirror expectedType) {
+          return MoreTypes.isTypeOf(Double.TYPE, expectedType);
+        }
+
+        @Override public Boolean visitFloat(float f, TypeMirror expectedType) {
+          return MoreTypes.isTypeOf(Float.TYPE, expectedType);
+        }
+
+        @Override public Boolean visitInt(int i, TypeMirror expectedType) {
+          return MoreTypes.isTypeOf(Integer.TYPE, expectedType);
+        }
+
+        @Override public Boolean visitLong(long l, TypeMirror expectedType) {
+          return MoreTypes.isTypeOf(Long.TYPE, expectedType);
+        }
+
+        @Override public Boolean visitShort(short s, TypeMirror expectedType) {
+          return MoreTypes.isTypeOf(Short.TYPE, expectedType);
         }
       };
 
-  private static boolean validateAnnotationValue(AnnotationValue annotationValue) {
-    return annotationValue.accept(ANNOTATION_VALUE_VALIDATING_VISITOR, null);
+  private static boolean validateAnnotationValue(
+      AnnotationValue annotationValue, TypeMirror expectedType) {
+    return annotationValue.accept(VALUE_VALIDATING_VISITOR, expectedType);
   }
 }
diff --git a/common/src/test/java/com/google/auto/common/MoreTypesIsTypeOfTest.java b/common/src/test/java/com/google/auto/common/MoreTypesIsTypeOfTest.java
new file mode 100644
index 000000000..b067f1e74
--- /dev/null
+++ b/common/src/test/java/com/google/auto/common/MoreTypesIsTypeOfTest.java
@@ -0,0 +1,182 @@
+/*
+ * Copyright (C) 2014 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.google.auto.common;
+
+import static com.google.common.collect.Iterables.getOnlyElement;
+import static com.google.common.truth.Truth.assertThat;
+import static com.google.common.truth.Truth.assert_;
+
+import com.google.common.collect.Iterables;
+import com.google.testing.compile.CompilationRule;
+
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
+
+import javax.lang.model.element.Element;
+import javax.lang.model.element.TypeElement;
+import javax.lang.model.type.TypeMirror;
+import javax.lang.model.util.Elements;
+
+/**
+ * Tests {@link MoreTypes#isTypeOf}.
+ */
+@RunWith(JUnit4.class)
+public class MoreTypesIsTypeOfTest {
+
+  @Rule public CompilationRule compilationRule = new CompilationRule();
+
+  private Elements elements;
+
+  @Before public void setUp() {
+    this.elements = compilationRule.getElements();
+  }
+
+  private interface TestType {}
+
+  @Test public void isTypeOf_DeclaredType() {
+    assertThat(MoreTypes.isTypeOf(TestType.class, typeElementFor(TestType.class).asType()))
+        .named(""mirror represents the TestType"")
+        .isTrue();
+    assertThat(MoreTypes.isTypeOf(String.class, typeElementFor(TestType.class).asType()))
+        .named(""mirror does not represent a String"")
+        .isFalse();
+  }
+
+  private interface ArrayType {
+    String[] array();
+  }
+
+  @Test public void isTypeOf_ArrayType() {
+    TypeMirror type = extractReturnTypeFromHolder(typeElementFor(ArrayType.class));
+    assertThat(MoreTypes.isTypeOf(new String[] {}.getClass(), type))
+        .named(""array mirror represents an array Class object"")
+        .isTrue();
+  }
+
+  private interface PrimitiveBoolean {
+    boolean method();
+  }
+
+  @Test public void isTypeOf_PrimitiveBoolean() {
+    TypeMirror type = extractReturnTypeFromHolder(typeElementFor(PrimitiveBoolean.class));
+    assertThat(MoreTypes.isTypeOf(Boolean.TYPE, type)).named(""mirror of a boolean"").isTrue();
+  }
+
+  private interface PrimitiveByte {
+    byte method();
+  }
+
+  @Test public void isTypeOf_PrimitiveByte() {
+    TypeMirror type = extractReturnTypeFromHolder(typeElementFor(PrimitiveByte.class));
+    assertThat(MoreTypes.isTypeOf(Byte.TYPE, type)).named(""mirror of a byte"").isTrue();
+  }
+
+  private interface PrimitiveChar {
+    char method();
+  }
+
+  @Test public void isTypeOf_PrimitiveChar() {
+    TypeMirror type = extractReturnTypeFromHolder(typeElementFor(PrimitiveChar.class));
+    assertThat(MoreTypes.isTypeOf(Character.TYPE, type)).named(""mirror of a char"").isTrue();
+  }
+
+  private interface PrimitiveDouble {
+    double method();
+  }
+
+  @Test public void isTypeOf_PrimitiveDouble() {
+    TypeMirror type = extractReturnTypeFromHolder(typeElementFor(PrimitiveDouble.class));
+    assertThat(MoreTypes.isTypeOf(Double.TYPE, type)).named(""mirror of a double"").isTrue();
+  }
+
+  private interface PrimitiveFloat {
+    float method();
+  }
+
+  @Test public void isTypeOf_PrimitiveFloat() {
+    TypeMirror type = extractReturnTypeFromHolder(typeElementFor(PrimitiveFloat.class));
+    assertThat(MoreTypes.isTypeOf(Float.TYPE, type)).named(""mirror of a float"").isTrue();
+  }
+
+  private interface PrimitiveInt {
+    int method();
+  }
+
+  @Test public void isTypeOf_PrimitiveInt() {
+    TypeMirror type = extractReturnTypeFromHolder(typeElementFor(PrimitiveInt.class));
+    assertThat(MoreTypes.isTypeOf(Integer.TYPE, type)).named(""mirror of a int"").isTrue();
+  }
+
+  private interface PrimitiveLong {
+    long method();
+  }
+
+  @Test public void isTypeOf_PrimitiveLong() {
+    TypeMirror type = extractReturnTypeFromHolder(typeElementFor(PrimitiveLong.class));
+    assertThat(MoreTypes.isTypeOf(Long.TYPE, type)).named(""mirror of a long"").isTrue();
+  }
+
+  private interface PrimitiveShort {
+    short method();
+  }
+
+  @Test public void isTypeOf_PrimitiveShort() {
+    TypeMirror type = extractReturnTypeFromHolder(typeElementFor(PrimitiveShort.class));
+    assertThat(MoreTypes.isTypeOf(Short.TYPE, type)).named(""mirror of a short"").isTrue();
+  }
+
+  private interface PrimitiveVoid {
+    void method();
+  }
+
+  @Test public void isTypeOf_void() {
+    TypeMirror primitive = extractReturnTypeFromHolder(typeElementFor(PrimitiveVoid.class));
+    assertThat(MoreTypes.isTypeOf(Void.TYPE, primitive)).named(""mirror of a void"").isTrue();
+  }
+
+  private interface DeclaredVoid {
+    Void method();
+  }
+
+  @Test public void isTypeOf_Void() {
+    TypeMirror declared = extractReturnTypeFromHolder(typeElementFor(DeclaredVoid.class));
+    assertThat(MoreTypes.isTypeOf(Void.class, declared)).named(""mirror of a void"").isTrue();
+  }
+
+  @Test public void isTypeOf_fail() {
+    TypeMirror method =
+        getOnlyElement(typeElementFor(DeclaredVoid.class).getEnclosedElements()).asType();
+    try {
+      MoreTypes.isTypeOf(String.class, method);
+      assert_().fail();
+    } catch (IllegalArgumentException expected) {}
+  }
+
+  // Utility methods for this test.
+
+  private TypeMirror extractReturnTypeFromHolder(TypeElement typeElement) {
+    Element element = Iterables.getOnlyElement(typeElement.getEnclosedElements());
+    TypeMirror arrayType = MoreElements.asExecutable(element).getReturnType();
+    return arrayType;
+  }
+
+  private TypeElement typeElementFor(Class<?> clazz) {
+    return elements.getTypeElement(clazz.getCanonicalName());
+  }
+}
diff --git a/common/src/test/java/com/google/auto/common/SuperficialValidationTest.java b/common/src/test/java/com/google/auto/common/SuperficialValidationTest.java
index dfe32373f..0ddf66467 100644
--- a/common/src/test/java/com/google/auto/common/SuperficialValidationTest.java
+++ b/common/src/test/java/com/google/auto/common/SuperficialValidationTest.java
@@ -203,6 +203,32 @@ public class SuperficialValidationTest {
         .failsToCompile();
   }
 
+  @Test
+  public void invalidAnnotationValue() {
+    JavaFileObject javaFileObject = JavaFileObjects.forSourceLines(""test.Outer"",
+        ""package test;"",
+        """",
+        ""final class Outer {"",
+        ""  @interface TestAnnotation {"",
+        ""    Class[] classes();"",
+        ""  }"",
+        """",
+        ""  @TestAnnotation(classes = Foo)"",
+        ""  static class TestClass {}"",
+        ""}"");
+    assert_().about(javaSource())
+        .that(javaFileObject)
+        .processedWith(new AssertingProcessor() {
+          @Override void runAssertions() {
+            TypeElement testClassElement =
+                processingEnv.getElementUtils().getTypeElement(""test.Outer.TestClass"");
+            assert_().that(SuperficialValidation.validateElement(testClassElement))
+                .named(""testClassElement is valid"").isFalse();
+          }
+        }).failsToCompile();
+  }
+
+
   private static abstract class AssertingProcessor extends AbstractProcessor {
     @Override
     public Set<String> getSupportedAnnotationTypes() {",Add ciphers and sslEnabledProtocols to the test,1
"diff --git a/core/src/main/java/org/bitcoinj/wallet/Wallet.java b/core/src/main/java/org/bitcoinj/wallet/Wallet.java
index f5c64aa4a..74b84e16e 100644
--- a/core/src/main/java/org/bitcoinj/wallet/Wallet.java
+++ b/core/src/main/java/org/bitcoinj/wallet/Wallet.java
@@ -4829,8 +4829,7 @@ public class Wallet extends BaseTaggableObject
         TransactionOutput selection2Change = null;
         CoinSelection selection1 = null;
         TransactionOutput selection1Change = null;
-        // We keep track of the last size of the transaction we calculated but only if the act of adding inputs and
-        // change resulted in the size crossing a 1000 byte boundary. Otherwise it stays at zero.
+        // We keep track of the last size of the transaction we calculated.
         int lastCalculatedSize = 0;
         Coin valueNeeded, valueMissing =",Fixing some remaining Cypherland stuff around temporal values .,0
"diff --git a/src/main/java/org/junit/internal/MethodSorter.java b/src/main/java/org/junit/internal/MethodSorter.java
index e469c05b74ba..83706f966833 100644
--- a/src/main/java/org/junit/internal/MethodSorter.java
+++ b/src/main/java/org/junit/internal/MethodSorter.java
@@ -22,11 +22,11 @@ public int compare(Method m1, Method m2) {
     };
     
     /**
-     * Method name ascending lexicographic sort order
+     * Method name ascending lexicographic sort order, with toString as a tiebreaker
      */
     public static Comparator<Method> NAME_ASCENDING= new Comparator<Method>() {
         public int compare(Method m1, Method m2) {
-            return MethodSorter.compare(m1.getName(), m2.getName());
+            return MethodSorter.compare(m1.getName() + m1.toString(), m2.getName() + m2.toString());
         }
     };
 
diff --git a/src/main/java/org/junit/runners/MethodSorters.java b/src/main/java/org/junit/runners/MethodSorters.java
index 7b0667c9f748..7f18e7acaba8 100644
--- a/src/main/java/org/junit/runners/MethodSorters.java
+++ b/src/main/java/org/junit/runners/MethodSorters.java
@@ -10,7 +10,7 @@
  * Defines common {@link MethodSorter} implementations.
  */
 public enum MethodSorters {
-    /** Sorts the test methods by the method name, in lexicographic order */
+    /** Sorts the test methods by the method name, in lexicographic order, with Method.toString used as a tiebreaker */
     NAME_ASCENDING(MethodSorter.NAME_ASCENDING),
     /** Leaves the test methods in the order returned by the JVM.
      * Note that the order from the JVM my vary from run to run */
diff --git a/src/test/java/org/junit/internal/MethodSorterTest.java b/src/test/java/org/junit/internal/MethodSorterTest.java
index 48e799f7620b..61ac1035902b 100644
--- a/src/test/java/org/junit/internal/MethodSorterTest.java
+++ b/src/test/java/org/junit/internal/MethodSorterTest.java
@@ -92,10 +92,7 @@ void epsilon() {}
     }
 
     @Test public void testNameAsc() {
-        // see http://bugs.sun.com/view_bug.do?bug_id=7023180 for why two alternatives are possible
-        final String expectedAlternative1 = Arrays.asList(ALPHA, BETA, DELTA, EPSILON, GAMMA_VOID, GAMMA_BOOLEAN).toString();
-        final String expectedAlternative2 = Arrays.asList(ALPHA, BETA, DELTA, EPSILON, GAMMA_BOOLEAN, GAMMA_VOID).toString();
-
-        assertThat(declaredMethods(DummySortWithNameAsc.class), anyOf(equalTo(expectedAlternative1), equalTo(expectedAlternative2)));
+        String[] expected= new String[] { ALPHA, BETA, DELTA, EPSILON, GAMMA_VOID, GAMMA_BOOLEAN };
+        assertEquals(Arrays.asList(expected).toString(), declaredMethods(DummySortWithNameAsc.class));
     }
 }","make MethodSorter.NAME_ASCENDING a deterministic comparator, with Method.toString used as a tiebreaker",1
"diff --git a/android/build.gradle b/android/build.gradle
index 333d69c..28e43a9 100755
--- a/android/build.gradle
+++ b/android/build.gradle
@@ -1,24 +1,27 @@
 buildscript {
   repositories {
     jcenter()
+    maven {
+      url 'https://maven.google.com'
+    }
   }
 
   dependencies {
-    classpath 'com.android.tools.build:gradle:1.2.3'
+    classpath 'com.android.tools.build:gradle:3.0.0'
   }
 }
 
 apply plugin: 'com.android.library'
 
 android {
-  compileSdkVersion 25
-  buildToolsVersion ""25.0.2""
+  compileSdkVersion 26
+    buildToolsVersion ""26.0.2""
 
   defaultConfig {
     minSdkVersion 16
-    targetSdkVersion 22
+    targetSdkVersion 26
     versionCode 1
-    versionName ""1.0""
+    versionName ""1.0.0""
   }
   lintOptions {
     abortOnError false
@@ -28,10 +31,18 @@ android {
 
 repositories {
   mavenCentral()
+  maven {
+   url 'https://maven.google.com'
+  }
+  maven { url ""https://jitpack.io"" }
 }
 
 dependencies {
-  compile ""com.facebook.react:react-native:0.19.+""
+  compile 'com.facebook.react:react-native:+'
   compile ""com.google.zxing:core:3.2.1""
   compile ""com.drewnoakes:metadata-extractor:2.9.1""
+  compile 'com.google.android.gms:play-services-vision:+'
+  compile ""com.android.support:exifinterface:26.0.2""
+
+  compile 'com.github.react-native-community:cameraview:df60b07573'
 }
diff --git a/android/gradle/wrapper/gradle-wrapper.jar b/android/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 0000000..13372ae
Binary files /dev/null and b/android/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/android/gradle/wrapper/gradle-wrapper.properties b/android/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 0000000..bdaabfa
--- /dev/null
+++ b/android/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,6 @@
+#Sun Dec 31 13:43:56 BRST 2017
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip
diff --git a/android/gradlew b/android/gradlew
new file mode 100755
index 0000000..9d82f78
--- /dev/null
+++ b/android/gradlew
@@ -0,0 +1,160 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""""
+
+APP_NAME=""Gradle""
+APP_BASE_NAME=`basename ""$0""`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD=""maximum""
+
+warn ( ) {
+    echo ""$*""
+}
+
+die ( ) {
+    echo
+    echo ""$*""
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case ""`uname`"" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG=""$0""
+# Need this for relative symlinks.
+while [ -h ""$PRG"" ] ; do
+    ls=`ls -ld ""$PRG""`
+    link=`expr ""$ls"" : '.*-> \(.*\)$'`
+    if expr ""$link"" : '/.*' > /dev/null; then
+        PRG=""$link""
+    else
+        PRG=`dirname ""$PRG""`""/$link""
+    fi
+done
+SAVED=""`pwd`""
+cd ""`dirname \""$PRG\""`/"" >/dev/null
+APP_HOME=""`pwd -P`""
+cd ""$SAVED"" >/dev/null
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n ""$JAVA_HOME"" ] ; then
+    if [ -x ""$JAVA_HOME/jre/sh/java"" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD=""$JAVA_HOME/jre/sh/java""
+    else
+        JAVACMD=""$JAVA_HOME/bin/java""
+    fi
+    if [ ! -x ""$JAVACMD"" ] ; then
+        die ""ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation.""
+    fi
+else
+    JAVACMD=""java""
+    which java >/dev/null 2>&1 || die ""ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation.""
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ ""$cygwin"" = ""false"" -a ""$darwin"" = ""false"" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ ""$MAX_FD"" = ""maximum"" -o ""$MAX_FD"" = ""max"" ] ; then
+            MAX_FD=""$MAX_FD_LIMIT""
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn ""Could not set maximum file descriptor limit: $MAX_FD""
+        fi
+    else
+        warn ""Could not query maximum file descriptor limit: $MAX_FD_LIMIT""
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS=""$GRADLE_OPTS \""-Xdock:name=$APP_NAME\"" \""-Xdock:icon=$APP_HOME/media/gradle.icns\""""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed ""$APP_HOME""`
+    CLASSPATH=`cygpath --path --mixed ""$CLASSPATH""`
+    JAVACMD=`cygpath --unix ""$JAVACMD""`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS=""$ROOTDIRS$SEP$dir""
+        SEP=""|""
+    done
+    OURCYGPATTERN=""(^($ROOTDIRS))""
+    # Add a user-defined pattern to the cygpath arguments
+    if [ ""$GRADLE_CYGPATTERN"" != """" ] ; then
+        OURCYGPATTERN=""$OURCYGPATTERN|($GRADLE_CYGPATTERN)""
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in ""$@"" ; do
+        CHECK=`echo ""$arg""|egrep -c ""$OURCYGPATTERN"" -`
+        CHECK2=`echo ""$arg""|egrep -c ""^-""`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed ""$arg""`
+        else
+            eval `echo args$i`=""\""$arg\""""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- ""$args0"" ;;
+        (2) set -- ""$args0"" ""$args1"" ;;
+        (3) set -- ""$args0"" ""$args1"" ""$args2"" ;;
+        (4) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ;;
+        (5) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ;;
+        (6) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ;;
+        (7) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ""$args6"" ;;
+        (8) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ""$args6"" ""$args7"" ;;
+        (9) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ""$args6"" ""$args7"" ""$args8"" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=(""$@"")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]=""-Dorg.gradle.appname=$APP_BASE_NAME""
+
+exec ""$JAVACMD"" ""${JVM_OPTS[@]}"" -classpath ""$CLASSPATH"" org.gradle.wrapper.GradleWrapperMain ""$@""
diff --git a/android/gradlew.bat b/android/gradlew.bat
new file mode 100644
index 0000000..aec9973
--- /dev/null
+++ b/android/gradlew.bat
@@ -0,0 +1,90 @@
+@if ""%DEBUG%"" == """" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if ""%OS%""==""Windows_NT"" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if ""%DIRNAME%"" == """" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if ""%ERRORLEVEL%"" == ""0"" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:""=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist ""%JAVA_EXE%"" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not ""%OS%"" == ""Windows_NT"" goto win9xME_args
+if ""%@eval[2+2]"" == ""4"" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if ""x%~1"" == ""x"" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+""%JAVA_EXE%"" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% ""-Dorg.gradle.appname=%APP_BASE_NAME%"" -classpath ""%CLASSPATH%"" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if ""%ERRORLEVEL%""==""0"" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not """" == ""%GRADLE_EXIT_CONSOLE%"" exit 1
+exit /b 1
+
+:mainEnd
+if ""%OS%""==""Windows_NT"" endlocal
+
+:omega
diff --git a/android/src/main/java/org/reactnative/MutableImage.java b/android/src/main/java/org/reactnative/MutableImage.java
new file mode 100644
index 0000000..8d5fcc3
--- /dev/null
+++ b/android/src/main/java/org/reactnative/MutableImage.java
@@ -0,0 +1,272 @@
+package org.reactnative;
+
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.Matrix;
+import android.media.ExifInterface;
+import android.util.Base64;
+import android.util.Log;
+
+import com.drew.imaging.ImageMetadataReader;
+import com.drew.imaging.ImageProcessingException;
+import com.drew.metadata.Directory;
+import com.drew.metadata.Metadata;
+import com.drew.metadata.MetadataException;
+import com.drew.metadata.Tag;
+import com.drew.metadata.exif.ExifIFD0Directory;
+import com.facebook.react.bridge.ReadableMap;
+
+import java.io.BufferedInputStream;
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+
+public class MutableImage {
+    private static final String TAG = ""RNCamera"";
+
+    private final byte[] originalImageData;
+    private Bitmap currentRepresentation;
+    private Metadata originalImageMetaData;
+    private boolean hasBeenReoriented = false;
+
+    public MutableImage(byte[] originalImageData) {
+        this.originalImageData = originalImageData;
+        this.currentRepresentation = toBitmap(originalImageData);
+    }
+
+    public void mirrorImage() throws ImageMutationFailedException {
+        Matrix m = new Matrix();
+
+        m.preScale(-1, 1);
+
+        Bitmap bitmap = Bitmap.createBitmap(
+                currentRepresentation,
+                0,
+                0,
+                currentRepresentation.getWidth(),
+                currentRepresentation.getHeight(),
+                m,
+                false
+        );
+
+        if (bitmap == null)
+            throw new ImageMutationFailedException(""failed to mirror"");
+
+        this.currentRepresentation = bitmap;
+    }
+
+    public void fixOrientation() throws ImageMutationFailedException {
+        try {
+            Metadata metadata = originalImageMetaData();
+
+            ExifIFD0Directory exifIFD0Directory = metadata.getFirstDirectoryOfType(ExifIFD0Directory.class);
+            if (exifIFD0Directory == null) {
+                return;
+            } else if (exifIFD0Directory.containsTag(ExifIFD0Directory.TAG_ORIENTATION)) {
+                int exifOrientation = exifIFD0Directory.getInt(ExifIFD0Directory.TAG_ORIENTATION);
+                if(exifOrientation != 1) {
+                    rotate(exifOrientation);
+                    exifIFD0Directory.setInt(ExifIFD0Directory.TAG_ORIENTATION, 1);
+                }
+            }
+        } catch (ImageProcessingException | IOException | MetadataException e) {
+            throw new ImageMutationFailedException(""failed to fix orientation"", e);
+        }
+    }
+
+    //see http://www.impulseadventure.com/photo/exif-orientation.html
+    private void rotate(int exifOrientation) throws ImageMutationFailedException {
+        final Matrix bitmapMatrix = new Matrix();
+        switch (exifOrientation) {
+            case 1:
+                return;//no rotation required
+            case 2:
+                bitmapMatrix.postScale(-1, 1);
+                break;
+            case 3:
+                bitmapMatrix.postRotate(180);
+                break;
+            case 4:
+                bitmapMatrix.postRotate(180);
+                bitmapMatrix.postScale(-1, 1);
+                break;
+            case 5:
+                bitmapMatrix.postRotate(90);
+                bitmapMatrix.postScale(-1, 1);
+                break;
+            case 6:
+                bitmapMatrix.postRotate(90);
+                break;
+            case 7:
+                bitmapMatrix.postRotate(270);
+                bitmapMatrix.postScale(-1, 1);
+                break;
+            case 8:
+                bitmapMatrix.postRotate(270);
+                break;
+            default:
+                break;
+        }
+
+        Bitmap transformedBitmap = Bitmap.createBitmap(
+                currentRepresentation,
+                0,
+                0,
+                currentRepresentation.getWidth(),
+                currentRepresentation.getHeight(),
+                bitmapMatrix,
+                false
+        );
+
+        if (transformedBitmap == null)
+            throw new ImageMutationFailedException(""failed to rotate"");
+
+        this.currentRepresentation = transformedBitmap;
+        this.hasBeenReoriented = true;
+    }
+
+    private static Bitmap toBitmap(byte[] data) {
+        try {
+            ByteArrayInputStream inputStream = new ByteArrayInputStream(data);
+            Bitmap photo = BitmapFactory.decodeStream(inputStream);
+            inputStream.close();
+            return photo;
+        } catch (IOException e) {
+            throw new IllegalStateException(""Will not happen"", e);
+        }
+    }
+
+    public String toBase64(int jpegQualityPercent) {
+        return Base64.encodeToString(toJpeg(currentRepresentation, jpegQualityPercent), Base64.DEFAULT);
+    }
+
+    public void writeDataToFile(File file, ReadableMap options, int jpegQualityPercent) throws IOException {
+        FileOutputStream fos = new FileOutputStream(file);
+        fos.write(toJpeg(currentRepresentation, jpegQualityPercent));
+        fos.close();
+
+        try {
+            ExifInterface exif = new ExifInterface(file.getAbsolutePath());
+
+            // copy original exif data to the output exif...
+            // unfortunately, this Android ExifInterface class doesn't understand all the tags so we lose some
+            for (Directory directory : originalImageMetaData().getDirectories()) {
+                for (Tag tag : directory.getTags()) {
+                    int tagType = tag.getTagType();
+                    Object object = directory.getObject(tagType);
+                    exif.setAttribute(tag.getTagName(), object.toString());
+                }
+            }
+
+            writeLocationExifData(options, exif);
+
+            if(hasBeenReoriented)
+                rewriteOrientation(exif);
+
+            exif.saveAttributes();
+        } catch (ImageProcessingException  | IOException e) {
+            Log.e(TAG, ""failed to save exif data"", e);
+        }
+    }
+
+    private void rewriteOrientation(ExifInterface exif) {
+        exif.setAttribute(ExifInterface.TAG_ORIENTATION, String.valueOf(ExifInterface.ORIENTATION_NORMAL));
+    }
+
+    private void writeLocationExifData(ReadableMap options, ExifInterface exif) {
+        if(!options.hasKey(""metadata""))
+            return;
+
+        ReadableMap metadata = options.getMap(""metadata"");
+        if (!metadata.hasKey(""location""))
+            return;
+
+        ReadableMap location = metadata.getMap(""location"");
+        if(!location.hasKey(""coords""))
+            return;
+
+        try {
+            ReadableMap coords = location.getMap(""coords"");
+            double latitude = coords.getDouble(""latitude"");
+            double longitude = coords.getDouble(""longitude"");
+
+            GPS.writeExifData(latitude, longitude, exif);
+        } catch (IOException e) {
+            Log.e(TAG, ""Couldn't write location data"", e);
+        }
+    }
+
+    private Metadata originalImageMetaData() throws ImageProcessingException, IOException {
+        if(this.originalImageMetaData == null) {//this is expensive, don't do it more than once
+            originalImageMetaData = ImageMetadataReader.readMetadata(
+                    new BufferedInputStream(new ByteArrayInputStream(originalImageData)),
+                    originalImageData.length
+            );
+        }
+        return originalImageMetaData;
+    }
+
+    private static byte[] toJpeg(Bitmap bitmap, int quality) throws OutOfMemoryError {
+        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
+        bitmap.compress(Bitmap.CompressFormat.JPEG, quality, outputStream);
+
+        try {
+            return outputStream.toByteArray();
+        } finally {
+            try {
+                outputStream.close();
+            } catch (IOException e) {
+                Log.e(TAG, ""problem compressing jpeg"", e);
+            }
+        }
+    }
+
+    public static class ImageMutationFailedException extends Exception {
+        public ImageMutationFailedException(String detailMessage, Throwable throwable) {
+            super(detailMessage, throwable);
+        }
+
+        public ImageMutationFailedException(String detailMessage) {
+            super(detailMessage);
+        }
+    }
+
+    private static class GPS {
+        public static void writeExifData(double latitude, double longitude, ExifInterface exif) throws IOException {
+            exif.setAttribute(ExifInterface.TAG_GPS_LATITUDE, toDegreeMinuteSecods(latitude));
+            exif.setAttribute(ExifInterface.TAG_GPS_LATITUDE_REF, latitudeRef(latitude));
+            exif.setAttribute(ExifInterface.TAG_GPS_LONGITUDE, toDegreeMinuteSecods(longitude));
+            exif.setAttribute(ExifInterface.TAG_GPS_LONGITUDE_REF, longitudeRef(longitude));
+        }
+
+        private static String latitudeRef(double latitude) {
+            return latitude < 0.0d ? ""S"" : ""N"";
+        }
+
+        private static String longitudeRef(double longitude) {
+            return longitude < 0.0d ? ""W"" : ""E"";
+        }
+
+        private static String toDegreeMinuteSecods(double latitude) {
+            latitude = Math.abs(latitude);
+            int degree = (int) latitude;
+            latitude *= 60;
+            latitude -= (degree * 60.0d);
+            int minute = (int) latitude;
+            latitude *= 60;
+            latitude -= (minute * 60.0d);
+            int second = (int) (latitude * 1000.0d);
+
+            StringBuffer sb = new StringBuffer();
+            sb.append(degree);
+            sb.append(""/1,"");
+            sb.append(minute);
+            sb.append(""/1,"");
+            sb.append(second);
+            sb.append(""/1000,"");
+            return sb.toString();
+        }
+    }
+}
diff --git a/android/src/main/java/org/reactnative/camera/CameraModule.java b/android/src/main/java/org/reactnative/camera/CameraModule.java
new file mode 100644
index 0000000..90e0c1e
--- /dev/null
+++ b/android/src/main/java/org/reactnative/camera/CameraModule.java
@@ -0,0 +1,211 @@
+package org.reactnative.camera;
+
+import android.content.Context;
+
+import org.reactnative.facedetector.ExpoFaceDetector;
+import com.facebook.react.bridge.Arguments;
+import com.facebook.react.bridge.Promise;
+import com.facebook.react.bridge.ReactApplicationContext;
+import com.facebook.react.bridge.ReactContextBaseJavaModule;
+import com.facebook.react.bridge.ReactMethod;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.bridge.WritableArray;
+import com.google.android.cameraview.AspectRatio;
+import com.google.zxing.BarcodeFormat;
+
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+
+import javax.annotation.Nullable;
+
+public class CameraModule extends ReactContextBaseJavaModule {
+  private static final String TAG = ""CameraModule"";
+
+  private static ReactApplicationContext mReactContext;
+
+//  private static ScopedContext mScopedContext;
+  static final int VIDEO_2160P = 0;
+  static final int VIDEO_1080P = 1;
+  static final int VIDEO_720P = 2;
+  static final int VIDEO_480P = 3;
+  static final int VIDEO_4x3 = 4;
+
+  public static final Map<String, Object> VALID_BARCODE_TYPES =
+      Collections.unmodifiableMap(new HashMap<String, Object>() {
+        {
+          put(""aztec"", BarcodeFormat.AZTEC.toString());
+          put(""ean13"", BarcodeFormat.EAN_13.toString());
+          put(""ean8"", BarcodeFormat.EAN_8.toString());
+          put(""qr"", BarcodeFormat.QR_CODE.toString());
+          put(""pdf417"", BarcodeFormat.PDF_417.toString());
+          put(""upc_e"", BarcodeFormat.UPC_E.toString());
+          put(""datamatrix"", BarcodeFormat.DATA_MATRIX.toString());
+          put(""code39"", BarcodeFormat.CODE_39.toString());
+          put(""code93"", BarcodeFormat.CODE_93.toString());
+          put(""interleaved2of5"", BarcodeFormat.ITF.toString());
+          put(""codabar"", BarcodeFormat.CODABAR.toString());
+          put(""code128"", BarcodeFormat.CODE_128.toString());
+          put(""maxicode"", BarcodeFormat.MAXICODE.toString());
+          put(""rss14"", BarcodeFormat.RSS_14.toString());
+          put(""rssexpanded"", BarcodeFormat.RSS_EXPANDED.toString());
+          put(""upc_a"", BarcodeFormat.UPC_A.toString());
+          put(""upc_ean"", BarcodeFormat.UPC_EAN_EXTENSION.toString());
+",Added svm - js - tck into gates . . PullRequest : graal / 5781,0
"diff --git a/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/buffer/MappedRawLog.java b/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/buffer/MappedRawLog.java
index 200cd609b..0354df315 100644
--- a/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/buffer/MappedRawLog.java
+++ b/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/buffer/MappedRawLog.java
@@ -50,9 +50,12 @@ class MappedRawLog implements RawLog
         this.logFile = location;
         partitions = new RawLogPartition[PARTITION_COUNT];
 
-        try (final FileChannel logChannel = new RandomAccessFile(logFile, ""rw"").getChannel())
+
+        try (final RandomAccessFile raf = new RandomAccessFile(logFile, ""rw"");
+             final FileChannel logChannel = raf.getChannel())
         {
             final long logLength = computeLogLength(termLength);
+            raf.setLength(logLength);
             blankTemplate.transferTo(0, logLength, logChannel);
 
             if (logLength <= Integer.MAX_VALUE)",Fixed some warnings .,0
"diff --git a/dubbo-common/src/main/java/com/alibaba/dubbo/common/compiler/support/JavassistCompiler.java b/dubbo-common/src/main/java/com/alibaba/dubbo/common/compiler/support/JavassistCompiler.java
index ff666e26266..cc8f59a656f 100644
--- a/dubbo-common/src/main/java/com/alibaba/dubbo/common/compiler/support/JavassistCompiler.java
+++ b/dubbo-common/src/main/java/com/alibaba/dubbo/common/compiler/support/JavassistCompiler.java
@@ -120,7 +120,7 @@ public Class<?> doCompile(String name, String source) throws Throwable {
                 }
             }
         }
-        return cls.toClass(ClassHelper.getCallerClassLoader(getClass()), null);
+        return cls.toClass(ClassHelper.getCallerClassLoader(getClass()), JavassistCompiler.class.getProtectionDomain());
     }
 
 }",add ProtectionDomain for dynamicly created class,1
"diff --git a/org/junit/internal/runners/MethodValidator.java b/org/junit/internal/runners/MethodValidator.java
index f3db24da2117..482d65f12c50 100644
--- a/org/junit/internal/runners/MethodValidator.java
+++ b/org/junit/internal/runners/MethodValidator.java
@@ -35,6 +35,7 @@ public void validateStaticMethods() {
 		validateTestMethods(AfterClass.class, true);
 	}
 	
+	// TODO Ugly API--one method should do both
 	public List<Throwable> validateAllMethods() {
 		validateNoArgConstructor();
 		validateStaticMethods();
@@ -64,6 +65,9 @@ private void validateTestMethods(Class<? extends Annotation> annotation,
 				fErrors.add(new Exception(""Method "" + each.getName() + ""() ""
 						+ state + "" be static""));
 			}
+			if (!Modifier.isPublic(each.getDeclaringClass().getModifiers()))
+				fErrors.add(new Exception(""Class "" + each.getDeclaringClass().getName()
+						+ "" should be public""));
 			if (!Modifier.isPublic(each.getModifiers()))
 				fErrors.add(new Exception(""Method "" + each.getName()
 						+ "" should be public""));
diff --git a/org/junit/tests/AllTests.java b/org/junit/tests/AllTests.java
index 22b959fac392..86ff4e5b9455 100644
--- a/org/junit/tests/AllTests.java
+++ b/org/junit/tests/AllTests.java
@@ -37,7 +37,8 @@
 	UserStopTest.class,
 	SortableTest.class,
 	OldTestClassRunnerTest.class,
-	JUnitCoreTest.class
+	JUnitCoreTest.class,
+	InaccessibleBaseClassTest.class,
 })
 public class AllTests {	
 //	public static class Compatibility {
diff --git a/org/junit/tests/InaccessibleBaseClassTest.java b/org/junit/tests/InaccessibleBaseClassTest.java
new file mode 100644
index 000000000000..67c0b0afc4f6
--- /dev/null
+++ b/org/junit/tests/InaccessibleBaseClassTest.java
@@ -0,0 +1,15 @@
+package org.junit.tests;
+
+import org.junit.Test;
+import org.junit.internal.runners.InitializationError;
+import org.junit.internal.runners.MethodValidator;
+import org.junit.tests.anotherpackage.Sub;
+
+public class InaccessibleBaseClassTest {	
+	@Test(expected=InitializationError.class)
+	public void inaccessibleBaseClassIsCaughtAtValidation() throws InitializationError {
+		MethodValidator methodValidator= new MethodValidator(Sub.class);
+		methodValidator.validateAllMethods();
+		methodValidator.assertValid();
+	}
+}
diff --git a/org/junit/tests/anotherpackage/Sub.java b/org/junit/tests/anotherpackage/Sub.java
new file mode 100644
index 000000000000..4712fe91551a
--- /dev/null
+++ b/org/junit/tests/anotherpackage/Sub.java
@@ -0,0 +1,5 @@
+package org.junit.tests.anotherpackage;
+
+public class Sub extends Super {
+	
+}
diff --git a/org/junit/tests/anotherpackage/Super.java b/org/junit/tests/anotherpackage/Super.java
new file mode 100644
index 000000000000..ff9c454f1eb9
--- /dev/null
+++ b/org/junit/tests/anotherpackage/Super.java
@@ -0,0 +1,7 @@
+package org.junit.tests.anotherpackage;
+
+import org.junit.Test;
+
+class Super {
+	@Test public void a() {}
+}",Methods on inaccessible superclasses of test classes are caught during validation,1
"diff --git a/.github/workflows/build.yml b/.github/workflows/build.yml
index e4ff0fc4b2..298edc1d7c 100644
--- a/.github/workflows/build.yml
+++ b/.github/workflows/build.yml
@@ -23,9 +23,12 @@ jobs:
           - 15-ea
 
     steps:
-      - name: checkout
+      - name: Checkout
         uses: actions/checkout@v2
 
+      - name: Validate Gradle Wrapper
+        uses: gradle/wrapper-validation-action@v1
+
       - name: Configure JDK
         uses: actions/setup-java@v1
         with:
@@ -47,10 +50,13 @@ jobs:
           - 29
 
     steps:
-      - name: checkout
+      - name: Checkout
         uses: actions/checkout@v2
 
-      - name: run tests
+      - name: Validate Gradle Wrapper
+        uses: gradle/wrapper-validation-action@v1
+
+      - name: Run Tests
         uses: reactivecircus/android-emulator-runner@v2
         with:
           api-level: ${{ matrix.api-level }}
@@ -66,7 +72,7 @@ jobs:
       - android
 
     steps:
-      - name: checkout
+      - name: Checkout
         uses: actions/checkout@v2
 
       - name: Configure JDK",Add Gradle wrapper validation,1
"diff --git a/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java
index bd9eb0f3674..8cdf2bd3f52 100644
--- a/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java
+++ b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java
@@ -86,7 +86,6 @@ public class ZenDiscovery extends AbstractLifecycleComponent<Discovery> implemen
     private final ClusterService clusterService;
     private AllocationService allocationService;
     private final ClusterName clusterName;
-    private final DiscoveryService discoveryService;
     private final DiscoveryNodeService discoveryNodeService;
     private final DiscoverySettings discoverySettings;
     private final ZenPingService pingService;
@@ -130,14 +129,13 @@ public class ZenDiscovery extends AbstractLifecycleComponent<Discovery> implemen
     @Inject
     public ZenDiscovery(Settings settings, ClusterName clusterName, ThreadPool threadPool,
                         TransportService transportService, ClusterService clusterService, NodeSettingsService nodeSettingsService,
-                        DiscoveryNodeService discoveryNodeService, ZenPingService pingService, Version version, DiscoverySettings discoverySettings,
-                        DiscoveryService discoveryService) {
+                        DiscoveryNodeService discoveryNodeService, ZenPingService pingService, Version version,
+                        DiscoverySettings discoverySettings) {
         super(settings);
         this.clusterName = clusterName;
         this.threadPool = threadPool;
         this.clusterService = clusterService;
         this.transportService = transportService;
-        this.discoveryService = discoveryService;
         this.discoveryNodeService = discoveryNodeService;
         this.discoverySettings = discoverySettings;
         this.pingService = pingService;
@@ -649,7 +647,7 @@ public class ZenDiscovery extends AbstractLifecycleComponent<Discovery> implemen
 
 
                 assert newClusterState.nodes().masterNode() != null : ""received a cluster state without a master"";
-                assert !newClusterState.blocks().hasGlobalBlock(discoveryService.getNoMasterBlock()) : ""received a cluster state with a master block"";
+                assert !newClusterState.blocks().hasGlobalBlock(discoverySettings.getNoMasterBlock()) : ""received a cluster state with a master block"";
 
                 clusterService.submitStateUpdateTask(""zen-disco-receive(from master ["" + newClusterState.nodes().masterNode() + ""])"", Priority.URGENT, new ProcessedClusterStateNonMasterUpdateTask() {
                     @Override
@@ -716,7 +714,7 @@ public class ZenDiscovery extends AbstractLifecycleComponent<Discovery> implemen
                             masterFD.restart(latestDiscoNodes.masterNode(), ""new cluster state received and we",Added tag jdk8u101 - b12 for changeset 43db847133ec,0
"diff --git a/src/core/lombok/Builder.java b/src/core/lombok/Builder.java
index dfa5ecb5..d7fe42a1 100644
--- a/src/core/lombok/Builder.java
+++ b/src/core/lombok/Builder.java
@@ -153,6 +153,16 @@ public @interface Builder {
 	 * @return The builder class will be generated with this access modifier.
 	 */
 	AccessLevel access() default lombok.AccessLevel.PUBLIC;
+
+	/**
+	 * Prefix to prepend to set methods in the generated builder class.  By default, generated methods to not include a
+	 * prefix.  If this value populated, the first letter of the generated method name will be capitalized.
+	 *
+	 * For example, a method normally generated as {@code someField(String someField)} would instead be generated as {@code withSomeField(String someField)}
+	 *
+	 * @return The prefix to prepend to generated method names.
+	 */
+	String setterPrefix() default """";
 	
 	/**
 	 * Put on a field (in case of {@code @Builder} on a type) or a parameter (for {@code @Builder} on a constructor or static method) to",Set jdiff version .,0
"diff --git a/src/org/junit/experimental/test/ExperimentalTests.java b/src/org/junit/experimental/test/ExperimentalTests.java
deleted file mode 100644
index 13087aa78dba..000000000000
--- a/src/org/junit/experimental/test/ExperimentalTests.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package org.junit.experimental.test;
-
-import org.junit.experimental.test.results.PrintableResultTest;
-import org.junit.experimental.test.results.ResultMatchersTest;
-import org.junit.experimental.test.theories.DataPointMethodTest;
-import org.junit.experimental.test.theories.ParameterSignatureTest;
-import org.junit.experimental.test.theories.ParameterizedAssertionErrorTest;
-import org.junit.experimental.test.theories.TheoriesTest;
-import org.junit.runner.RunWith;
-import org.junit.runners.Suite;
-import org.junit.runners.Suite.SuiteClasses;
-
-@RunWith(Suite.class)
-@SuiteClasses( { ParameterizedAssertionErrorTest.class,
-		TheoriesTest.class, PrintableResultTest.class,
-		ResultMatchersTest.class, DataPointMethodTest.class, ParameterSignatureTest.class })
-public class ExperimentalTests {
-
-}
diff --git a/src/org/junit/tests/AllTests.java b/src/org/junit/tests/AllTests.java
index 5da64c0e506b..25c2168efb75 100644
--- a/src/org/junit/tests/AllTests.java
+++ b/src/org/junit/tests/AllTests.java
@@ -2,10 +2,50 @@
 
 import junit.framework.JUnit4TestAdapter;
 import junit.framework.Test;
-import org.junit.experimental.test.ExperimentalTests;
 import org.junit.runner.RunWith;
 import org.junit.runners.Suite;
 import org.junit.runners.Suite.SuiteClasses;
+import org.junit.tests.assertion.AssertionTest;
+import org.junit.tests.assertion.BothTest;
+import org.junit.tests.assertion.EachTest;
+import org.junit.tests.description.AnnotatedDescriptionTest;
+import org.junit.tests.description.SuiteDescriptionTest;
+import org.junit.tests.description.TestDescriptionTest;
+import org.junit.tests.experimental.AssumptionTest;
+import org.junit.tests.experimental.AssumptionViolatedExceptionTest;
+import org.junit.tests.experimental.ExperimentalTests;
+import org.junit.tests.junit3compatibility.AllTestsTest;
+import org.junit.tests.junit3compatibility.ClassRequestTest;
+import org.junit.tests.junit3compatibility.ForwardCompatibilityTest;
+import org.junit.tests.junit3compatibility.InitializationErrorForwardCompatibilityTest;
+import org.junit.tests.junit3compatibility.JUnit38ClassRunnerTest;
+import org.junit.tests.junit3compatibility.OldTestClassAdaptingListenerTest;
+import org.junit.tests.junit3compatibility.OldTests;
+import org.junit.tests.junit3compatibility.SuiteMethodTest;
+import org.junit.tests.listening.ListenerTest;
+import org.junit.tests.listening.RunnerTest;
+import org.junit.tests.listening.TestListenerTest;
+import org.junit.tests.listening.TextListenerTest;
+import org.junit.tests.listening.UserStopTest;
+import org.junit.tests.manipulation.CategoryTest;
+import org.junit.tests.manipulation.SingleMethodTest;
+import org.junit.tests.manipulation.SortableTest;
+import org.junit.tests.running.classes.EnclosedTest;
+import org.junit.tests.running.classes.IgnoreClassTest;
+import org.junit.tests.running.classes.ParameterizedTestTest;
+import org.junit.tests.running.classes.RunWithTest;
+import org.junit.tests.running.classes.SuiteTest;
+import org.junit.tests.running.core.CommandLineTest;
+import org.junit.tests.running.core.JUnitCoreTest;
+import org.junit.tests.running.methods.AnnotationTest;
+import org.junit.tests.running.methods.ExpectedTest;
+import org.junit.tests.running.methods.ParameterizedTestMethodTest;
+import org.junit.tests.running.methods.TestMethodTest;
+import org.junit.tests.running.methods.TimeoutTest;
+import org.junit.tests.validation.BadlyFormedClassesTest;
+import org.junit.tests.validation.FailedConstructionTest;
+import org.junit.tests.validation.InaccessibleBaseClassTest;
+import org.junit.tests.validation.ValidationTest;
 
 // These test files need to be cleaned.  See
 // https://sourceforge.net/pm/task.php?func=detailtask&project_task_id=136507&group_id=15278&group_project_id=51407
@@ -26,7 +66,6 @@
 	ForwardCompatibilityTest.class,
 	OldTests.class,
 	ParameterizedTestTest.class,
-	PreJUnit4TestCaseRunnerTest.class,
 	RunWithTest.class,
 	RunnerTest.class,
 	SuiteTest.class,
@@ -41,11 +80,11 @@
 	ValidationTest.class,
 	UserStopTest.class,
 	SortableTest.class,
-	OldTestClassRunnerTest.class,
+	JUnit38ClassRunnerTest.class,
 	JUnitCoreTest.class,
 	InaccessibleBaseClassTest.class,
 	SuiteMethodTest.class,
-	TestClassMethodsRunnerTest.class,
+	BadlyFormedClassesTest.class,
 	IgnoreClassTest.class,
 	OldTestClassAdaptingListenerTest.class,
 	AnnotatedDescriptionTest.class,
diff --git a/src/org/junit/tests/PreJUnit4TestCaseRunnerTest.java b/src/org/junit/tests/PreJUnit4TestCaseRunnerTest.java
deleted file mode 100644
index 02929f072490..000000000000
--- a/src/org/junit/tests/PreJUnit4TestCaseRunnerTest.java
+++ /dev/null
@@ -1,38 +0,0 @@
-package org.junit.tests;
-
-
-import static org.junit.Assert.assertEquals;
-import junit.framework.TestCase;
-import org.junit.Test;
-import org.junit.runner.Description;
-import org.junit.runner.JUnitCore;
-import org.junit.runner.Result;
-import org.junit.runner.notification.RunListener;
-
-public class PreJUnit4TestCaseRunnerTest {
-
-	static int count;
-	
-	static public class OneTest extends TestCase {
-		public void testOne() {
-		}
-	}
-	
-	@Test public void testListener() throws Exception {
-		JUnitCore runner= new JUnitCore();
-		RunListener listener= new RunListener() {
-			@Override
-			public void testStarted(Description description) {
-				assertEquals(Description.createTestDescription(OneTest.class, ""testOne""), 
-						description);
-				count++;
-			}
-		};
-		
-		runner.addListener(listener);
-		count= 0;
-		Result result= runner.run(OneTest.class);
-		assertEquals(1, count);
-		assertEquals(1, result.getRunCount());
-	}
-}
diff --git a/src/org/junit/tests/anotherpackage/Sub.java b/src/org/junit/tests/anotherpackage/Sub.java
deleted file mode 100644
index 4712fe91551a..000000000000
--- a/src/org/junit/tests/anotherpackage/Sub.java
+++ /dev/null
@@ -1,5 +0,0 @@
-package org.junit.tests.anotherpackage;
-
-public class Sub extends Super {
-	
-}
diff --git a/src/org/junit/tests/AssertionTest.java b/src/org/junit/tests/assertion/AssertionTest.java
similarity index 99%
rename from src/org/junit/tests/AssertionTest.java
rename to src/org/junit/tests/assertion/AssertionTest.java
index 113640984dd1..46033805360a 100644
--- a/src/org/junit/tests/AssertionTest.java
+++ b/src/org/junit/tests/assertion/AssertionTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.assertion;
 
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
diff --git a/src/org/junit/tests/BothTest.java b/src/org/junit/tests/assertion/BothTest.java
similarity index 98%
rename from src/org/junit/tests/BothTest.java
rename to src/org/junit/tests/assertion/BothTest.java
index 3c0416346524..ede61fad1fcb 100644
--- a/src/org/junit/tests/BothTest.java
+++ b/src/org/junit/tests/assertion/BothTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.assertion;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.not;
diff --git a/src/org/junit/tests/EachTest.java b/src/org/junit/tests/assertion/EachTest.java
similarity index 88%
rename from src/org/junit/tests/EachTest.java
rename to src/org/junit/tests/assertion/EachTest.java
index 77796c2433b1..7000cfe684db 100644
--- a/src/org/junit/tests/EachTest.java
+++ b/src/org/junit/tests/assertion/EachTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.assertion;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
diff --git a/src/org/junit/tests/AnnotatedDescriptionTest.java b/src/org/junit/tests/description/AnnotatedDescriptionTest.java
similarity index 98%
rename from src/org/junit/tests/AnnotatedDescriptionTest.java
rename to src/org/junit/tests/description/AnnotatedDescriptionTest.java
index 9c788eab9810..64c824675389 100644
--- a/src/org/junit/tests/AnnotatedDescriptionTest.java
+++ b/src/org/junit/tests/description/AnnotatedDescriptionTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.description;
 
 import static org.junit.Assert.*;
 
diff --git a/src/org/junit/tests/SuiteDescriptionTest.java b/src/org/junit/tests/description/SuiteDescriptionTest.java
similarity index 97%
rename from src/org/junit/tests/SuiteDescriptionTest.java
rename to src/org/junit/tests/description/SuiteDescriptionTest.java
index 42fde7f6eeec..d411b2b47878 100644
--- a/src/org/junit/tests/SuiteDescriptionTest.java
+++ b/src/org/junit/tests/description/SuiteDescriptionTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.description;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
diff --git a/src/org/junit/tests/TestDescriptionTest.java b/src/org/junit/tests/description/TestDescriptionTest.java
similarity index 88%
rename from src/org/junit/tests/TestDescriptionTest.java
rename to src/org/junit/tests/description/TestDescriptionTest.java
index 6952374ac910..73ae2800808a 100644
--- a/src/org/junit/tests/TestDescriptionTest.java
+++ b/src/org/junit/tests/description/TestDescriptionTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.description;
 
 import static org.junit.Assert.assertFalse;
 import org.junit.Test;
diff --git a/src/org/junit/tests/AssumptionTest.java b/src/org/junit/tests/experimental/AssumptionTest.java
similarity index 98%
rename from src/org/junit/tests/AssumptionTest.java
rename to src/org/junit/tests/experimental/AssumptionTest.java
index 53e0b52caf6c..acb5c7619bb5 100644
--- a/src/org/junit/tests/AssumptionTest.java
+++ b/src/org/junit/tests/experimental/AssumptionTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.experimental;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.*;
diff --git a/src/org/junit/tests/AssumptionViolatedExceptionTest.java b/src/org/junit/tests/experimental/AssumptionViolatedExceptionTest.java
similarity index 96%
rename from src/org/junit/tests/AssumptionViolatedExceptionTest.java
rename to src/org/junit/tests/experimental/AssumptionViolatedExceptionTest.java
index 20f26aabbd72..fbf8476109d3 100644
--- a/src/org/junit/tests/AssumptionViolatedExceptionTest.java
+++ b/src/org/junit/tests/experimental/AssumptionViolatedExceptionTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.experimental;
 
 import static org.junit.matchers.StringContains.containsString;
 import static org.hamcrest.CoreMatchers.is;
diff --git a/src/org/junit/tests/experimental/ExperimentalTests.java b/src/org/junit/tests/experimental/ExperimentalTests.java
new file mode 100644
index 000000000000..a10d9ccc917e
--- /dev/null
+++ b/src/org/junit/tests/experimental/ExperimentalTests.java
@@ -0,0 +1,19 @@
+package org.junit.tests.experimental;
+
+import org.junit.runner.RunWith;
+import org.junit.runners.Suite;
+import org.junit.runners.Suite.SuiteClasses;
+import org.junit.tests.experimental.results.PrintableResultTest;
+import org.junit.tests.experimental.results.ResultMatchersTest;
+import org.junit.tests.experimental.theories.DataPointMethodTest;
+import org.junit.tests.experimental.theories.ParameterSignatureTest;
+import org.junit.tests.experimental.theories.ParameterizedAssertionErrorTest;
+import org.junit.tests.experimental.theories.TheoriesTest;
+
+@RunWith(Suite.class)
+@SuiteClasses( { ParameterizedAssertionErrorTest.class,
+		TheoriesTest.class, PrintableResultTest.class,
+		ResultMatchersTest.class, DataPointMethodTest.class, ParameterSignatureTest.class })
+public class ExperimentalTests {
+
+}
diff --git a/src/org/junit/experimental/test/results/PrintableResultTest.java b/src/org/junit/tests/experimental/results/PrintableResultTest.java
similarity index 97%
rename from src/org/junit/experimental/test/results/PrintableResultTest.java
rename to src/org/junit/tests/experimental/results/PrintableResultTest.java
index 635a35e414fc..0faf0547bec6 100644
--- a/src/org/junit/experimental/test/results/PrintableResultTest.java
+++ b/src/org/junit/tests/experimental/results/PrintableResultTest.java
@@ -1,4 +1,4 @@
-package org.junit.experimental.test.results;
+package org.junit.tests.experimental.results;
 
 import static java.util.Arrays.asList;
 import static org.hamcrest.CoreMatchers.allOf;
diff --git a/src/org/junit/experimental/test/results/ResultMatchersTest.java b/src/org/junit/tests/experimental/results/ResultMatchersTest.java
similarity index 93%
rename from src/org/junit/experimental/test/results/ResultMatchersTest.java
rename to src/org/junit/tests/experimental/results/ResultMatchersTest.java
index ba6de049313d..a95f72245873 100644
--- a/src/org/junit/experimental/test/results/ResultMatchersTest.java
+++ b/src/org/junit/tests/experimental/results/ResultMatchersTest.java
@@ -1,4 +1,4 @@
-package org.junit.experimental.test.results;
+package org.junit.tests.experimental.results;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
diff --git a/src/org/junit/experimental/test/theories/DataPointMethodTest.java b/src/org/junit/tests/experimental/theories/DataPointMethodTest.java
similarity index 98%
rename from src/org/junit/experimental/test/theories/DataPointMethodTest.java
rename to src/org/junit/tests/experimental/theories/DataPointMethodTest.java
index 17729e281115..158f42befe93 100644
--- a/src/org/junit/experimental/test/theories/DataPointMethodTest.java
+++ b/src/org/junit/tests/experimental/theories/DataPointMethodTest.java
@@ -1,4 +1,4 @@
-package org.junit.experimental.test.theories;
+package org.junit.tests.experimental.theories;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.not;
diff --git a/src/org/junit/experimental/test/theories/ParameterSignatureTest.java b/src/org/junit/tests/experimental/theories/ParameterSignatureTest.java
similarity index 97%
rename from src/org/junit/experimental/test/theories/ParameterSignatureTest.java
rename to src/org/junit/tests/experimental/theories/ParameterSignatureTest.java
index 0265bdcc9ed1..c0191c459df7 100644
--- a/src/org/junit/experimental/test/theories/ParameterSignatureTest.java
+++ b/src/org/junit/tests/experimental/theories/ParameterSignatureTest.java
@@ -1,4 +1,4 @@
-package org.junit.experimental.test.theories;
+package org.junit.tests.experimental.theories;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertEquals;
diff --git a/src/org/junit/experimental/test/theories/ParameterizedAssertionErrorTest.java b/src/org/junit/tests/experimental/theories/ParameterizedAssertionErrorTest.java
similarity index 97%
rename from src/org/junit/experimental/test/theories/ParameterizedAssertionErrorTest.java
rename to src/org/junit/tests/experimental/theories/ParameterizedAssertionErrorTest.java
index 594d2d5e38f7..a08c583944f7 100644
--- a/src/org/junit/experimental/test/theories/ParameterizedAssertionErrorTest.java
+++ b/src/org/junit/tests/experimental/theories/ParameterizedAssertionErrorTest.java
@@ -1,4 +1,4 @@
-package org.junit.experimental.test.theories;
+package org.junit.tests.experimental.theories;
 
 import static org.junit.matchers.StringContains.containsString;
 import static org.hamcrest.CoreMatchers.is;
diff --git a/src/org/junit/experimental/test/theories/TheoriesTest.java b/src/org/junit/tests/experimental/theories/TheoriesTest.java
similarity index 99%
rename from src/org/junit/experimental/test/theories/TheoriesTest.java
rename to src/org/junit/tests/experimental/theories/TheoriesTest.java
index 13e187848c10..969d227882de 100644
--- a/src/org/junit/experimental/test/theories/TheoriesTest.java
+++ b/src/org/junit/tests/experimental/theories/TheoriesTest.java
@@ -1,4 +1,4 @@
-package org.junit.experimental.test.theories;
+package org.junit.tests.experimental.theories;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.not;
diff --git a/src/org/junit/tests/AllTestsTest.java b/src/org/junit/tests/junit3compatibility/AllTestsTest.java
similarity index 97%
rename from src/org/junit/tests/AllTestsTest.java
rename to src/org/junit/tests/junit3compatibility/AllTestsTest.java
index 0f298caa0008..25c6b4368f12 100644
--- a/src/org/junit/tests/AllTestsTest.java
+++ b/src/org/junit/tests/junit3compatibility/AllTestsTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.junit3compatibility;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
diff --git a/src/org/junit/tests/ClassRequestTest.java b/src/org/junit/tests/junit3compatibility/ClassRequestTest.java
similarity index 89%
rename from src/org/junit/tests/ClassRequestTest.java
rename to src/org/junit/tests/junit3compatibility/ClassRequestTest.java
index 93382215aca6..74f71eca9037 100644
--- a/src/org/junit/tests/ClassRequestTest.java
+++ b/src/org/junit/tests/junit3compatibility/ClassRequestTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.junit3compatibility;
 
 import static org.junit.Assert.assertFalse;
 import org.junit.Test;
diff --git a/src/org/junit/tests/ForwardCompatibilityPrintingTest.java b/src/org/junit/tests/junit3compatibility/ForwardCompatibilityPrintingTest.java
similarity index 98%
rename from src/org/junit/tests/ForwardCompatibilityPrintingTest.java
rename to src/org/junit/tests/junit3compatibility/ForwardCompatibilityPrintingTest.java
index 846cbde117b7..34a08a6e581b 100644
--- a/src/org/junit/tests/ForwardCompatibilityPrintingTest.java
+++ b/src/org/junit/tests/junit3compatibility/ForwardCompatibilityPrintingTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.junit3compatibility;
 
 import java.io.ByteArrayOutputStream;
 import java.io.OutputStream;
diff --git a/src/org/junit/tests/ForwardCompatibilityTest.java b/src/org/junit/tests/junit3compatibility/ForwardCompatibilityTest.java
similarity index 99%
rename from src/org/junit/tests/ForwardCompatibilityTest.java
rename to src/org/junit/tests/junit3compatibility/ForwardCompatibilityTest.java
index c4d646eeab43..2c73089a0e12 100644
--- a/src/org/junit/tests/ForwardCompatibilityTest.java
+++ b/src/org/junit/tests/junit3compatibility/ForwardCompatibilityTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.junit3compatibility;
 
 import junit.framework.AssertionFailedError;
 import junit.framework.JUnit4TestAdapter;
diff --git a/src/org/junit/tests/InitializationErrorForwardCompatibilityTest.java b/src/org/junit/tests/junit3compatibility/InitializationErrorForwardCompatibilityTest.java
similarity index 98%
rename from src/org/junit/tests/InitializationErrorForwardCompatibilityTest.java
rename to src/org/junit/tests/junit3compatibility/InitializationErrorForwardCompatibilityTest.java
index 01554f7fc94f..985605d18674 100644
--- a/src/org/junit/tests/InitializationErrorForwardCompatibilityTest.java
+++ b/src/org/junit/tests/junit3compatibility/InitializationErrorForwardCompatibilityTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.junit3compatibility;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
diff --git a/src/org/junit/tests/OldTestClassRunnerTest.java b/src/org/junit/tests/junit3compatibility/JUnit38ClassRunnerTest.java
similarity index 61%
rename from src/org/junit/tests/OldTestClassRunnerTest.java
rename to src/org/junit/tests/junit3compatibility/JUnit38ClassRunnerTest.java
index 929c1540b80e..7ee060daee80 100644
--- a/src/org/junit/tests/OldTestClassRunnerTest.java
+++ b/src/org/junit/tests/junit3compatibility/JUnit38ClassRunnerTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.junit3compatibility;
 
 import static org.junit.Assert.assertEquals;
 import junit.extensions.TestDecorator;
@@ -12,8 +12,9 @@
 import org.junit.runner.JUnitCore;
 import org.junit.runner.Result;
 import org.junit.runner.notification.Failure;
+import org.junit.runner.notification.RunListener;
 
-public class OldTestClassRunnerTest {
+public class JUnit38ClassRunnerTest {
 	public static class MyTest extends TestCase {
 		public void testA() {
 			
@@ -37,4 +38,29 @@ public static class AnnotatedTest {
 		Failure failure= result.getFailures().get(0);
 		assertEquals(Description.createTestDescription(AnnotatedTest.class, ""foo""), failure.getDescription());
 	}
+	
+	static int count;
+	
+	static public class OneTest extends TestCase {
+		public void testOne() {
+		}
+	}
+	
+	@Test public void testListener() throws Exception {
+		JUnitCore runner= new JUnitCore();
+		RunListener listener= new RunListener() {
+			@Override
+			public void testStarted(Description description) {
+				assertEquals(Description.createTestDescription(OneTest.class, ""testOne""), 
+						description);
+				count++;
+			}
+		};
+		
+		runner.addListener(listener);
+		count= 0;
+		Result result= runner.run(OneTest.class);
+		assertEquals(1, count);
+		assertEquals(1, result.getRunCount());
+	}
 }
diff --git a/src/org/junit/tests/OldTestClassAdaptingListenerTest.java b/src/org/junit/tests/junit3compatibility/OldTestClassAdaptingListenerTest.java
similarity index 95%
rename from src/org/junit/tests/OldTestClassAdaptingListenerTest.java
rename to src/org/junit/tests/junit3compatibility/OldTestClassAdaptingListenerTest.java
index 790e94c9c9bf..5f939c223ab0 100644
--- a/src/org/junit/tests/OldTestClassAdaptingListenerTest.java
+++ b/src/org/junit/tests/junit3compatibility/OldTestClassAdaptingListenerTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.junit3compatibility;
 
 import static org.junit.Assert.assertEquals;
 import junit.framework.AssertionFailedError;
diff --git a/src/org/junit/tests/OldTests.java b/src/org/junit/tests/junit3compatibility/OldTests.java
similarity index 83%
rename from src/org/junit/tests/OldTests.java
rename to src/org/junit/tests/junit3compatibility/OldTests.java
index 8d61b6a4efe8..ab154a617961 100644
--- a/src/org/junit/tests/OldTests.java
+++ b/src/org/junit/tests/junit3compatibility/OldTests.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.junit3compatibility;
 import junit.framework.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.AllTests;
diff --git a/src/org/junit/tests/SuiteMethodTest.java b/src/org/junit/tests/junit3compatibility/SuiteMethodTest.java
similarity index 98%
rename from src/org/junit/tests/SuiteMethodTest.java
rename to src/org/junit/tests/junit3compatibility/SuiteMethodTest.java
index e268f953b8eb..1a4b599512e6 100644
--- a/src/org/junit/tests/SuiteMethodTest.java
+++ b/src/org/junit/tests/junit3compatibility/SuiteMethodTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.junit3compatibility;
 
 import static org.junit.Assert.*;
 import junit.framework.JUnit4TestAdapter;
diff --git a/src/org/junit/tests/ListenerTest.java b/src/org/junit/tests/listening/ListenerTest.java
similarity index 95%
rename from src/org/junit/tests/ListenerTest.java
rename to src/org/junit/tests/listening/ListenerTest.java
index 4203fb14baa2..964c4d48e512 100644
--- a/src/org/junit/tests/ListenerTest.java
+++ b/src/org/junit/tests/listening/ListenerTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.listening;
 
 import static org.junit.Assert.assertEquals;
 import org.junit.Test;
diff --git a/src/org/junit/tests/RunnerTest.java b/src/org/junit/tests/listening/RunnerTest.java
similarity index 97%
rename from src/org/junit/tests/RunnerTest.java
rename to src/org/junit/tests/listening/RunnerTest.java
index 4ab0a7940c9a..a07848dd2a00 100644
--- a/src/org/junit/tests/RunnerTest.java
+++ b/src/org/junit/tests/listening/RunnerTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.listening;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
diff --git a/src/org/junit/tests/TestListenerTest.java b/src/org/junit/tests/listening/TestListenerTest.java
similarity index 97%
rename from src/org/junit/tests/TestListenerTest.java
rename to src/org/junit/tests/listening/TestListenerTest.java
index 2b70577f8a28..35c0c75041b5 100644
--- a/src/org/junit/tests/TestListenerTest.java
+++ b/src/org/junit/tests/listening/TestListenerTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.listening;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotSame;
diff --git a/src/org/junit/tests/TextListenerTest.java b/src/org/junit/tests/listening/TextListenerTest.java
similarity index 98%
rename from src/org/junit/tests/TextListenerTest.java
rename to src/org/junit/tests/listening/TextListenerTest.java
index 08c11e256a3d..dd1436f79efe 100644
--- a/src/org/junit/tests/TextListenerTest.java
+++ b/src/org/junit/tests/listening/TextListenerTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.listening;
 
 import java.io.ByteArrayOutputStream;
 import java.io.OutputStream;
diff --git a/src/org/junit/tests/UserStopTest.java b/src/org/junit/tests/listening/UserStopTest.java
similarity index 95%
rename from src/org/junit/tests/UserStopTest.java
rename to src/org/junit/tests/listening/UserStopTest.java
index 4286d9debead..822e2038195d 100644
--- a/src/org/junit/tests/UserStopTest.java
+++ b/src/org/junit/tests/listening/UserStopTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.listening;
 
 import org.junit.Before;
 import org.junit.Test;
diff --git a/src/org/junit/tests/CategoryTest.java b/src/org/junit/tests/manipulation/CategoryTest.java
similarity index 98%
rename from src/org/junit/tests/CategoryTest.java
rename to src/org/junit/tests/manipulation/CategoryTest.java
index ee2c369614ac..dcd4f7a52dac 100644
--- a/src/org/junit/tests/CategoryTest.java
+++ b/src/org/junit/tests/manipulation/CategoryTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.manipulation;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
diff --git a/src/org/junit/tests/SingleMethodTest.java b/src/org/junit/tests/manipulation/SingleMethodTest.java
similarity index 98%
rename from src/org/junit/tests/SingleMethodTest.java
rename to src/org/junit/tests/manipulation/SingleMethodTest.java
index 36bdfeb65598..ecb37a650d68 100644
--- a/src/org/junit/tests/SingleMethodTest.java
+++ b/src/org/junit/tests/manipulation/SingleMethodTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.manipulation;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertEquals;
diff --git a/src/org/junit/tests/SortableTest.java b/src/org/junit/tests/manipulation/SortableTest.java
similarity index 99%
rename from src/org/junit/tests/SortableTest.java
rename to src/org/junit/tests/manipulation/SortableTest.java
index 850859ca84df..81a9331bf194 100644
--- a/src/org/junit/tests/SortableTest.java
+++ b/src/org/junit/tests/manipulation/SortableTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.manipulation;
 
 import static org.junit.Assert.assertEquals;
 
diff --git a/src/org/junit/tests/EnclosedTest.java b/src/org/junit/tests/running/classes/EnclosedTest.java
similarity index 96%
rename from src/org/junit/tests/EnclosedTest.java
rename to src/org/junit/tests/running/classes/EnclosedTest.java
index fc13ce4863d7..24e15b8de868 100644
--- a/src/org/junit/tests/EnclosedTest.java
+++ b/src/org/junit/tests/running/classes/EnclosedTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.running.classes;
 
 import static org.junit.Assert.assertEquals;
 import org.junit.Test;
diff --git a/src/org/junit/tests/IgnoreClassTest.java b/src/org/junit/tests/running/classes/IgnoreClassTest.java
similarity index 93%
rename from src/org/junit/tests/IgnoreClassTest.java
rename to src/org/junit/tests/running/classes/IgnoreClassTest.java
index 806db9598be8..99ad0892a393 100644
--- a/src/org/junit/tests/IgnoreClassTest.java
+++ b/src/org/junit/tests/running/classes/IgnoreClassTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.running.classes;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
diff --git a/src/org/junit/tests/ParameterizedTestTest.java b/src/org/junit/tests/running/classes/ParameterizedTestTest.java
similarity index 99%
rename from src/org/junit/tests/ParameterizedTestTest.java
rename to src/org/junit/tests/running/classes/ParameterizedTestTest.java
index 267efec90993..b6b66f13efc1 100644
--- a/src/org/junit/tests/ParameterizedTestTest.java
+++ b/src/org/junit/tests/running/classes/ParameterizedTestTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.running.classes;
 
 import static org.junit.Assert.assertEquals;
 
diff --git a/src/org/junit/tests/RunWithTest.java b/src/org/junit/tests/running/classes/RunWithTest.java
similarity index 97%
rename from src/org/junit/tests/RunWithTest.java
rename to src/org/junit/tests/running/classes/RunWithTest.java
index 4b2851450dc7..1df01671cbb1 100644
--- a/src/org/junit/tests/RunWithTest.java
+++ b/src/org/junit/tests/running/classes/RunWithTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.running.classes;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
diff --git a/src/org/junit/tests/SuiteTest.java b/src/org/junit/tests/running/classes/SuiteTest.java
similarity index 99%
rename from src/org/junit/tests/SuiteTest.java
rename to src/org/junit/tests/running/classes/SuiteTest.java
index 000751a3e533..e9c289bdcff5 100644
--- a/src/org/junit/tests/SuiteTest.java
+++ b/src/org/junit/tests/running/classes/SuiteTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.running.classes;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
diff --git a/src/org/junit/tests/CommandLineTest.java b/src/org/junit/tests/running/core/CommandLineTest.java
similarity index 97%
rename from src/org/junit/tests/CommandLineTest.java
rename to src/org/junit/tests/running/core/CommandLineTest.java
index 6123d17de4e6..3bed5ffa7286 100644
--- a/src/org/junit/tests/CommandLineTest.java
+++ b/src/org/junit/tests/running/core/CommandLineTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.running.core;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
diff --git a/src/org/junit/tests/JUnitCoreTest.java b/src/org/junit/tests/running/core/JUnitCoreTest.java
similarity index 97%
rename from src/org/junit/tests/JUnitCoreTest.java
rename to src/org/junit/tests/running/core/JUnitCoreTest.java
index 96e97f952dd7..758e51d97044 100644
--- a/src/org/junit/tests/JUnitCoreTest.java
+++ b/src/org/junit/tests/running/core/JUnitCoreTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.running.core;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
diff --git a/src/org/junit/tests/AnnotationTest.java b/src/org/junit/tests/running/methods/AnnotationTest.java
similarity index 99%
rename from src/org/junit/tests/AnnotationTest.java
rename to src/org/junit/tests/running/methods/AnnotationTest.java
index b013c6461b8e..9bbea0d23557 100644
--- a/src/org/junit/tests/AnnotationTest.java
+++ b/src/org/junit/tests/running/methods/AnnotationTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.running.methods;
 
 import java.util.Collection;
 import java.util.HashSet;
diff --git a/src/org/junit/tests/ExpectedTest.java b/src/org/junit/tests/running/methods/ExpectedTest.java
similarity index 97%
rename from src/org/junit/tests/ExpectedTest.java
rename to src/org/junit/tests/running/methods/ExpectedTest.java
index 4bcd8c42dedd..d16e6892a71c 100644
--- a/src/org/junit/tests/ExpectedTest.java
+++ b/src/org/junit/tests/running/methods/ExpectedTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.running.methods;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
diff --git a/src/org/junit/tests/ParameterizedTestMethodTest.java b/src/org/junit/tests/running/methods/ParameterizedTestMethodTest.java
similarity index 98%
rename from src/org/junit/tests/ParameterizedTestMethodTest.java
rename to src/org/junit/tests/running/methods/ParameterizedTestMethodTest.java
index 9dcafb7d0a56..9f6e6b449479 100644
--- a/src/org/junit/tests/ParameterizedTestMethodTest.java
+++ b/src/org/junit/tests/running/methods/ParameterizedTestMethodTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.running.methods;
 
 import static org.junit.Assert.assertEquals;
 
diff --git a/src/org/junit/tests/TestMethodTest.java b/src/org/junit/tests/running/methods/TestMethodTest.java
similarity index 99%
rename from src/org/junit/tests/TestMethodTest.java
rename to src/org/junit/tests/running/methods/TestMethodTest.java
index 9ddd760916a6..d656f4b6a341 100644
--- a/src/org/junit/tests/TestMethodTest.java
+++ b/src/org/junit/tests/running/methods/TestMethodTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.running.methods;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
diff --git a/src/org/junit/tests/TimeoutTest.java b/src/org/junit/tests/running/methods/TimeoutTest.java
similarity index 99%
rename from src/org/junit/tests/TimeoutTest.java
rename to src/org/junit/tests/running/methods/TimeoutTest.java
index 380a555f8855..89777692e5a9 100644
--- a/src/org/junit/tests/TimeoutTest.java
+++ b/src/org/junit/tests/running/methods/TimeoutTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.running.methods;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertEquals;
diff --git a/src/org/junit/tests/TestClassMethodsRunnerTest.java b/src/org/junit/tests/validation/BadlyFormedClassesTest.java
similarity index 93%
rename from src/org/junit/tests/TestClassMethodsRunnerTest.java
rename to src/org/junit/tests/validation/BadlyFormedClassesTest.java
index fbfccc300b73..508ad77ff099 100644
--- a/src/org/junit/tests/TestClassMethodsRunnerTest.java
+++ b/src/org/junit/tests/validation/BadlyFormedClassesTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.validation;
 
 import static org.junit.Assert.assertEquals;
 import org.junit.Test;
@@ -6,7 +6,7 @@
 import org.junit.runner.Result;
 import org.junit.runner.notification.Failure;
 
-public class TestClassMethodsRunnerTest  {
+public class BadlyFormedClassesTest  {
 	
 	public static class FaultyConstructor {
 		public FaultyConstructor() throws Exception {
diff --git a/src/org/junit/tests/FailedConstructionTest.java b/src/org/junit/tests/validation/FailedConstructionTest.java
similarity index 95%
rename from src/org/junit/tests/FailedConstructionTest.java
rename to src/org/junit/tests/validation/FailedConstructionTest.java
index 9aab57483ca1..7d2ab1e9105b 100644
--- a/src/org/junit/tests/FailedConstructionTest.java
+++ b/src/org/junit/tests/validation/FailedConstructionTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.validation;
 
 import org.junit.Assert;
 import org.junit.Test;
diff --git a/src/org/junit/tests/InaccessibleBaseClassTest.java b/src/org/junit/tests/validation/InaccessibleBaseClassTest.java
similarity index 85%
rename from src/org/junit/tests/InaccessibleBaseClassTest.java
rename to src/org/junit/tests/validation/InaccessibleBaseClassTest.java
index c2e2f58f8849..0d33232c21e6 100644
--- a/src/org/junit/tests/InaccessibleBaseClassTest.java
+++ b/src/org/junit/tests/validation/InaccessibleBaseClassTest.java
@@ -1,10 +1,10 @@
-package org.junit.tests;
+package org.junit.tests.validation;
 
 import org.junit.Test;
 import org.junit.internal.runners.InitializationError;
 import org.junit.internal.runners.MethodValidator;
 import org.junit.internal.runners.TestClass;
-import org.junit.tests.anotherpackage.Sub;
+import org.junit.tests.validation.anotherpackage.Sub;
 
 public class InaccessibleBaseClassTest {	
 	@Test(expected=InitializationError.class)
diff --git a/src/org/junit/tests/ValidationTest.java b/src/org/junit/tests/validation/ValidationTest.java
similarity index 92%
rename from src/org/junit/tests/ValidationTest.java
rename to src/org/junit/tests/validation/ValidationTest.java
index 2dc318050cf3..bbce7b627ecb 100644
--- a/src/org/junit/tests/ValidationTest.java
+++ b/src/org/junit/tests/validation/ValidationTest.java
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.validation;
 
 import static org.junit.Assert.assertEquals;
 import org.junit.BeforeClass;
diff --git a/src/org/junit/tests/validation/anotherpackage/Sub.java b/src/org/junit/tests/validation/anotherpackage/Sub.java
new file mode 100644
index 000000000000..44d6c76de287
--- /dev/null
+++ b/src/org/junit/tests/validation/anotherpackage/Sub.java
@@ -0,0 +1,5 @@
+package org.junit.tests.validation.anotherpackage;
+
+public class Sub extends Super {
+	
+}
diff --git a/src/org/junit/tests/anotherpackage/Super.java b/src/org/junit/tests/validation/anotherpackage/Super.java
similarity index 56%
rename from src/org/junit/tests/anotherpackage/Super.java
rename to src/org/junit/tests/validation/anotherpackage/Super.java
index ff9c454f1eb9..ba1cfe46ef46 100644
--- a/src/org/junit/tests/anotherpackage/Super.java
+++ b/src/org/junit/tests/validation/anotherpackage/Super.java
@@ -1,4 +1,4 @@
-package org.junit.tests.anotherpackage;
+package org.junit.tests.validation.anotherpackage;
 
 import org.junit.Test;",Reorganize tests,1
"diff --git a/src/org/junit/internal/runners/ParentRunner.java b/src/org/junit/internal/runners/ParentRunner.java
index 958ff420a89f..6787d9e45cee 100644
--- a/src/org/junit/internal/runners/ParentRunner.java
+++ b/src/org/junit/internal/runners/ParentRunner.java
@@ -1,6 +1,7 @@
 package org.junit.internal.runners;
 
 import java.lang.annotation.Annotation;
+import java.util.ArrayList;
 import java.util.List;
 
 import org.junit.Assume.AssumptionViolatedException;
@@ -12,11 +13,15 @@
 import org.junit.internal.runners.model.TestClass;
 import org.junit.runner.Description;
 import org.junit.runner.Runner;
+import org.junit.runner.manipulation.Filter;
+import org.junit.runner.manipulation.Filterable;
+import org.junit.runner.manipulation.NoTestsRemainException;
 import org.junit.runner.notification.RunNotifier;
 import org.junit.runner.notification.StoppedByUserException;
 
-public abstract class ParentRunner<T> extends Runner {
+public abstract class ParentRunner<T> extends Runner implements Filterable {
 	protected TestClass fTestClass;
+	private Filter fFilter;
 
 	public ParentRunner(Class<?> testClass) {
 		fTestClass = new TestClass(testClass);
@@ -37,7 +42,7 @@ private Statement classBlock(final RunNotifier notifier) {
 		return new Statement() {
 					@Override
 					public void evaluate() {
-						for (T each : getChildren())
+						for (T each : getFilteredChildren())
 							runChild(each, notifier);
 					}
 				};
@@ -63,16 +68,24 @@ public void run(final RunNotifier notifier) {
 	@Override
 	public Description getDescription() {
 		Description description= Description.createSuiteDescription(getName(), classAnnotations());
-		for (T child : getChildren())
+		for (T child : getFilteredChildren())
 			description.addChild(describeChild(child));
 		return description;
 	}
 
+	private List<T> getFilteredChildren() {
+		ArrayList<T> filtered= new ArrayList<T>();
+		for (T each : getChildren())
+			if (fFilter == null || fFilter.shouldRun(describeChild(each)))
+				filtered.add(each);
+		return filtered;
+	}
+
 	protected TestClass getTestClass() {
 		return fTestClass;
 	}
 
-	private Annotation[] classAnnotations() {
+	protected Annotation[] classAnnotations() {
 		return fTestClass.getJavaClass().getAnnotations();
 	}
 
@@ -86,4 +99,8 @@ protected void assertValid(List<Throwable> errors) throws InitializationError {
 		if (!errors.isEmpty())
 			throw new InitializationError(errors);
 	}
+	
+	public void filter(Filter filter) throws NoTestsRemainException {
+		fFilter= filter;
+	}
 }
\ No newline at end of file",Now includes filtering,1
"diff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT-sources.jar b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT-sources.jar
new file mode 100644
index 0000000000..86cd10cdc2
Binary files /dev/null and b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT-sources.jar differ
diff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT-sources.jar.md5 b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT-sources.jar.md5
new file mode 100644
index 0000000000..9545f222ce
--- /dev/null
+++ b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT-sources.jar.md5
@@ -0,0 +1 @@
+072cf84a77d0147842730b93dd9fcd39
\ No newline at end of file
diff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT-sources.jar.sha1 b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT-sources.jar.sha1
new file mode 100644
index 0000000000..581ff5eae6
--- /dev/null
+++ b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT-sources.jar.sha1
@@ -0,0 +1 @@
+c3f2e4799b56685158e5a73dcd8c7722d7dc76ad
\ No newline at end of file
diff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT.jar b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT.jar
new file mode 100644
index 0000000000..b5713f0919
Binary files /dev/null and b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT.jar differ
diff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT.jar.md5 b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT.jar.md5
new file mode 100644
index 0000000000..4b620789df
--- /dev/null
+++ b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT.jar.md5
@@ -0,0 +1 @@
+1c6a5bccddc9a561fcf8538a64295827
\ No newline at end of file
diff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT.jar.sha1 b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT.jar.sha1
new file mode 100644
index 0000000000..86529e6241
--- /dev/null
+++ b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT.jar.sha1
@@ -0,0 +1 @@
+d4a7756cfaed55f88d2a4530ec9863090ccbe31c
\ No newline at end of file
diff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10-sources.jar b/lib/org.kohsuke.stapler/jars/stapler-1.10-sources.jar
new file mode 100644
index 0000000000..1f6da30c50
Binary files /dev/null and b/lib/org.kohsuke.stapler/jars/stapler-1.10-sources.jar differ
diff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10-sources.jar.md5 b/lib/org.kohsuke.stapler/jars/stapler-1.10-sources.jar.md5
new file mode 100644
index 0000000000..01755c4776
--- /dev/null
+++ b/lib/org.kohsuke.stapler/jars/stapler-1.10-sources.jar.md5
@@ -0,0 +1 @@
+c542d1d94a9414332b48a2acbc67f102
\ No newline at end of file
diff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10-sources.jar.sha1 b/lib/org.kohsuke.stapler/jars/stapler-1.10-sources.jar.sha1
new file mode 100644
index 0000000000..c9a35c9959
--- /dev/null
+++ b/lib/org.kohsuke.stapler/jars/stapler-1.10-sources.jar.sha1
@@ -0,0 +1 @@
+ee8a52eb16efe7128f25b7bb40cc1874f81569fc
\ No newline at end of file
diff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10.jar b/lib/org.kohsuke.stapler/jars/stapler-1.10.jar
new file mode 100644
index 0000000000..9ef80c4afa
Binary files /dev/null and b/lib/org.kohsuke.stapler/jars/stapler-1.10.jar differ
diff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10.jar.md5 b/lib/org.kohsuke.stapler/jars/stapler-1.10.jar.md5
new file mode 100644
index 0000000000..73196af557
--- /dev/null
+++ b/lib/org.kohsuke.stapler/jars/stapler-1.10.jar.md5
@@ -0,0 +1 @@
+fed5044bb581894f692eb769c7c4cde2
\ No newline at end of file
diff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10.jar.sha1 b/lib/org.kohsuke.stapler/jars/stapler-1.10.jar.sha1
new file mode 100644
index 0000000000..98870e0599
--- /dev/null
+++ b/lib/org.kohsuke.stapler/jars/stapler-1.10.jar.sha1
@@ -0,0 +1 @@
+1d6db1a40716be247008a700efcab520e2e048a2
\ No newline at end of file
diff --git a/lib/org.kohsuke.stapler/poms/stapler-1.10-SNAPSHOT.pom b/lib/org.kohsuke.stapler/poms/stapler-1.10-SNAPSHOT.pom
new file mode 100644
index 0000000000..0b3f1be858
--- /dev/null
+++ b/lib/org.kohsuke.stapler/poms/stapler-1.10-SNAPSHOT.pom
@@ -0,0 +1,101 @@
+<project>
+  <pomVersion>3</pomVersion>
+  <groupId>org.kohsuke.stapler</groupId>
+  <artifactId>stapler</artifactId>
+  <currentVersion>1.10-SNAPSHOT</currentVersion>
+  <shortDescription>Stapler HTTP request handling engine</shortDescription>
+  <description>Stapler HTTP request handling engine</description>
+  <issueTrackingUrl>https://stapler.dev.java.net/servlets/ProjectIssues</issueTrackingUrl>
+  <mailingLists>
+    <mailingList>
+      <name>Users List</name>
+      <subscribe>users-subscribe@stapler.dev.java.net</subscribe>
+      <unsubscribe>users-unsubscribe@stapler.dev.java.net</unsubscribe>
+      <archive>https://stapler.dev.java.net/servlets/SummarizeList?listName=users</archive>
+    </mailingList>
+    <mailingList>
+      <name>Issues List</name>
+      <subscribe>issues-subscribe@stapler.dev.java.net</subscribe>
+      <unsubscribe>issues-unsubscribe@stapler.dev.java.net</unsubscribe>
+      <archive>https://stapler.dev.java.net/servlets/SummarizeList?listName=issues</archive>
+    </mailingList>
+    <mailingList>
+      <name>CVS List</name>
+      <subscribe>cvs-subscribe@stapler.dev.java.net</subscribe>
+      <unsubscribe>cvs-unsubscribe@stapler.dev.java.net</unsubscribe>
+      <archive>https://stapler.dev.java.net/servlets/SummarizeList?listName=cvs</archive>
+    </mailingList>
+  </mailingLists>
+  <developers>
+    <developer>
+      <id>kohsuke</id>
+      <name>Kohsuke Kawaguchi</name>
+      <email>kk@kohsuke.org</email>
+    </developer>
+  </developers>
+  <reports>
+    <report>maven-license-plugin</report>
+    <report>maven-changelog-plugin</report>
+    <report>maven-changes-plugin</report>
+    <report>maven-developer-activity-plugin</report>
+    <report>maven-file-activity-plugin</report>
+    <report>maven-javadoc-plugin</report>
+    <report>maven-jellydoc-plugin</report>
+    <report>maven-junit-report-plugin</report>
+    <report>maven-linkcheck-plugin</report>
+  </reports>
+  <organization>
+    <url>http://www.java.net/</url>
+    <logo>https://dalma.dev.java.net/maven/images/java.net-logo.png</logo>
+  </organization>
+  <package>org.kohsuke.stapler</package>
+  <build>
+    <sourceDirectory>src</sourceDirectory>
+    <unitTest />
+    <resources>
+      <resource>
+        <directory>src</directory>
+        <includes>
+          <include>META-INF/taglib.tld</include>
+        </includes>
+      </resource>
+    </resources>
+  </build>
+  <dependencies>
+    <dependency>
+      <groupId>javax.servlet</groupId>
+      <artifactId>servlet-api</artifactId>
+      <version>2.3</version>
+    </dependency>
+    <dependency>
+      <groupId>javax.servlet</groupId>
+      <artifactId>jsp-api</artifactId>
+      <version>2.0</version>
+    </dependency>
+    <dependency>
+      <groupId>commons-jelly</groupId>
+      <artifactId>commons-jelly</artifactId>
+      <version>1.0</version>
+    </dependency>
+    <dependency>
+      <groupId>dom4j</groupId>
+      <artifactId>dom4j</artifactId>
+      <version>1.6.1</version>
+    </dependency>
+    <dependency>
+      <groupId>commons-jexl</groupId>
+      <artifactId>commons-jexl</artifactId>
+      <version>1.0</version>
+    </dependency>
+    <dependency>
+      <groupId>commons-beanutils</groupId>
+      <artifactId>commons-beanutils</artifactId>
+      <version>1.6</version>
+    </dependency>
+    <dependency>
+      <groupId>groovy</groupId>
+      <artifactId>groovy-all</artifactId>
+      <version>1.0-jsr-06</version>
+    </dependency>
+  </dependencies>
+</project>
\ No newline at end of file
diff --git a/lib/org.kohsuke.stapler/poms/stapler-1.10-SNAPSHOT.pom.md5 b/lib/org.kohsuke.stapler/poms/stapler-1.10-SNAPSHOT.pom.md5
new file mode 100644
index 0000000000..ffe9e03fe2
--- /dev/null
+++ b/lib/org.kohsuke.stapler/poms/stapler-1.10-SNAPSHOT.pom.md5
@@ -0,0 +1 @@
+4252d528de5ef2faa907d61f26604e81
\ No newline at end of file
diff --git a/lib/org.kohsuke.stapler/poms/stapler-1.10-SNAPSHOT.pom.sha1 b/lib/org.kohsuke.stapler/poms/stapler-1.10-SNAPSHOT.pom.sha1
new file mode 100644
index 0000000000..10646d21de
--- /dev/null
+++ b/lib/org.kohsuke.stapler/poms/stapler-1.10-SNAPSHOT.pom.sha1
@@ -0,0 +1 @@
+a9b30bcfbf91151c47720124b756b25e137cfb4d
\ No newline at end of file
diff --git a/lib/org.kohsuke.stapler/poms/stapler-1.10.pom b/lib/org.kohsuke.stapler/poms/stapler-1.10.pom
new file mode 100644
index 0000000000..4873d4a1f7
--- /dev/null
+++ b/lib/org.kohsuke.stapler/poms/stapler-1.10.pom
@@ -0,0 +1,101 @@
+<project>
+  <pomVersion>3</pomVersion>
+  <groupId>org.kohsuke.stapler</groupId>
+  <artifactId>stapler</artifactId>
+  <currentVersion>1.10</currentVersion>
+  <shortDescription>Stapler HTTP request handling engine</shortDescription>
+  <description>Stapler HTTP request handling engine</description>
+  <issueTrackingUrl>https://stapler.dev.java.net/servlets/ProjectIssues</issueTrackingUrl>
+  <mailingLists>
+    <mailingList>
+      <name>Users List</name>
+      <subscribe>users-subscribe@stapler.dev.java.net</subscribe>
+      <unsubscribe>users-unsubscribe@stapler.dev.java.net</unsubscribe>
+      <archive>https://stapler.dev.java.net/servlets/SummarizeList?listName=users</archive>
+    </mailingList>
+    <mailingList>
+      <name>Issues List</name>
+      <subscribe>issues-subscribe@stapler.dev.java.net</subscribe>
+      <unsubscribe>issues-unsubscribe@stapler.dev.java.net</unsubscribe>
+      <archive>https://stapler.dev.java.net/servlets/SummarizeList?listName=issues</archive>
+    </mailingList>
+    <mailingList>
+      <name>CVS List</name>
+      <subscribe>cvs-subscribe@stapler.dev.java.net</subscribe>
+      <unsubscribe>cvs-unsubscribe@stapler.dev.java.net</unsubscribe>
+      <archive>https://stapler.dev.java.net/servlets/SummarizeList?listName=cvs</archive>
+    </mailingList>
+  </mailingLists>
+  <developers>
+    <developer>
+      <id>kohsuke</id>
+      <name>Kohsuke Kawaguchi</name>
+      <email>kk@kohsuke.org</email>
+    </developer>
+  </developers>
+  <reports>
+    <report>maven-license-plugin</report>
+    <report>maven-changelog-plugin</report>
+    <report>maven-changes-plugin</report>
+    <report>maven-developer-activity-plugin</report>
+    <report>maven-file-activity-plugin</report>
+    <report>maven-javadoc-plugin</report>
+    <report>maven-jellydoc-plugin</report>
+    <report>maven-junit-report-plugin</report>
+    <report>maven-linkcheck-plugin</report>
+  </reports>
+  <organization>
+    <url>http://www.java.net/</url>
+    <logo>https://dalma.dev.java.net/maven/images/java.net-logo.png</logo>
+  </organization>
+  <package>org.kohsuke.stapler</package>
+  <build>
+    <sourceDirectory>src</sourceDirectory>
+    <unitTest />
+    <resources>
+      <resource>
+        <directory>src</directory>
+        <includes>
+          <include>META-INF/taglib.tld</include>
+        </includes>
+      </resource>
+    </resources>
+  </build>
+  <dependencies>
+    <dependency>
+      <groupId>javax.servlet</groupId>
+      <artifactId>servlet-api</artifactId>
+      <version>2.3</version>
+    </dependency>
+    <dependency>
+      <groupId>javax.servlet</groupId>
+      <artifactId>jsp-api</artifactId>
+      <version>2.0</version>
+    </dependency>
+    <dependency>
+      <groupId>commons-jelly</groupId>
+      <artifactId>commons-jelly</artifactId>
+      <version>1.0</version>
+    </dependency>
+    <dependency>
+      <groupId>dom4j</groupId>
+      <artifactId>dom4j</artifactId>
+      <version>1.6.1</version>
+    </dependency>
+    <dependency>
+      <groupId>commons-jexl</groupId>
+      <artifactId>commons-jexl</artifactId>
+      <version>1.0</version>
+    </dependency>
+    <dependency>
+      <groupId>commons-beanutils</groupId>
+      <artifactId>commons-beanutils</artifactId>
+      <version>1.6</version>
+    </dependency>
+    <dependency>
+      <groupId>groovy</groupId>
+      <artifactId>groovy-all</artifactId>
+      <version>1.0-jsr-06</version>
+    </dependency>
+  </dependencies>
+</project>
\ No newline at end of file
diff --git a/lib/org.kohsuke.stapler/poms/stapler-1.10.pom.md5 b/lib/org.kohsuke.stapler/poms/stapler-1.10.pom.md5
new file mode 100644
index 0000000000..e5f694f5bb
--- /dev/null
+++ b/lib/org.kohsuke.stapler/poms/stapler-1.10.pom.md5
@@ -0,0 +1 @@
+6a403564d86482a0a0e77338aa2d021d
\ No newline at end of file
diff --git a/lib/org.kohsuke.stapler/poms/stapler-1.10.pom.sha1 b/lib/org.kohsuke.stapler/poms/stapler-1.10.pom.sha1
new file mode 100644
index 0000000000..32a4aa5552
--- /dev/null
+++ b/lib/org.kohsuke.stapler/poms/stapler-1.10.pom.sha1
@@ -0,0 +1 @@
+1e636393906fc019a4a3132112daa18a8fb14145
\ No newline at end of file",removed highwater check from ReadKafkaP and adapted emitCooperatively,0
"diff --git a/src/main/java/org/junit/rules/ExpectedException.java b/src/main/java/org/junit/rules/ExpectedException.java
index 94865800a84a..d79848e03ecb 100644
--- a/src/main/java/org/junit/rules/ExpectedException.java
+++ b/src/main/java/org/junit/rules/ExpectedException.java
@@ -43,8 +43,8 @@
  * 	public void throwsIllegalArgumentExceptionWithMessageAndCause() {
  * 	    NullPointerException expectedCause = new NullPointerException();
  * 		thrown.expect(IllegalArgumentException.class);
- * 		thrown.expectMessage(&quot;happened?&quot;);
- * 	    thrown.expectCause(expectedCause);
+ * 		thrown.expectMessage(&quot;What&quot;);
+ * 		thrown.expectCause(is(expectedCause));
  * 		throw new IllegalArgumentException(&quot;What happened?&quot;, cause);
  * 	}
  * }
@@ -106,8 +106,12 @@ public void expectMessage(Matcher<String> matcher) {
 		expect(hasMessage(matcher));
 	}
 
-    public void expectCause(Throwable expectedCause) {
-        expect(causeEquals(expectedCause));
+    /**
+     * Adds {@code matcher} to the list of requirements for the cause of
+     * any thrown exception.
+     */
+    public void expectCause(Matcher<? extends Throwable> expectedCause) {
+        expect(hasCause(expectedCause));
     }
 
     private class ExpectedExceptionStatement extends Statement {
@@ -147,16 +151,16 @@ public boolean matchesSafely(Throwable item) {
 		};
 	}
 
-    private Matcher<Throwable> causeEquals(final Throwable expectedCause) {
+    private Matcher<Throwable> hasCause(final Matcher<? extends Throwable> causeMatcher) {
         return new TypeSafeMatcher<Throwable>() {
-            @Override
-            public boolean matchesSafely(Throwable item) {
-                return expectedCause == null ? item.getCause() == null : expectedCause.equals(item.getCause());
-            }
-
             public void describeTo(Description description) {
                 description.appendText(""exception with cause "");
-                description.appendText(expectedCause.toString());
+                description.appendDescriptionOf(causeMatcher);
+            }
+
+            @Override
+            public boolean matchesSafely(Throwable item) {
+                return causeMatcher.matches(item.getCause());
             }
         };
     }
diff --git a/src/test/java/org/junit/tests/experimental/rules/ExpectedExceptionRuleTest.java b/src/test/java/org/junit/tests/experimental/rules/ExpectedExceptionRuleTest.java
index b85a102dcf7f..bf592f6b1cc4 100644
--- a/src/test/java/org/junit/tests/experimental/rules/ExpectedExceptionRuleTest.java
+++ b/src/test/java/org/junit/tests/experimental/rules/ExpectedExceptionRuleTest.java
@@ -1,11 +1,6 @@
 package org.junit.tests.experimental.rules;
 
-import static org.hamcrest.CoreMatchers.any;
-import static org.junit.Assert.assertThat;
-import static org.junit.experimental.results.PrintableResult.testResult;
-import static org.junit.experimental.results.ResultMatchers.hasSingleFailureContaining;
-import static org.junit.experimental.results.ResultMatchers.isSuccessful;
-import static org.junit.matchers.JUnitMatchers.both;
+import org.hamcrest.CoreMatchers;
 import org.hamcrest.Description;
 import org.hamcrest.Matcher;
 import org.junit.Rule;
@@ -13,6 +8,14 @@
 import org.junit.internal.matchers.TypeSafeMatcher;
 import org.junit.rules.ExpectedException;
 
+import static org.hamcrest.CoreMatchers.any;
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+import static org.junit.experimental.results.PrintableResult.testResult;
+import static org.junit.experimental.results.ResultMatchers.hasSingleFailureContaining;
+import static org.junit.experimental.results.ResultMatchers.isSuccessful;
+import static org.junit.matchers.JUnitMatchers.both;
+
 public class ExpectedExceptionRuleTest {
 	public static class HasExpectedException {
 		@Rule
@@ -42,7 +45,7 @@ public void throwsIllegalArgumentExceptionWithCause() {
 
             thrown.expect(IllegalArgumentException.class);
             thrown.expectMessage(""Ack!"");
-            thrown.expectCause(expectedCause);
+            thrown.expectCause(is(expectedCause));
 
             throw new IllegalArgumentException(""Ack!"", expectedCause);
         }
@@ -51,7 +54,7 @@ public void throwsIllegalArgumentExceptionWithCause() {
         public void throwsIllegalArgumentExceptionWithCauseExplicitlyNull() {
             thrown.expect(IllegalArgumentException.class);
             thrown.expectMessage(""Ack!"");
-            thrown.expectCause(null);
+            thrown.expectCause(CoreMatchers.<Throwable>nullValue());
 
             throw new IllegalArgumentException(""Ack!"");
         }
@@ -260,7 +263,7 @@ public static class HasWrongCause {
 		public void throwWithCause() {
             thrown.expect(IllegalArgumentException.class);
 			thrown.expectMessage(""Ack!"");
-            thrown.expectCause(EXPECTED_CAUSE);
+            thrown.expectCause(is(EXPECTED_CAUSE));
 
 			throw new IllegalArgumentException(""Ack!"", new NullPointerException(""an unexpected cause""));
 		}",changed the expectedCause() method to accept a Matcher instead of an explicit Throwable and made some documentation changes,1
"diff --git a/example-core/example-raw-jdbc/src/main/java/org/apache/shardingsphere/example/core/jdbc/service/OrderServiceImpl.java b/example-core/example-raw-jdbc/src/main/java/org/apache/shardingsphere/example/core/jdbc/service/OrderServiceImpl.java
index 355b839c43e..c81cdc3f618 100755
--- a/example-core/example-raw-jdbc/src/main/java/org/apache/shardingsphere/example/core/jdbc/service/OrderServiceImpl.java
+++ b/example-core/example-raw-jdbc/src/main/java/org/apache/shardingsphere/example/core/jdbc/service/OrderServiceImpl.java
@@ -17,12 +17,17 @@
 
 package org.apache.shardingsphere.example.core.jdbc.service;
 
-import org.apache.shardingsphere.example.core.api.repository.OrderItemRepository;
 import org.apache.shardingsphere.example.core.api.entity.Order;
 import org.apache.shardingsphere.example.core.api.entity.OrderItem;
+import org.apache.shardingsphere.example.core.api.repository.AddressRepository;
+import org.apache.shardingsphere.example.core.api.repository.OrderItemRepository;
 import org.apache.shardingsphere.example.core.api.repository.OrderRepository;
 import org.apache.shardingsphere.example.core.api.service.ExampleService;
+import org.apache.shardingsphere.example.core.jdbc.repository.AddressRepositoryImpl;
+import org.apache.shardingsphere.example.core.jdbc.repository.OrderItemRepositoryImpl;
+import org.apache.shardingsphere.example.core.jdbc.repository.OrderRepositoryImpl;
 
+import javax.sql.DataSource;
 import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.List;
@@ -33,9 +38,18 @@ public final class OrderServiceImpl implements ExampleService {
     
     private OrderItemRepository orderItemRepository;
     
-    public OrderServiceImpl(final OrderRepository orderRepository, final OrderItemRepository orderItemRepository) {
+    private AddressRepository addressRepository;
+    
+    public OrderServiceImpl(final DataSource dataSource) {
+        this.orderRepository = new OrderRepositoryImpl(dataSource);
+        this.orderItemRepository = new OrderItemRepositoryImpl(dataSource);
+        this.addressRepository = new AddressRepositoryImpl(dataSource);
+    }
+    
+    public OrderServiceImpl(final OrderRepository orderRepository, final OrderItemRepository orderItemRepository, final AddressRepository addressRepository) {
         this.orderRepository = orderRepository;
         this.orderItemRepository = orderItemRepository;
+        this.addressRepository = addressRepository;
     }
     
     @Override
diff --git a/sharding-jdbc-example/orchestration-example/orchestration-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/orchestration/raw/jdbc/JavaConfigurationExample.java b/sharding-jdbc-example/orchestration-example/orchestration-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/orchestration/raw/jdbc/JavaConfigurationExample.java
index 1f0b57cdc4b..f045147ebde 100755
--- a/sharding-jdbc-example/orchestration-example/orchestration-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/orchestration/raw/jdbc/JavaConfigurationExample.java
+++ b/sharding-jdbc-example/orchestration-example/orchestration-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/orchestration/raw/jdbc/JavaConfigurationExample.java
@@ -17,11 +17,9 @@
 
 package org.apache.shardingsphere.example.orchestration.raw.jdbc;
 
-import org.apache.shardingsphere.example.core.jdbc.repository.OrderItemRepositoryImpl;
-import org.apache.shardingsphere.example.core.jdbc.repository.OrderRepositoryImpl;
-import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;
-import org.apache.shardingsphere.example.core.api.service.ExampleService;
 import org.apache.shardingsphere.example.config.ExampleConfiguration;
+import org.apache.shardingsphere.example.core.api.service.ExampleService;
+import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;
 import org.apache.shardingsphere.example.orchestration.raw.jdbc.config.RegistryCenterConfigurationUtil;
 import org.apache.shardingsphere.example.orchestration.raw.jdbc.config.cloud.CloudEncryptConfiguration;
 import org.apache.shardingsphere.example.orchestration.raw.jdbc.config.cloud.CloudMasterSlaveConfiguration;
@@ -88,7 +86,7 @@ public class JavaConfigurationExample {
     }
     
     private static ExampleService getExampleService(final DataSource dataSource) {
-        return new OrderServiceImpl(new OrderRepositoryImpl(dataSource), new OrderItemRepositoryImpl(dataSource));
+        return new OrderServiceImpl(dataSource);
     }
     
     private static void closeDataSource(final DataSource dataSource) throws Exception {
diff --git a/sharding-jdbc-example/orchestration-example/orchestration-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/orchestration/raw/jdbc/YamlConfigurationExample.java b/sharding-jdbc-example/orchestration-example/orchestration-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/orchestration/raw/jdbc/YamlConfigurationExample.java
index 94bf1f8a289..c58bb8d60db 100755
--- a/sharding-jdbc-example/orchestration-example/orchestration-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/orchestration/raw/jdbc/YamlConfigurationExample.java
+++ b/sharding-jdbc-example/orchestration-example/orchestration-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/orchestration/raw/jdbc/YamlConfigurationExample.java
@@ -17,10 +17,8 @@
 
 package org.apache.shardingsphere.example.orchestration.raw.jdbc;
 
-import org.apache.shardingsphere.example.core.jdbc.repository.OrderItemRepositoryImpl;
-import org.apache.shardingsphere.example.core.jdbc.repository.OrderRepositoryImpl;
-import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;
 import org.apache.shardingsphere.example.core.api.service.ExampleService;
+import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;
 import org.apache.shardingsphere.example.type.RegistryCenterType;
 import org.apache.shardingsphere.example.type.ShardingType;
 import org.apache.shardingsphere.shardingjdbc.jdbc.adapter.AbstractDataSourceAdapter;
@@ -81,7 +79,7 @@ public class YamlConfigurationExample {
     }
     
     private static ExampleService getExampleService(final DataSource dataSource) {
-        return new OrderServiceImpl(new OrderRepositoryImpl(dataSource), new OrderItemRepositoryImpl(dataSource));
+        return new OrderServiceImpl(dataSource);
     }
     
     private static void closeDataSource(final DataSource dataSource) throws Exception {
diff --git a/sharding-jdbc-example/other-feature-example/hint-example/hint-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/hint/raw/jdbc/YamlConfigurationExample.java b/sharding-jdbc-example/other-feature-example/hint-example/hint-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/hint/raw/jdbc/YamlConfigurationExample.java
index 34c15cb0399..aecd9c4c36a 100755
--- a/sharding-jdbc-example/other-feature-example/hint-example/hint-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/hint/raw/jdbc/YamlConfigurationExample.java
+++ b/sharding-jdbc-example/other-feature-example/hint-example/hint-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/hint/raw/jdbc/YamlConfigurationExample.java
@@ -17,11 +17,9 @@
 
 package org.apache.shardingsphere.example.hint.raw.jdbc;
 
-import org.apache.shardingsphere.example.core.jdbc.repository.OrderItemRepositoryImpl;
-import org.apache.shardingsphere.example.core.jdbc.repository.OrderRepositoryImpl;
-import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;
-import org.apache.shardingsphere.example.core.api.service.ExampleService;
 import org.apache.shardingsphere.api.hint.HintManager;
+import org.apache.shardingsphere.example.core.api.service.ExampleService;
+import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;
 import org.apache.shardingsphere.shardingjdbc.api.yaml.YamlMasterSlaveDataSourceFactory;
 import org.apache.shardingsphere.shardingjdbc.api.yaml.YamlShardingDataSourceFactory;
 
@@ -64,7 +62,7 @@ public class YamlConfigurationExample {
     }
     
     private static ExampleService getExampleService(final DataSource dataSource) {
-        return new OrderServiceImpl(new OrderRepositoryImpl(dataSource), new OrderItemRepositoryImpl(dataSource));
+        return new OrderServiceImpl(dataSource);
     }
     
     private static void processWithHintValue(final DataSource dataSource) throws SQLException {
diff --git a/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/JavaConfigurationExample.java b/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/JavaConfigurationExample.java
index c2d115cc156..1aa7e8507c8 100755
--- a/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/JavaConfigurationExample.java
+++ b/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/JavaConfigurationExample.java
@@ -17,10 +17,8 @@
 
 package org.apache.shardingsphere.example.sharding.raw.jdbc;
 
-import org.apache.shardingsphere.example.core.jdbc.repository.OrderItemRepositoryImpl;
-import org.apache.shardingsphere.example.core.jdbc.repository.OrderRepositoryImpl;
-import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;
 import org.apache.shardingsphere.example.core.api.service.ExampleService;
+import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;
 import org.apache.shardingsphere.example.sharding.raw.jdbc.factory.DataSourceFactory;
 import org.apache.shardingsphere.example.type.ShardingType;
 
@@ -47,6 +45,6 @@ public class JavaConfigurationExample {
     }
     
     private static ExampleService getExampleService(final DataSource dataSource) {
-        return new OrderServiceImpl(new OrderRepositoryImpl(dataSource), new OrderItemRepositoryImpl(dataSource));
+        return new OrderServiceImpl(dataSource);
     }
 }
diff --git a/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/JavaRangeConfigurationExample.java b/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/JavaRangeConfigurationExample.java
index fec4eb1f59d..201200db737 100755
--- a/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/JavaRangeConfigurationExample.java
+++ b/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/JavaRangeConfigurationExample.java
@@ -17,10 +17,11 @@
 
 package org.apache.shardingsphere.example.sharding.raw.jdbc;
 
+import org.apache.shardingsphere.example.core.api.service.ExampleService;
+import org.apache.shardingsphere.example.core.jdbc.repository.AddressRepositoryImpl;
 import org.apache.shardingsphere.example.core.jdbc.repository.OrderItemRepositoryImpl;
 import org.apache.shardingsphere.example.core.jdbc.repository.RangeOrderRepositoryImpl;
 import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;
-import org.apache.shardingsphere.example.core.api.service.ExampleService;
 import org.apache.shardingsphere.example.sharding.raw.jdbc.factory.RangeDataSourceFactory;
 import org.apache.shardingsphere.example.type.ShardingType;
 
@@ -47,6 +48,6 @@ public class JavaRangeConfigurationExample {
     }
     
     private static ExampleService getExampleService(final DataSource dataSource) {
-        return new OrderServiceImpl(new RangeOrderRepositoryImpl(dataSource), new OrderItemRepositoryImpl(dataSource));
+        return new OrderServiceImpl(new RangeOrderRepositoryImpl(dataSource), new OrderItemRepositoryImpl(dataSource), new AddressRepositoryImpl(dataSource));
     }
 }
diff --git a/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/YamlConfigurationExample.java b/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/YamlConfigurationExample.java
index d3fe064d04b..058cbc2913e 100755
--- a/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/YamlConfigurationExample.java
+++ b/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/YamlConfigurationExample.java
@@ -17,10 +17,8 @@
 
 package org.apache.shardingsphere.example.sharding.raw.jdbc;
 
-import org.apache.shardingsphere.example.core.jdbc.repository.OrderItemRepositoryImpl;
-import org.apache.shardingsphere.example.core.jdbc.repository.OrderRepositoryImpl;
-import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;
 import org.apache.shardingsphere.example.core.api.service.ExampleService;
+import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;
 import org.apache.shardingsphere.example.sharding.raw.jdbc.factory.YamlDataSourceFactory;
 import org.apache.shardingsphere.example.type.ShardingType;
 
@@ -48,6 +46,6 @@ public class YamlConfigurationExample {
     }
     
     private static ExampleService getExampleService(final DataSource dataSource) {
-        return new OrderServiceImpl(new OrderRepositoryImpl(dataSource), new OrderItemRepositoryImpl(dataSource));
+        return new OrderServiceImpl(dataSource);
     }
 }
diff --git a/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/YamlRangeConfigurationExample.java b/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/YamlRangeConfigurationExample.java
index 99a748513fa..601d3133d8a 100755
--- a/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/YamlRangeConfigurationExample.java
+++ b/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/YamlRangeConfigurationExample.java
@@ -17,10 +17,8 @@
 
 package org.apache.shardingsphere.example.sharding.raw.jdbc;
 
-import org.apache.shardingsphere.example.core.jdbc.repository.OrderItemRepositoryImpl;
-import org.apache.shardingsphere.example.core.jdbc.repository.RangeOrderRepositoryImpl;
-import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;
 import org.apache.shardingsphere.example.core.api.service.ExampleService;
+import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;
 import org.apache.shardingsphere.example.sharding.raw.jdbc.factory.YamlRangeDataSourceFactory;
 import org.apache.shardingsphere.example.type.ShardingType;
 
@@ -48,6 +46,6 @@ public class YamlRangeConfigurationExample {
     }
     
     private static ExampleService getExampleService(final DataSource dataSource) {
-        return new OrderServiceImpl(new RangeOrderRepositoryImpl(dataSource), new OrderItemRepositoryImpl(dataSource));
+        return new OrderServiceImpl(dataSource);
     }
 }
diff --git a/sharding-jdbc-example/transaction-example/transaction-2pc-xa-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/transaction/xa/raw/jdbc/YamlConfigurationTransactionExample.java b/sharding-jdbc-example/transaction-example/transaction-2pc-xa-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/transaction/xa/raw/jdbc/YamlConfigurationTransactionExample.java
index 6eef4068543..021710ed403 100755
--- a/sharding-jdbc-example/transaction-example/transaction-2pc-xa-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/transaction/xa/raw/jdbc/YamlConfigurationTransactionExample.java
+++ b/sharding-jdbc-example/transaction-example/transaction-2pc-xa-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/transaction/xa/raw/jdbc/YamlConfigurationTransactionExample.java
@@ -18,10 +18,9 @@
 package org.apache.shardingsphere.example.transaction.xa.raw.jdbc;
 
 import org.apache.shardingsphere.example.core.api.entity.Order;
-import org.apache.shardingsphere.example.core.jdbc.repository.OrderItemRepositoryImpl;
+import org.apache.shardingsphere.example.core.api.service.ExampleService;
 import org.apache.shardingsphere.example.core.jdbc.repository.OrderRepositoryImpl;
 import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;
-import org.apache.shardingsphere.example.core.api.service.ExampleService;
 import org.apache.shardingsphere.shardingjdbc.api.yaml.YamlShardingDataSourceFactory;
 import org.apache.shardingsphere.transaction.core.TransactionType;
 import org.apache.shardingsphere.transaction.core.TransactionTypeHolder;
@@ -53,7 +52,7 @@ public class YamlConfigurationTransactionExample {
     }
     
     private static ExampleService getExampleService(final DataSource dataSource) {
-        return new OrderServiceImpl(new OrderRepositoryImpl(dataSource), new OrderItemRepositoryImpl(dataSource));
+        return new OrderServiceImpl(dataSource);
     }
     
     private static void processXATransaction(final DataSource dataSource, final ExampleService exampleService) throws SQLException {
diff --git a/sharding-jdbc-example/transaction-example/transaction-base-seata-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/transaction/base/seata/raw/jdbc/YamlConfigurationTransactionExample.java b/sharding-jdbc-example/transaction-example/transaction-base-seata-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/transaction/base/seata/raw/jdbc/YamlConfigurationTransactionExample.java
index 88aadc90fa9..dfc40f07215 100755
--- a/sharding-jdbc-example/transaction-example/transaction-base-seata-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/transaction/base/seata/raw/jdbc/YamlConfigurationTransactionExample.java
+++ b/sharding-jdbc-example/transaction-example/transaction-base-seata-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/transaction/base/seata/raw/jdbc/YamlConfigurationTransactionExample.java
@@ -19,10 +19,10 @@ package org.apache.shardingsphere.example.transaction.base.seata.raw.jdbc;
 
 import org.apache.shardingsphere.example.core.api.entity.Order;
 import org.apache.shardingsphere.example.core.api.entity.OrderItem;
+import org.apache.shardingsphere.example.core.api.service.ExampleService;
 import org.apache.shardingsphere.example.core.jdbc.repository.OrderItemRepositoryImpl;
 import org.apache.shardingsphere.example.core.jdbc.repository.OrderRepositoryImpl;
 import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;
-import org.apache.shardingsphere.example.core.api.service.ExampleService;
 import org.apache.shardingsphere.shardingjdbc.api.yaml.YamlShardingDataSourceFactory;
 import org.apache.shardingsphere.transaction.core.TransactionType;
 import org.apache.shardingsphere.transaction.core.TransactionTypeHolder;
@@ -59,7 +59,7 @@ public class YamlConfigurationTransactionExample {
     }
     
     private static ExampleService getExampleService(final DataSource dataSource) {
-        return new OrderServiceImpl(new OrderRepositoryImpl(dataSource), new OrderItemRepositoryImpl(dataSource));
+        return new OrderServiceImpl(dataSource);
     }
     
     private static void processSeataTransaction(final DataSource dataSource, final ExampleService exampleService) throws SQLException {","Improve look of notification GUI , improve StartupQuery API",0
"diff --git a/src/tools/android/java/com/google/devtools/build/android/AndroidResourceClassWriter.java b/src/tools/android/java/com/google/devtools/build/android/AndroidResourceClassWriter.java
index 4456f208c7..c2bd937272 100644
--- a/src/tools/android/java/com/google/devtools/build/android/AndroidResourceClassWriter.java
+++ b/src/tools/android/java/com/google/devtools/build/android/AndroidResourceClassWriter.java
@@ -15,7 +15,6 @@ package com.google.devtools.build.android;
 
 import com.android.resources.ResourceType;
 import com.google.common.annotations.VisibleForTesting;
-import com.google.common.base.Optional;
 import com.google.devtools.build.android.AndroidFrameworkAttrIdProvider.AttrLookupException;
 import com.google.devtools.build.android.resources.FieldInitializers;
 import com.google.devtools.build.android.resources.RClassGenerator;
@@ -99,11 +98,6 @@ public class AndroidResourceClassWriter implements Flushable, AndroidResourceSym
     generator.addSimpleResource(dependencyInfo, type, name);
   }
 
-  @Override
-  public void acceptPublicResource(ResourceType type, String name, Optional<Integer> value) {
-    generator.addPublicResource(type, name, value);
-  }
-
   @Override
   public void acceptStyleableResource(
       DependencyInfo dependencyInfo,
diff --git a/src/tools/android/java/com/google/devtools/build/android/AndroidResourceSymbolSink.java b/src/tools/android/java/com/google/devtools/build/android/AndroidResourceSymbolSink.java
index bba4f323cb..0ceacf34c3 100644
--- a/src/tools/android/java/com/google/devtools/build/android/AndroidResourceSymbolSink.java
+++ b/src/tools/android/java/com/google/devtools/build/android/AndroidResourceSymbolSink.java
@@ -14,7 +14,6 @@
 package com.google.devtools.build.android;
 
 import com.android.resources.ResourceType;
-import com.google.common.base.Optional;
 import java.util.Map;
 
 /** Defines a sink for collecting data about resource symbols. */
@@ -29,13 +28,4 @@ public interface AndroidResourceSymbolSink {
       DependencyInfo dependencyInfo,
       FullyQualifiedName key,
       Map<FullyQualifiedName, /*inlineable=*/ Boolean> attrs);
-
-  /**
-   * Marks a resource as public.
-   *
-   * <p>This is orthogonal to the two methods above, and omits the 'DependencyInfo' parameter since
-   * a 'public' declaration must also have a matching definition (which triggers a call to one of
-   * the above methods).
-   */
-  void acceptPublicResource(ResourceType type, String name, Optional<Integer> value);
 }
diff --git a/src/tools/android/java/com/google/devtools/build/android/PlaceholderIdFieldInitializerBuilder.java b/src/tools/android/java/com/google/devtools/build/android/PlaceholderIdFieldInitializerBuilder.java
index f31e3a78cd..28ff6b5f39 100644
--- a/src/tools/android/java/com/google/devtools/build/android/PlaceholderIdFieldInitializerBuilder.java
+++ b/src/tools/android/java/com/google/devtools/build/android/PlaceholderIdFieldInitializerBuilder.java
@@ -14,7 +14,6 @@
 package com.google.devtools.build.android;
 
 import com.android.resources.ResourceType;
-import com.google.common.base.Optional;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
@@ -37,7 +36,6 @@ import java.util.Set;
 import java.util.SortedMap;
 import java.util.TreeMap;
 import java.util.TreeSet;
-import java.util.logging.Logger;
 
 /**
  * Generates {@link FieldInitializer}s placeholder unique ids. The real ids will be assigned when
@@ -110,45 +108,8 @@ class PlaceholderIdFieldInitializerBuilder {
 
   private static final int APP_PACKAGE_MASK = 0x7f000000;
   private static final int ATTR_TYPE_ID = 1;
-  private static final Logger logger =
-      Logger.getLogger(PlaceholderIdFieldInitializerBuilder.class.getName());
   private static final String NORMALIZED_ANDROID_PREFIX = ""android_"";
 
-  /**
-   * Assign any public ids to the given idBuilder.
-   *
-   * @param nameToId where to store the final name -> id mappings
-   * @param publicIds known public resources (can contain null values, if ID isn't reserved)
-   * @param typeId the type slot for the current resource type.
-   * @return the final set of assigned resource ids (includes those without apriori assignments).
-   */
-  private static Set<Integer> assignPublicIds(
-      Map<String, Integer> nameToId, SortedMap<String, Optional<Integer>> publicIds, int typeId) {
-    LinkedHashMap<Integer, String> assignedIds = new LinkedHashMap<>();
-    int prevId = getInitialIdForTypeId(typeId);
-    for (Map.Entry<String, Optional<Integer>> entry : publicIds.entrySet()) {
-      Optional<Integer> id = entry.getValue();
-      if (id.isPresent()) {
-        prevId = id.get();
-      } else {
-        prevId = nextFreeId(prevId + 1, assignedIds.keySet());
-      }
-      String previousMapping = assignedIds.put(prevId, entry.getKey());
-      if (previousMapping != null) {
-        logger.warning(
-            String.format(
-                ""Multiple entry names declared for public entry identifier 0x%x (%s and %s)"",
-                prevId, previousMapping, entry.getKey()));
-      }
-      nameToId.put(entry.getKey(), prevId);
-    }
-    return assignedIds.keySet();
-  }
-
-  private static int extractTypeId(int fullID) {
-    return (fullID & 0x00FF0000) >> 16;
-  }
-
   private static int getInitialIdForTypeId(int typeId) {
     return APP_PACKAGE_MASK | (typeId << 16);
   }
@@ -176,9 +137,6 @@ class PlaceholderIdFieldInitializerBuilder {
   private final Map<ResourceType, SortedMap<String, DependencyInfo>> innerClasses =
       new EnumMap<>(ResourceType.class);
 
-  private final Map<ResourceType, SortedMap<String, Optional<Integer>>> publicIds =
-      new EnumMap<>(ResourceType.class);
-
   private final Map<String, Map<String, /*inlineable=*/ Boolean>> styleableAttrs =
       new LinkedHashMap<>();
 
@@ -186,29 +144,6 @@ class PlaceholderIdFieldInitializerBuilder {
     this.androidIdProvider = androidIdProvider;
   }
 
-  public void addPublicResource(ResourceType type, String name, Optional<Integer> value) {
-    SortedMap<String, Optional<Integer>> publicMappings = publicIds.get(type);
-    if (publicMappings == null) {
-      publicMappings = new TreeMap<>();
-      publicIds.put(type, publicMappings);
-    }
-    Optional<Integer> oldValue = publicMappings.put(name, value);
-    // AAPT should issue an error, but do a bit of sanity checking here just in case.
-    if (oldValue != null && !oldValue.equals(value)) {
-      // Enforce a consistent ordering on the warning message.
-      Integer lower = oldValue.orNull();
-      Integer higher = value.orNull();
-      if (Ordering.natural().compare(oldValue.orNull(), value.orNull()) > 0) {
-        lower = higher;
-        higher = oldValue.orNull();
-      }
-      logger.warning(
-          String.format(
-              ""resource %s/%s has conflicting public identifiers (0x%x vs 0x%x)"",
-              type, name, lower, higher));
-    }
-  }
-
   public void addSimpleResource(DependencyInfo dependencyInfo, ResourceType type, String name) {
     innerClasses
         .computeIfAbsent(type, t -> new TreeMap<>())
@@ -255,9 +190,6 @@ class PlaceholderIdFieldInitializerBuilder {
     // After assigning public IDs, we count up monotonically, so we don't need to track additional
     // assignedIds to avoid collisions (use an ImmutableSet to ensure we don't add more).
     Set<Integer> assignedIds = ImmutableSet.of();
-    if (publicIds.containsKey(ResourceType.ATTR)) {
-      assignedIds = assignPublicIds(attrToId, publicIds.get(ResourceType.ATTR), attrTypeId);
-    }
     Set<String> inlineAttrs = new LinkedHashSet<>();
     Set<String> styleablesWithInlineAttrs = new TreeSet<>();
     for (Map.Entry<String, Map<String, Boolean>> styleableAttrEntry : styleableAttrs.entrySet()) {
@@ -291,65 +223,6 @@ class PlaceholderIdFieldInitializerBuilder {
     return ImmutableMap.copyOf(attrToId);
   }
 
-  private Map<ResourceType, Integer> assignTypeIdsForPublic() {
-    Map<ResourceType, Integer> allocatedTypeIds = new EnumMap<>(ResourceType.class);
-    if (publicIds.isEmpty()) {
-      return allocatedTypeIds;
-    }
-    // Keep track of the reverse mapping from Int -> Type for validation.
-    Map<Integer, ResourceType> assignedIds = new LinkedHashMap<>();
-    for (Map.Entry<ResourceType, SortedMap<String, Optional<Integer>>> publicTypeEntry :
-        publicIds.entrySet()) {
-      ResourceType currentType = publicTypeEntry.getKey();
-      Integer reservedTypeSlot = null;
-      String previousResource = null;
-      for (Map.Entry<String, Optional<Integer>> publicEntry :
-          publicTypeEntry.getValue().entrySet()) {
-        Optional<Integer> reservedId = publicEntry.getValue();
-        if (!reservedId.isPresent()) {
-          continue;
-        }
-        Integer typePortion = extractTypeId(reservedId.get());
-        if (reservedTypeSlot == null) {
-          reservedTypeSlot = typePortion;
-          previousResource = publicEntry.getKey();
-        } else {
-          if (!reservedTypeSlot.equals(typePortion)) {
-            logger.warning(
-                String.format(
-                    ""%s has conflicting type codes for its public identifiers (%s=%s vs %s=%s)"",
-                    currentType.getName(),
-                    previousResource,
-                    reservedTypeSlot,
-                    publicEntry.getKey(),
-                    typePortion));
-          }
-        }
-      }
-      if (currentType == ResourceType.ATTR
-          && reservedTypeSlot != null
-          && !reservedTypeSlot.equals(ATTR_TYPE_ID)) {
-        logger.warning(
-            String.format(
-                ""Cannot force ATTR to have type code other than 0x%02x (got 0x%02x from %s)"",
-                ATTR_TYPE_ID, reservedTypeSlot, previousResource));
-      }
-      if (reservedTypeSlot == null) {
-        logger.warning(String.format(""Invalid public resource of type %s - ignoring"", currentType));
-      } else {
-        allocatedTypeIds.put(currentType, reservedTypeSlot);
-        ResourceType alreadyAssigned = assignedIds.put(reservedTypeSlot, currentType);
-        if (alreadyAssigned != null) {
-          logger.warning(
-              String.format(
-                  ""Multiple type names declared for public type identifier 0x%x (%s vs %s)"",
-                  reservedTypeSlot, alreadyAssigned, currentType));
-        }
-      }
-    }
-    return allocatedTypeIds;
-  }
-
   public FieldInitializers build() throws AttrLookupException {
     Map<ResourceType, Collection<FieldInitializer>> initializers =
         new EnumMap<>(ResourceType.class);
@@ -366,7 +239,7 @@ class PlaceholderIdFieldInitializerBuilder {
         fields = getAttrInitializers(attrAssignments, sortedFields);
       } else {
         int typeId = typeIdMap.get(type);
-        fields = getResourceInitializers(type, typeId, sortedFields);
+        fields = getResourceInitializers(typeId, sortedFields);
       }
       // The maximum number of Java fields is 2^16.
       // See the JVM reference ""4.11. Limitations of the Java Virtual Machine.""
@@ -377,9 +250,7 @@ class PlaceholderIdFieldInitializerBuilder {
   }
 
   private Map<ResourceType, Integer> chooseTypeIds() {
-    // Go through public entries. Those may have forced certain type assignments, so take those
-    // into account first.
-    Map<ResourceType, Integer> allocatedTypeIds = assignTypeIdsForPublic();
+    Map<ResourceType, Integer> allocatedTypeIds = new EnumMap<>(ResourceType.class);
     Set<Integer> reservedTypeSlots = ImmutableSet.copyOf(allocatedTypeIds.values());
     // ATTR always takes up slot #1, even if it isn't present.
     allocatedTypeIds.put(ResourceType.ATTR, ATTR_TYPE_ID);
@@ -416,13 +287,10 @@ class PlaceholderIdFieldInitializerBuilder {
   }
 
   private ImmutableList<FieldInitializer> getResourceInitializers(
-      ResourceType type, int typeId, SortedMap<String, DependencyInfo> sortedFields) {
+      int typeId, SortedMap<String, DependencyInfo> sortedFields) {
     ImmutableList.Builder<FieldInitializer> initList = ImmutableList.builder();
     Map<String, Integer> publicNameToId = new LinkedHashMap<>();
     Set<Integer> assignedIds = ImmutableSet.of();
-    if (publicIds.containsKey(type)) {
-      assignedIds = assignPublicIds(publicNameToId, publicIds.get(type), typeId);
-    }
     int resourceIds = nextFreeId(getInitialIdForTypeId(typeId), assignedIds);
     for (Map.Entry<String, DependencyInfo> entry : sortedFields.entrySet()) {
       String field = entry.getKey();
diff --git a/src/tools/android/java/com/google/devtools/build/android/PlaceholderRTxtWriter.java b/src/tools/android/java/com/google/devtools/build/android/PlaceholderRTxtWriter.java
index e66a2e6052..744163380b 100644
--- a/src/tools/android/java/com/google/devtools/build/android/PlaceholderRTxtWriter.java
+++ b/src/tools/android/java/com/google/devtools/build/android/PlaceholderRTxtWriter.java
@@ -16,7 +16,6 @@ package com.google.devtools.build.android;
 import static java.nio.charset.StandardCharsets.UTF_8;
 
 import com.android.resources.ResourceType;
-import com.google.common.base.Optional;
 import java.io.BufferedWriter;
 import java.io.Flushable;
 import java.io.IOException;
@@ -70,9 +69,6 @@ final class PlaceholderRTxtWriter implements Flushable, AndroidResourceSymbolSin
     }
   }
 
-  @Override
-  public void acceptPublicResource(ResourceType type, String name, Optional<Integer> value) {}
-
   @Override
   public void flush() throws IOException {
     try (BufferedWriter writer = Files.newBufferedWriter(rTxtOut, UTF_8)) {
diff --git a/src/tools/android/java/com/google/devtools/build/android/xml/PublicXmlResourceValue.java b/src/tools/android/java/com/google/devtools/build/android/xml/PublicXmlResourceValue.java
index 00062cde13..6de515849f 100644
--- a/src/tools/android/java/com/google/devtools/build/android/xml/PublicXmlResourceValue.java
+++ b/src/tools/android/java/com/google/devtools/build/android/xml/PublicXmlResourceValue.java
@@ -92,11 +92,7 @@ public class PublicXmlResourceValue implements XmlResourceValue {
 
   @Override
   public void writeResourceToClass(
-      DependencyInfo dependencyInfo, FullyQualifiedName key, AndroidResourceSymbolSink sink) {
-    for (Map.Entry<ResourceType, Optional<Integer>> entry : typeToId.entrySet()) {
-      sink.acceptPublicResource(entry.getKey(), key.name(), entry.getValue());
-    }
-  }
+      DependencyInfo dependencyInfo, FullyQualifiedName key, AndroidResourceSymbolSink sink) {}
 
   @Override
   public int hashCode() {",Added pubsub entries ( pending review ) .,0
"diff --git a/searchcore/src/vespa/searchcore/proton/flushengine/flushengine.cpp b/searchcore/src/vespa/searchcore/proton/flushengine/flushengine.cpp
index 93e325a0f21..1b0ec0db073 100644
--- a/searchcore/src/vespa/searchcore/proton/flushengine/flushengine.cpp
+++ b/searchcore/src/vespa/searchcore/proton/flushengine/flushengine.cpp
@@ -306,7 +306,7 @@ FlushEngine::flushNextTarget(const vespalib::string & name)
         LOG(info, ""The same target %s out of %ld has been asked to flush again. ""
                   ""This might indicate flush logic flaw so I will wait 1s before doing it."",
                   name.c_str(), lst.first.size());
-        FastOS_Thread::Sleep(1000);
+        std::this_thread::sleep_for(100ms);
     }
     _executor.execute(std::make_unique<FlushTask>(initFlush(*ctx), *this, ctx));
     return ctx->getName();",Added some more grandfathering tests,0
"diff --git a/rest-api-spec/api/cluster.state.json b/rest-api-spec/api/cluster.state.json
index 97d68480b51..ff145d0b97f 100644
--- a/rest-api-spec/api/cluster.state.json
+++ b/rest-api-spec/api/cluster.state.json
@@ -16,7 +16,7 @@
         },
         ""metric"" : {
           ""type"" : ""list"",
-          ""options"" : [""_all"", ""blocks"", ""metadata"", ""nodes"", ""routing_table""],
+          ""options"" : [""_all"", ""blocks"", ""metadata"", ""nodes"", ""routing_table"", ""master_node"", ""version""],
           ""description"" : ""Limit the information returned to the specified metrics""
         }
       },",refresh tree after raw edit ( for example to show the new script tags when a buttonconditionaction is added to a DefineButton tag ),0
"diff --git a/website/index.html b/website/index.html
index 4c8e4a0034..fd273d8054 100644
--- a/website/index.html
+++ b/website/index.html
@@ -223,6 +223,7 @@ <h4>Logging</h4>
     .setLogLevel(RestAdapter.LogLevel.FULL)
     .setEndpoint(""https://api.github.com"")
     .build();</pre>
+            <p>This logging can be added or changed at any point in the <code>RestAdapter</code>'s lifecycle by calling the same <code>.setLogLevel()</code> method and supplying a different <code>LogLevel</code> value.</p>
 
             <h3 id=""download"">Download</h3>
             <p><a href=""http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.retrofit&a=retrofit&v=LATEST"" class=""dl version-href"">&darr; <span class=""version-tag"">Latest</span> JAR</a></p>",add paragraph clarifying logging,1
"diff --git a/okhttp/src/main/java/okhttp3/HttpUrl.java b/okhttp/src/main/java/okhttp3/HttpUrl.java
index 5a8c294976bb..24b4606a8912 100644
--- a/okhttp/src/main/java/okhttp3/HttpUrl.java
+++ b/okhttp/src/main/java/okhttp3/HttpUrl.java
@@ -239,7 +239,7 @@
  *   String attack = ""http://example.com/static/images/../../../../../etc/passwd"";
  *   System.out.println(new URL(attack).getPath());
  *   System.out.println(new URI(attack).getPath());
- *   System.out.println(HttpUrl.parse(attack).path());
+ *   System.out.println(HttpUrl.parse(attack).encodedPath());
  * }</pre>
  *
  * By canonicalizing the input paths, they are complicit in directory traversal attacks. Code that",Update Javadoc example,1
"diff --git a/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame.properties b/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame.properties
index 8f34909c5..63031015d 100644
--- a/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame.properties
+++ b/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame.properties
@@ -336,4 +336,4 @@ startup.selectopen = Click open icon on the top panel or drag SWF file to this w
 
 error.font.nocharacter = Selected source font does not contain character ""%char%"".
 
-warning.initializers = WARNING:\nStatic fields and consts are often initialized in initializers.\nEditing value here is usually not enough!
\ No newline at end of file
+warning.initializers = WARNING:\nStatic fields and consts are often initialized in initializers.\nEditing value here is usually not enough!
diff --git a/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame_hu.properties b/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame_hu.properties
index 8c6396a10..1456070c2 100644
--- a/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame_hu.properties
+++ b/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame_hu.properties
@@ -45,7 +45,7 @@ menu.settings.gotoMainClassOnStartup = Dokumentum oszt\u00e1ly kiemel\u00e9se in
 menu.help = S\u00fag\u00f3
 menu.help.checkupdates = Friss\u00edt\u00e9sek keres\u00e9se...
 menu.help.helpus = Seg\u00edts nek\u00fcnk!
-menu.help.homepage = Honlap megyit\u00e1sa
+menu.help.homepage = Honlap megnyit\u00e1sa
 menu.help.about = N\u00e9vjegy...
 
 contextmenu.remove = Elt\u00e1vol\u00edt\u00e1s
@@ -60,7 +60,7 @@ notavailonthisplatform = Ennek az objektumnak az el\u0151n\u00e9zete nem el\u00e
 swfpreview = SWF el\u0151n\u00e9zet
 swfpreview.internal = SWF el\u0151n\u00e9zet (Be\u00e9p\u00edtett n\u00e9z\u0151ke)
 
-parameters = Parameterek
+parameters = Param\u00e9terek
 
 rename.enternew = \u00cdrja be az \u00faj nevet:
 
@@ -87,7 +87,7 @@ message.confirm.on = BE szeretn\u00e9 kapcsolni?
 message.confirm.off = KI szeretn\u00e9 kapcsolni?
 message.confirm = Meger\u0151s\u00edt\u00e9s
 
-message.confirm.autodeobfuscate = Automatikus deobfuszk\u00e1l\u00e1s egy m\u00f3d az obfuszk\u00e1lt k\u00f3d visszaford\u00edt\u00e1s\u00e1ra.\r\nDeobfuszk\u00e1l\u00e1s lassabb visszaford\u00edt\u00e1st eredm\u00e9nyez, \u00e9s n\u00e9h\u00e1ny halott k\u00f3dr\u00e9szlet elt\u00e1vol\u00edt\u00e1sra ker\u00fclhet.\r\nHa a k\u00f3d nincs obfuzk\u00e1lva jobb kikapcsolni az automatikus deobfuszk\u00e1l\u00e1st.
+message.confirm.autodeobfuscate = Automatikus deobfuszk\u00e1l\u00e1s egy m\u00f3d az obfuszk\u00e1lt k\u00f3d visszaford\u00edt\u00e1s\u00e1ra.\r\nDeobfuszk\u00e1l\u00e1s lassabb visszaford\u00edt\u00e1st eredm\u00e9nyez, \u00e9s n\u00e9h\u00e1ny halott k\u00f3dr\u00e9szlet elt\u00e1vol\u00edt\u00e1sra ker\u00fclhet.\r\nHa a k\u00f3d nincs obfuszk\u00e1lva jobb kikapcsolni az automatikus deobfuszk\u00e1l\u00e1st.
 
 message.parallel = P\u00e1rhuzamos\u00edt\u00e1s
 message.trait.saved = Jellemz\u0151 sikeresen lementve
@@ -97,13 +97,13 @@ message.constant.new.string = Karakterl\u00e1nc ""%value%"" nem tal\u00e1lhat\u00f
 message.constant.new.string.title = Karakterl\u00e1nc hozz\u00e1ad\u00e1sa
 message.constant.new.integer = Eg\u00e9sz \u00e9rt\u00e9k ""%value%"" nem tal\u00e1lhat\u00f3 a konstans t\u00e1bl\u00e1ban. Szeretn\u00e9 hozz\u00e1adni?
 message.constant.new.integer.title = Eg\u00e9sz hozz\u00e1ad\u00e1sa
-message.constant.new.unsignedinteger = El\u0151jel n\u00e1lk\u00fcli eg\u00e9sz \u00e9rt\u00e9k ""%value%"" nem tal\u00e1lhat\u00f3 a konstans t\u00e1bl\u00e1ban. Szeretn\u00e9 hozz\u00e1adni?
+message.constant.new.unsignedinteger = El\u0151jel n\u00e9lk\u00fcli eg\u00e9sz \u00e9rt\u00e9k ""%value%"" nem tal\u00e1lhat\u00f3 a konstans t\u00e1bl\u00e1ban. Szeretn\u00e9 hozz\u00e1adni?
 message.constant.new.unsignedinteger.title = El\u0151jel n\u00e9lk\u00fcli eg\u00e9sz hozz\u00e1ad\u00e1sa
 message.constant.new.double = Lebeg\u0151pontos \u00e9rt\u00e9k ""%value%"" nem tal\u00e1lhat\u00f3 a konstans t\u00e1bl\u00e1ban. Szeretn\u00e9 hozz\u00e1adni?
 message.constant.new.double.title = Lebeg\u0151pontos \u00e9rt\u00e9k hozz\u00e1ad\u00e1sa
 
 work.buffering = Pufferel\u00e9s
-work.waitingfordissasembly = V\u00e1rakot\u00e1s a visszafejt\u00e9sre
+work.waitingfordissasembly = V\u00e1rakoz\u00e1s a visszafejt\u00e9sre
 work.gettinghilights = Kiemel\u00e9sek elk\u00e9sz\u00edt\u00e9se
 work.disassembling = Visszafejt\u00e9s
 work.exporting = Export\u00e1l\u00e1s
@@ -175,10 +175,10 @@ abc.detail.traitname = N\u00e9v:
 
 abc.detail.body.params.maxstack = Maximum stack:
 abc.detail.body.params.localregcount = Lok\u00e1lis regiszterek sz\u00e1ma:
-abc.detail.body.params.minscope = \u00c9rv\u00e9nyess\u00e1gi k\u00f6r minimum m\u00e9lys\u00e9ge:
-abc.detail.body.params.maxscope = \u00c9rv\u00e9nyess\u00e1gi k\u00f6r maximum m\u00e9lys\u00e9ge:
-abc.detail.body.params.autofill = Automtikus kit\u00f6lt\u00e9s k\u00f3d ment\u00e9sekor (GLOB\u00c1LIS BE\u00c1LL\u00cdT\u00c1S)
-abc.detail.body.params.autofill.experimental = ...K\u00cdS\u00c1RLETI
+abc.detail.body.params.minscope = \u00c9rv\u00e9nyess\u00e9gi k\u00f6r minimum m\u00e9lys\u00e9ge:
+abc.detail.body.params.maxscope = \u00c9rv\u00e9nyess\u00e9gi k\u00f6r maximum m\u00e9lys\u00e9ge:
+abc.detail.body.params.autofill = Automatikus kit\u00f6lt\u00e9s k\u00f3d ment\u00e9sekor (GLOB\u00c1LIS BE\u00c1LL\u00cdT\u00c1S)
+abc.detail.body.params.autofill.experimental = ...K\u00cdS\u00c9RLETI
 
 abc.detail.methodinfo.methodindex = Met\u00f3dus Index:
 abc.detail.methodinfo.parameters = Param\u00e9terek:
@@ -198,7 +198,7 @@ error.slotconst.typevalue = SlotConst t\u00edpus\u00e9rt\u00e9k Hiba
 
 
 message.autofill.failed = K\u00f3d statisztika nem el\u00e9rhet\u0151 az automatikus t\u00f6rzs param\u00e9terekhez.\r\nVegye ki a pip\u00e1t az az automatikus kit\u00f6lt\u00e9s mell\u0151l ennek az \u00fczenetnek az elket\u00fcl\u00e9s\u00e9hez.
-info.selecttrait = V\u00e1lasszon ki egy oszt\u00e1lyt \u00e9s kattintson egy jellemz\u0151re az Actionscript forr\u00e1sban a szerkeszt\u00e9shez.
+info.selecttrait = V\u00e1lasszon ki egy oszt\u00e1lyt \u00e9s kattintson egy jellemz\u0151re az ActionScript forr\u00e1sban a szerkeszt\u00e9shez.
 
 button.viewgraph = Gr\u00e1f mutat\u00e1sa
 button.viewhex = Hexa mutat\u00e1sa
@@ -206,7 +206,7 @@ button.viewhex = Hexa mutat\u00e1sa
 abc.traitslist.instanceinitializer = p\u00e9ld\u00e1ny inicializ\u00e1l\u00f3
 abc.traitslist.classinitializer = oszt\u00e1ly inicializ\u00e1l\u00f3
 
-action.edit.experimental = (Kis\u00e9rleti)
+action.edit.experimental = (K\u00eds\u00e9rleti)
 
 message.action.saved = K\u00f3d sikeresen lementve
 
@@ -264,13 +264,13 @@ FileChooser.fileAttrHeaderText = Tulajdons\u00e1gok
 FileChooser.openDialogTitleText = Megnyit\u00e1s
 FileChooser.directoryDescriptionText = K\u00f6nyvt\u00e1r
 FileChooser.directoryOpenButtonText = Megnyit\u00e1s
-FileChooser.directoryOpenButtonToolTipText = A kiv\u00e1laszott k\u00f6nyvt\u00e1r megnyit\u00e1sa
+FileChooser.directoryOpenButtonToolTipText = A kiv\u00e1lasztott k\u00f6nyvt\u00e1r megnyit\u00e1sa
 FileChooser.fileDescriptionText = \u00c1ltal\u00e1nos f\u00e1jl
 FileChooser.fileNameLabelText = F\u00e1jln\u00e9v:
 FileChooser.helpButtonText = S\u00fag\u00f3
 FileChooser.helpButtonToolTipText = FileChooser s\u00fag\u00f3
 FileChooser.newFolderAccessibleName = \u00daj mappa
-FileChooser.newFolderErrorText = Hiva az \u00faj mappa l\u00e9trehoz\u00e1sakor
+FileChooser.newFolderErrorText = Hiba az \u00faj mappa l\u00e9trehoz\u00e1sakor
 FileChooser.newFolderToolTipText = \u00daj mappa l\u00e9trehoz\u00e1sa
 FileChooser.other.newFolder = \u00dajMappa
 FileChooser.other.newFolder.subsequent = \u00dajMappa.{0}
@@ -322,4 +322,16 @@ button.abort = Megszak\u00edt
 button.retry = Ism\u00e9t
 button.ignore = Mell\u0151z
 
-font.source = Forr\u00e1s bet\u0171t\u00edpus:
\ No newline at end of file
+font.source = Forr\u00e1s bet\u0171t\u00edpus:
+
+#after version 1.6.7:
+menu.export = Export\u00e1l\u00e1s
+menu.general = \u00c1ltal\u00e1nos
+menu.language = Nyelv
+
+startup.welcometo = \u00dcdv\u00f6zli az
+startup.selectopen = A kezd\u00e9shez kattintson a megnyit\u00e1s ikonra a fels\u0151 panelen, vagy h\u00fazzon egy SWF f\u00e1jlt ebbe az ablakba.
+
+error.font.nocharacter = A kiv\u00e1lasztott forr\u00e1s bet\u0171t\u00edpus nem tartalmazza a ""%char%"" karaktert.
+
+warning.initializers = WARNING:\nA statikus mez\u0151k \u00e9s konstansok gyakram az initializerekben vannak inicializ\u00e1lva.\nAz \u00e9rt\u00e9k szerkeszt\u00e9se csak itt \u00e1ltal\u00e1ban nem elegend\u0151!
\ No newline at end of file
diff --git a/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame_ru.properties b/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame_ru.properties
index 033b48cc1..ee20fe515 100644
--- a/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame_ru.properties
+++ b/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame_ru.properties
@@ -313,4 +313,16 @@ button.abort = \u041e\u0442\u043c\u0435\u043d\u0438\u0442\u044c
 button.retry = \u041f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c
 button.ignore = \u0418\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c
 
-font.source = \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0437 \u0448\u0440\u0438\u0444\u0442\u0430:
\ No newline at end of file
+font.source = \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0437 \u0448\u0440\u0438\u0444\u0442\u0430:
+
+#after version 1.6.7:
+menu.export = \u042d\u043a\u0441\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c
+menu.general = \u041e\u0431\u0449\u0438\u0435
+menu.language = \u042f\u0437\u044b\u043a
+
+startup.welcometo = \u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c \u0432
+startup.selectopen = \u041d\u0430\u0436\u043c\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043a ""\u043e\u0442\u043a\u0440\u044b\u0442\u044c"" \u043d\u0430 \u0432\u0435\u0440\u0445\u043d\u0435\u0439 \u043f\u0430\u043d\u0435\u043b\u0438 \u0438\u043b\u0438 \u043f\u0435\u0440\u0435\u0442\u0430\u0449\u0438\u0442\u0435 SWF \u0444\u0430\u0439\u043b \u0432 \u044d\u0442\u043e \u043e\u043a\u043d\u043e.
+
+error.font.nocharacter = \u0421\u0438\u043c\u0432\u043e\u043b ""%char%"" \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0432 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u043c \u0448\u0440\u0438\u0444\u0442\u0435.
+
+warning.initializers = \u0412\u041d\u0418\u041c\u0410\u041d\u0418\u0415:\n\u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043b\u044f \u0438 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0437\u0430\u0447\u0430\u0441\u0442\u0443\u044e \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0432 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430\u0445.\n\u0421\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u0445 \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0437\u0434\u0435\u0441\u044c, \u043d\u043e \u0438 \u0442\u0430\u043c!
\ No newline at end of file",show all available languages in preferences using their own language .,1
"diff --git a/client/rest-high-level/src/test/java/org/elasticsearch/client/EqlIT.java b/client/rest-high-level/src/test/java/org/elasticsearch/client/EqlIT.java
index 10e75d88307..92ed0ea8307 100644
--- a/client/rest-high-level/src/test/java/org/elasticsearch/client/EqlIT.java
+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/EqlIT.java
@@ -21,6 +21,12 @@ package org.elasticsearch.client;
 
 import org.apache.http.client.methods.HttpPost;
 import org.apache.http.client.methods.HttpPut;
+import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;
+import org.elasticsearch.action.admin.indices.refresh.RefreshResponse;
+import org.elasticsearch.action.bulk.BulkRequest;
+import org.elasticsearch.action.bulk.BulkResponse;
+import org.elasticsearch.action.index.IndexRequest;
+import org.elasticsearch.action.support.WriteRequest;
 import org.elasticsearch.client.eql.EqlSearchRequest;
 import org.elasticsearch.client.eql.EqlSearchResponse;
 import org.elasticsearch.client.eql.EqlStatsRequest;
@@ -28,51 +34,132 @@ import org.elasticsearch.client.eql.EqlStatsResponse;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.time.DateUtils;
 import org.elasticsearch.index.IndexSettings;
+import org.elasticsearch.rest.RestStatus;
+import org.elasticsearch.search.SearchHit;
 import org.junit.Before;
 
+import java.io.IOException;
 import java.time.format.DateTimeFormatter;
+import java.util.Locale;
+import java.util.Map;
 
+import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
+import static org.hamcrest.Matchers.anyOf;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.greaterThan;
 
 public class EqlIT extends ESRestHighLevelClientTestCase {
 
+    private static final String INDEX_NAME = ""index"";
+    private static final int RECORD_COUNT = 40;
+    private static final int DIVIDER = 4;
+
     @Before
-    public void setupRemoteClusterConfig() throws Exception {
+    public void setup() throws Exception {
         setupRemoteClusterConfig(""local_cluster"");
+        setupData();
     }
 
-    public void testBasicSearch() throws Exception {
-        Request doc1 = new Request(HttpPut.METHOD_NAME, ""/index/_doc/1"");
-        doc1.setJsonEntity(""{\""event_subtype_full\"": \""already_running\"", "" +
-                ""\""event\"": {"" +
-                    ""\""category\"": \""process\"""" +
-                ""},"" +
-                ""\""event_type_full\"": \""process_event\"", "" +
-                ""\""opcode\"": 3,"" +
-                ""\""pid\"": 0,"" +
-                ""\""process_name\"": \""System Idle Process\"","" +
-                ""\""serial_event_id\"": 1,"" +
-                ""\""subtype\"": \""create\"","" +
-                ""\""@timestamp\"": 116444736000000000,"" +
-                ""\""unique_pid\"": 1}"");
-        client().performRequest(doc1);
-        client().performRequest(new Request(HttpPost.METHOD_NAME, ""/_refresh""));
+    private void setupData() throws IOException {
+        final BulkRequest bulkRequest = new BulkRequest();
+        bulkRequest.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE);
+        for (int i = 0; i < RECORD_COUNT; i++) {
+            final IndexRequest indexRequest = new IndexRequest(INDEX_NAME);
+            indexRequest.source(jsonBuilder()
+                    .startObject()
+                    .field(""event_subtype_full"", ""already_running"")
+                    .startObject(""event"")
+                    .field(""category"", ""process"")
+                    .endObject()
+                    .field(""event_type"", ""foo"")
+                    .field(""event_type_full"", ""process_event"")
+                    .field(""opcode"", ((i % DIVIDER) == 0) ? 1 : 0)
+                    .field(""pid"", ((i % DIVIDER) == 0) ? 100 : 0)
+                    .field(""process_name"", ""System Idle Process"")
+                    .field(""serial_event_id"", i + 1)
+                    .field(""subtype"", ""create"")
+                    .field(""@timestamp"", String.format(Locale.ROOT, ""2018-01-01T00:00:%02dZ"", i))
+                    .field(""unique_pid"", ((i % DIVIDER) == 0) ? 101 : 0)
+                    .endObject());
+            bulkRequest.add(indexRequest);
+        }
+        BulkResponse bulkResponse = highLevelClient().bulk(bulkRequest, RequestOptions.DEFAULT);
+        assertEquals(RestStatus.OK, bulkResponse.status());
+        assertFalse(bulkResponse.hasFailures());
 
-        EqlClient eql = highLevelClient().eql();
-        EqlSearchRequest request = new EqlSearchRequest(""index"", ""process where true"");
-        EqlSearchResponse response = execute(request, eql::search, eql::searchAsync);
+        RefreshResponse refreshResponse = highLevelClient().indices().refresh(new RefreshRequest(INDEX_NAME), RequestOptions.DEFAULT);
+        assertEquals(0, refreshResponse.getFailedShards());
+    }
+
+    private void assertResponse(EqlSearchResponse response, int count) {
         assertNotNull(response);
         assertFalse(response.isTimeout());
         assertNotNull(response.hits());
         assertNull(response.hits().sequences());
         assertNull(response.hits().counts());
         assertNotNull(response.hits().events());
-        assertThat(response.hits().events().size(), equalTo(1));
+        assertThat(response.hits().events().size(), equalTo(count));
+    }
+
+    public void testBasicSearch() throws Exception {
+        EqlClient eql = highLevelClient().eql();
+        EqlSearchRequest request = new EqlSearchRequest(""index"", ""process where true"");
+        assertResponse(execute(request, eql::search, eql::searchAsync), RECORD_COUNT);
+    }
+
+    @SuppressWarnings(""unchecked"")
+    public void testSimpleConditionSearch() throws Exception {
+        EqlClient eql = highLevelClient().eql();
+
+        // test simple conditional
+        EqlSearchRequest request = new EqlSearchRequest(""index"", ""foo where pid > 0"");
+
+        // test with non-default event.category mapping
+        request.eventCategoryField(""event_type"");
+
+        EqlSearchResponse response = execute(request, eql::search, eql::searchAsync);
+        assertResponse(response, RECORD_COUNT / DIVIDER);
+
+        // test the content of the hits
+        for (SearchHit hit : response.hits().events()) {
+            final Map<String, Object> source = hit.getSourceAsMap();
+
+            final Map<String, Object> event = (Map<String, Object>) source.get(""event"");
+            assertThat(event.get(""category""), equalTo(""process""));
+            assertThat(source.get(""event_type""), equalTo(""foo""));
+            assertThat(source.get(""event_type_full""), equalTo(""process_event""));
+            assertThat(source.get(""opcode""), equalTo(1));
+            assertThat(source.get(""pid""), equalTo(100));
+            assertThat(source.get(""process_name""), equalTo(""System Idle Process""));
+            assertThat((int) source.get(""serial_event_id""), greaterThan(0));
+            assertThat(source.get(""unique_pid""), equalTo(101));
+        }
+    }
+
+    @SuppressWarnings(""unchecked"")
+    public void testEqualsInFilterConditionSearch() throws Exception {
+        EqlClient eql = highLevelClient().eql();
+
+        EqlSearchRequest request = new EqlSearchRequest(""index"",
+                ""process where event_type_full = \""process_event\"" and serial_event_id in (1,3,5)"");
+
+        EqlSearchResponse response = execute(request, eql::search, eql::searchAsync);
+        assertResponse(response, 3);
+
+        // test the content of the hits
+        for (SearchHit hit : response.hits().events()) {
+            final Map<String, Object> source = hit.getSourceAsMap();
+
+            final Map<String, Object> event = (Map<String, Object>) source.get(""event"");
+            assertThat(event.get(""category""), equalTo(""process""));
+            assertThat(source.get(""serial_event_id""), anyOf(equalTo(1), equalTo(3), equalTo(5)));
+        }
     }
 
     public void testLargeMapping() throws Exception {
-        Request doc1 = new Request(HttpPut.METHOD_NAME, ""/index/_doc/1"");
+        final String index = ""large_mapping_index"";
+
+        Request doc1 = new Request(HttpPut.METHOD_NAME, ""/"" + index + ""/_doc/1"");
         // use more exact fields (dates) than the default to verify that retrieval works and requesting doc values
         // would fail
         int PASS_DEFAULT_DOC_VALUES = IndexSettings.MAX_DOCVALUE_FIELDS_SEARCH_SETTING.get(Settings.EMPTY) + 50;
@@ -94,7 +181,7 @@ public class EqlIT extends ESRestHighLevelClientTestCase {
 
 
         EqlClient eql = highLevelClient().eql();
-        EqlSearchRequest request = new EqlSearchRequest(""index"", ""process where true"");
+        EqlSearchRequest request = new EqlSearchRequest(index, ""process where true"");
         EqlSearchResponse response = execute(request, eql::search, eql::searchAsync);
         assertNotNull(response);
         assertNotNull(response.hits());",Add Benchmark to partial dejetification .,0
"diff --git a/src/site/xhtml/junit-lambda-contributors.xhtml b/src/site/xhtml/junit-lambda-contributors.xhtml
index bbea36b0897e..826a6fc6dd5c 100644
--- a/src/site/xhtml/junit-lambda-contributors.xhtml
+++ b/src/site/xhtml/junit-lambda-contributors.xhtml
@@ -152,6 +152,9 @@
       <li>Nacho Cougil</li>
       <li>Martin SchrÃÂ¶der</li>
       <li>Thorsten Brunzendorf</li>
+      <li><a href=""https://hubesco.com/"">Paolo Escobar</a></li>
+      <li>Brad Milne</li>
+      <li>Bill Chen</li>
 		</ul>
   </body>
 </html>",Added 3 names and a link,1
"diff --git a/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java b/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java
index 70a3dfc4cfd5..1192b7ec5101 100644
--- a/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java
+++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java
@@ -2,12 +2,16 @@
 
 import java.io.IOException;
 import javax.annotation.Nullable;
+import okio.Buffer;
 import okio.BufferedSource;
 import okio.ByteString;
 
 public final class ServerSentEventReader {
   private static final ByteString CRLF = ByteString.encodeUtf8(""\r\n"");
-  private static final byte COLON = (byte) ':';
+  private static final ByteString DATA = ByteString.encodeUtf8(""data"");
+  private static final ByteString ID = ByteString.encodeUtf8(""id"");
+  private static final ByteString EVENT = ByteString.encodeUtf8(""event"");
+  private static final ByteString RETRY = ByteString.encodeUtf8(""retry"");
 
   public interface Callback {
     void onEvent(@Nullable String id, @Nullable String type, String data);
@@ -36,96 +40,119 @@ public ServerSentEventReader(BufferedSource source, Callback callback) {
   boolean processNextEvent() throws IOException {
     String id = lastId;
     String type = null;
-    StringBuilder data = null;
+    Buffer data = new Buffer();
 
     while (true) {
-      long crlf = source.indexOfElement(CRLF);
-      if (crlf == -1L) {
+      long lineEnd = source.indexOfElement(CRLF);
+      if (lineEnd == -1L) {
         return false;
       }
 
-      if (crlf == 0L) {
-        skipCrAndOrLf();
+      switch (source.buffer().getByte(0)) {
+        case '\r':
+        case '\n':
+          completeEvent(id, type, data);
+          return true;
 
-        if (data != null) {
-          lastId = id;
-          callback.onEvent(id, type, data.toString());
-        }
-
-        return true;
-      }
-
-      long colon = source.indexOf(COLON, 0, crlf);
-      if (colon == 0L) {
-        // Comment line. Skip in its entirety.
-        source.skip(crlf);
-        skipCrAndOrLf();
-        continue;
-      }
-
-      String fieldName;
-      String fieldValue;
-      if (colon == -1L) {
-        fieldName = source.readUtf8(crlf);
-        fieldValue = """";
-      } else {
-        fieldName = source.readUtf8(colon);
-        crlf -= colon;
-
-        source.skip(1L);
-        crlf--;
-
-        // No need to request(1) before checking for the optional space because we've buffered
-        // enough to see the line ending which is at worst the next byte.
-        if (source.buffer().getByte(0) == ' ') {
-          source.skip(1L);
-          crlf--;
-        }
-
-        fieldValue = source.readUtf8(crlf);
-      }
-      skipCrAndOrLf();
-
-      switch (fieldName) {
-        case ""data"":
-          if (data == null) {
-            data = new StringBuilder();
-          } else {
-            data.append('\n');
+        case 'd':
+          if (isKey(DATA)) {
+            parseData(data, lineEnd);
+            continue;
           }
-          data.append(fieldValue);
           break;
 
-        case ""id"":
-          if (fieldValue.isEmpty()) {
-            fieldValue = null;
+        case 'e':
+          if (isKey(EVENT)) {
+            type = parseEvent(lineEnd);
+            continue;
           }
-          id = fieldValue;
           break;
 
-        case ""event"":
-          if (fieldValue.isEmpty()) {
-            fieldValue = null;
+        case 'i':
+          if (isKey(ID)) {
+            id = parseId(lineEnd);
+            continue;
           }
-          type = fieldValue;
           break;
 
-        case ""retry"":
-          long timeMs;
-          try {
-            timeMs = Long.parseLong(fieldValue);
-          } catch (NumberFormatException ignored) {
-            break;
+        case 'r':
+          if (isKey(RETRY)) {
+            parseRetry(lineEnd);
+            continue;
           }
-          callback.onRetryChange(timeMs);
-          break;
-
-        default:
-          source.skip(crlf);
-          skipCrAndOrLf();
           break;
       }
+
+      source.skip(lineEnd);
+      skipCrAndOrLf();
+    }
+  }
+
+  private void completeEvent(String id, String type, Buffer data) throws IOException {
+    skipCrAndOrLf();
+
+    if (data.size() != 0L) {
+      lastId = id;
+      data.skip(1L); // Leading newline.
+      callback.onEvent(id, type, data.readUtf8());
+    }
+  }
+
+  private void parseData(Buffer data, long end) throws IOException {
+    data.writeByte('\n');
+    end -= skipNameAndDivider(4L);
+    source.readFully(data, end);
+    skipCrAndOrLf();
+  }
+
+  private String parseEvent(long end) throws IOException {
+    String type = null;
+    end -= skipNameAndDivider(5L);
+    if (end != 0L) {
+      type = source.readUtf8(end);
     }
+    skipCrAndOrLf();
+    return type;
+  }
+
+  private String parseId(long end) throws IOException {
+    String id;
+    end -= skipNameAndDivider(2L);
+    if (end != 0L) {
+      id = source.readUtf8(end);
+    } else {
+      id = null;
+    }
+    skipCrAndOrLf();
+    return id;
+  }
+
+  private void parseRetry(long end) throws IOException {
+    end -= skipNameAndDivider(5L);
+    String retryString = source.readUtf8(end);
+    long retryMs = -1L;
+    try {
+      retryMs = Long.parseLong(retryString);
+    } catch (NumberFormatException ignored) {
+    }
+    if (retryMs != -1L) {
+      callback.onRetryChange(retryMs);
+    }
+    skipCrAndOrLf();
+  }
+
+  /**
+   * Returns true if the first bytes of {@link #source} are {@code key} followed by a colon or
+   * a newline.
+   */
+  private boolean isKey(ByteString key) throws IOException {
+    if (source.rangeEquals(0, key)) {
+      byte nextByte = source.buffer().getByte(key.size());
+      return nextByte == ':'
+          || nextByte == '\r'
+          || nextByte == '\n';
+    }
+    return false;
   }
 
   /** Consumes {@code \r}, {@code \r\n}, or {@code \n} from {@link #source}. */
@@ -136,4 +163,24 @@ private void skipCrAndOrLf() throws IOException {
       source.skip(1);
     }
   }
+
+  /**
+   * Consumes the field name of the specified length and the optional colon and its optional
+   * trailing space. Returns the number of bytes skipped.
+   */
+  private long skipNameAndDivider(long length) throws IOException {
+    source.skip(length);
+
+    if (source.buffer().getByte(0) == ':') {
+      source.skip(1L);
+      length++;
+
+      if (source.buffer().getByte(0) == ' ') {
+        source.skip(1);
+        length++;
+      }
+    }
+
+    return length;
+  }
 }","Skip UTF-8 decode of keys, defer UTF-8 decode of data",0
"diff --git a/appcompat/api/1.1.0-alpha03.txt b/appcompat/api/1.1.0-alpha03.txt
index 93a4ae1bbf9..d387b2216e3 100644
--- a/appcompat/api/1.1.0-alpha03.txt
+++ b/appcompat/api/1.1.0-alpha03.txt
@@ -289,7 +289,9 @@ package androidx.appcompat.app {
     field public static final int FEATURE_ACTION_MODE_OVERLAY = 10; // 0xa
     field public static final int FEATURE_SUPPORT_ACTION_BAR = 108; // 0x6c
     field public static final int FEATURE_SUPPORT_ACTION_BAR_OVERLAY = 109; // 0x6d
-    field public static final int MODE_NIGHT_AUTO = 0; // 0x0
+    field @Deprecated public static final int MODE_NIGHT_AUTO = 0; // 0x0
+    field public static final int MODE_NIGHT_AUTO_BATTERY = 3; // 0x3
+    field @Deprecated public static final int MODE_NIGHT_AUTO_TIME = 0; // 0x0
     field public static final int MODE_NIGHT_FOLLOW_SYSTEM = -1; // 0xffffffff
     field public static final int MODE_NIGHT_NO = 1; // 0x1
     field public static final int MODE_NIGHT_YES = 2; // 0x2
diff --git a/appcompat/api/current.txt b/appcompat/api/current.txt
index 93a4ae1bbf9..d387b2216e3 100644
--- a/appcompat/api/current.txt
+++ b/appcompat/api/current.txt
@@ -289,7 +289,9 @@ package androidx.appcompat.app {
     field public static final int FEATURE_ACTION_MODE_OVERLAY = 10; // 0xa
     field public static final int FEATURE_SUPPORT_ACTION_BAR = 108; // 0x6c
     field public static final int FEATURE_SUPPORT_ACTION_BAR_OVERLAY = 109; // 0x6d
-    field public static final int MODE_NIGHT_AUTO = 0; // 0x0
+    field @Deprecated public static final int MODE_NIGHT_AUTO = 0; // 0x0
+    field public static final int MODE_NIGHT_AUTO_BATTERY = 3; // 0x3
+    field @Deprecated public static final int MODE_NIGHT_AUTO_TIME = 0; // 0x0
     field public static final int MODE_NIGHT_FOLLOW_SYSTEM = -1; // 0xffffffff
     field public static final int MODE_NIGHT_NO = 1; // 0x1
     field public static final int MODE_NIGHT_YES = 2; // 0x2
diff --git a/appcompat/src/androidTest/java/androidx/appcompat/app/NightModeTestCase.java b/appcompat/src/androidTest/java/androidx/appcompat/app/NightModeTestCase.java
index e16949d5f8a..a536d3097a7 100644
--- a/appcompat/src/androidTest/java/androidx/appcompat/app/NightModeTestCase.java
+++ b/appcompat/src/androidTest/java/androidx/appcompat/app/NightModeTestCase.java
@@ -102,7 +102,7 @@ public class NightModeTestCase {
     }
 
     @Test
-    public void testNightModeAutoRecreatesOnTimeChange() throws Throwable {
+    public void testNightModeAutoTimeRecreatesOnTimeChange() throws Throwable {
         // Create a fake TwilightManager and set it as the app instance
         final FakeTwilightManager twilightManager = new FakeTwilightManager();
         TwilightManager.setInstance(twilightManager);
@@ -113,8 +113,8 @@ public class NightModeTestCase {
         onView(withId(R.id.text_night_mode)).check(matches(withText(STRING_DAY)));
 
         // Set MODE_NIGHT_AUTO so that we will change to night mode automatically
-        final NightModeActivity newActivity =
-                setLocalNightModeAndWaitForRecreate(activity, AppCompatDelegate.MODE_NIGHT_AUTO);
+        final NightModeActivity newActivity = setLocalNightModeAndWaitForRecreate(activity,
+                        AppCompatDelegate.MODE_NIGHT_AUTO_TIME);
         final AppCompatDelegateImpl newDelegate =
                 (AppCompatDelegateImpl) newActivity.getDelegate();
 
@@ -123,13 +123,13 @@ public class NightModeTestCase {
             @Override
             public void run() {
                 twilightManager.setIsNight(true);
-                newDelegate.getAutoNightModeManager().dispatchTimeChanged();
+                newDelegate.getAutoTimeNightModeManager().onChange();
             }
         });
 
         RecreatedAppCompatActivity.sResumed = new CountDownLatch(1);
         assertTrue(RecreatedAppCompatActivity.sResumed.await(1, TimeUnit.SECONDS));
-        // At this point recreate that has been triggered by dispatchTimeChanged call
+        // At this point recreate that has been triggered by onChange call
         // has completed
 
         // Check that the text has changed, signifying that night resources are being used
@@ -137,7 +137,7 @@ public class NightModeTestCase {
     }
 
     @Test
-    public void testNightModeAutoRecreatesOnResume() throws Throwable {
+    public void testNightModeAutoTimeRecreatesOnResume() throws Throwable {
         // Create a fake TwilightManager and set it as the app instance
         final FakeTwilightManager twilightManager = new FakeTwilightManager();
         TwilightManager.setInstance(twilightManager);
@@ -145,7 +145,8 @@ public class NightModeTestCase {
         NightModeActivity activity = mActivityTestRule.getActivity();
 
         // Set MODE_NIGHT_AUTO so that we will change to night mode automatically
-        activity = setLocalNightModeAndWaitForRecreate(activity, AppCompatDelegate.MODE_NIGHT_AUTO);
+        activity = setLocalNightModeAndWaitForRecreate(activity,
+                AppCompatDelegate.MODE_NIGHT_AUTO_TIME);
         // Verify that we're currently in day mode
         onView(withId(R.id.text_night_mode)).check(matches(withText(STRING_DAY)));
 
diff --git a/appcompat/src/main/java/androidx/appcompat/app/AppCompatDelegate.java b/appcompat/src/main/java/androidx/appcompat/app/AppCompatDelegate.java
index 8dd19486361..1fc56d27ca6 100644
--- a/appcompat/src/main/java/androidx/appcompat/app/AppCompatDelegate.java
+++ b/appcompat/src/main/java/androidx/appcompat/app/AppCompatDelegate.java
@@ -91,39 +91,60 @@ public abstract class AppCompatDelegate {
     static final String TAG = ""AppCompatDelegate"";
 
     /**
-     * Mode which means to not use night mode, and therefore prefer {@code notnight} qualified
-     * resources where available, regardless of the time.
-     *
-     * @see #setLocalNightMode(int)
-     */
-    public static final int MODE_NIGHT_NO = 1;
-
-    /**
-     * Mode which means to always use night mode, and therefore prefer {@code night} qualified
-     * resources where available, regardless of the time.
+     * Mode which uses the system's night mode setting to determine if it is night or not.
      *
      * @see #setLocalNightMode(int)
      */
-    public static final int MODE_NIGHT_YES = 2;
+    public static final int MODE_NIGHT_FOLLOW_SYSTEM = -1;
 
     /**
-     * Mode which means to use night mode when it is determined that it is night or not.
+     * Night mode which switches between dark and light mode depending on the time of day
+     * (dark at night, light in the day).
      *
      * <p>The calculation used to determine whether it is night or not makes use of the location
      * APIs (if this app has the necessary permissions). This allows us to generate accurate
      * sunrise and sunset times. If this app does not have permission to access the location APIs
      * then we use hardcoded times which will be less accurate.</p>
      *
+     * @deprecated Automatic switching of dark/light based on the current time is deprecated.
+     * Considering using an explicit setting, or {@link #MODE_NIGHT_AUTO_BATTERY}.
+     */
+    @Deprecated
+    public static final int MODE_NIGHT_AUTO_TIME = 0;
+
+    /**
+     * @deprecated Use {@link AppCompatDelegate#MODE_NIGHT_AUTO_TIME} instead
+     */
+    @Deprecated
+    public static final int MODE_NIGHT_AUTO = MODE_NIGHT_AUTO_TIME;
+
+    /**
+     * Night mode which uses always uses a light mode, enabling {@code notnight} qualified
+     * resources regardless of the time.
+     *
      * @see #setLocalNightMode(int)
      */
-    public static final int MODE_NIGHT_AUTO = 0;
+    public static final int MODE_NIGHT_NO = 1;
 
     /**
-     * Mode which uses the system's night mode setting to determine if it is night or not.
+     * Night mode which uses always uses a dark mode, enabling {@code night} qualified
+     * resources regardless of the time.
      *
      * @see #setLocalNightMode(int)
      */
-    public static final int MODE_NIGHT_FOLLOW_SYSTEM = -1;
+    public static final int MODE_NIGHT_YES = 2;
+
+    /**
+     * Night mode which uses a dark mode when the system's 'Battery Saver' feature is enabled,
+     * otherwise it uses a 'light mode'. This mode can help the device to decrease power usage,
+     * depending on the display technology in the device.
+     *
+     * <em>Please note: this mode should only be used when running on devices which do not
+     * provide a similar device-wide setting.</em>
+     *
+     * @see #setLocalNightMode(int)
+     */
+    public static final int MODE_NIGHT_AUTO_BATTERY = 3;
 
     static final int MODE_NIGHT_UNSPECIFIED = -100;
 
@@ -132,8 +153,8 @@ public abstract class AppCompatDelegate {
 
     /** @hide */
     @RestrictTo(LIBRARY_GROUP)
-    @IntDef({MODE_NIGHT_NO, MODE_NIGHT_YES, MODE_NIGHT_AUTO, MODE_NIGHT_FOLLOW_SYSTEM,
-            MODE_NIGHT_UNSPECIFIED})
+    @IntDef({MODE_NIGHT_NO, MODE_NIGHT_YES, MODE_NIGHT_AUTO_TIME, MODE_NIGHT_FOLLOW_SYSTEM,
+            MODE_NIGHT_UNSPECIFIED, MODE_NIGHT_AUTO_BATTERY})
     @Retention(RetentionPolicy.SOURCE)
     public @interface NightMode {}
 
@@ -441,8 +462,8 @@ public abstract class AppCompatDelegate {
      * automatically recreated or its {@link Configuration} updated. Which one depends on how
      * the component is setup (via {@code android:configChanges} or similar).</p>
      *
-     * <p>You can notified when the night changes by overriding the
-     * {@link AppCompatCallback#onNightModeChanged(int)} method.</p>
+     * <p>You can be notified when the night changes by overriding the
+     * {@link AppCompatActivity#onNightModeChanged(int)} method.</p>
      *
      * @see #setDefaultNightMode(int)
      * @see #setLocalNightMode(int)
@@ -475,10 +496,11 @@ public abstract class AppCompatDelegate {
      */
     public static void setDefaultNightMode(@NightMode int mode) {
         switch (mode) {
-            case MODE_NIGHT_AUTO:
             case MODE_NIGHT_NO:
             case MODE_NIGHT_YES:
             case MODE_NIGHT_FOLLOW_SYSTEM:
+            case MODE_NIGHT_AUTO_TIME:
+            case MODE_NIGHT_AUTO_BATTERY:
                 sDefaultNightMode = mode;
                 break;
             default:
diff --git a/appcompat/src/main/java/androidx/appcompat/app/AppCompatDelegateImpl.java b/appcompat/src/main/java/androidx/appcompat/app/AppCompatDelegateImpl.java
index 88d967cd381..5f91b46b8b2 100644
--- a/appcompat/src/main/java/androidx/appcompat/app/AppCompatDelegateImpl.java
+++ b/appcompat/src/main/java/androidx/appcompat/app/AppCompatDelegateImpl.java
@@ -20,6 +20,8 @@ import static android.view.ViewGroup.LayoutParams.MATCH_PARENT;
 import static android.view.ViewGroup.LayoutParams.WRAP_CONTENT;
 import static android.view.Window.FEATURE_OPTIONS_PANEL;
 
+import static androidx.annotation.RestrictTo.Scope.LIBRARY;
+
 import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.app.Dialog;
@@ -42,6 +44,7 @@ import android.os.Build;
 import android.os.Bundle;
 import android.os.Parcel;
 import android.os.Parcelable;
+import android.os.PowerManager;
 import android.text.TextUtils;
 import android.util.AndroidRuntimeException;
 import android.util.AttributeSet;
@@ -71,6 +74,7 @@ import androidx.annotation.IdRes;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.annotation.RequiresApi;
+import androidx.annotation.RestrictTo;
 import androidx.annotation.StyleRes;
 import androidx.annotation.VisibleForTesting;
 import androidx.appcompat.R;
@@ -221,7 +225,8 @@ class AppCompatDelegateImpl extends AppCompatDelegate
     private boolean mActivityHandlesUiMode;
     private boolean mActivityHandlesUiModeChecked;
 
-    private AutoNightModeManager mAutoNightModeManager;
+    private AutoNightModeManager mAutoTimeNightModeManager;
+    private AutoNightModeManager mAutoBatteryNightModeManager;
 
     boolean mInvalidatePanelMenuPosted;
     int mInvalidatePanelMenuFeatures;
@@ -448,8 +453,11 @@ class AppCompatDelegateImpl extends AppCompatDelegate
         }
 
         // Make sure we clean up any receivers setup for AUTO mode
-        if (mAutoNightModeManager != null) {
-            mAutoNightModeManager.cleanup();
+        if (mAutoTimeNightModeManager != null) {
+            mAutoTimeNightModeManager.cleanup();
+        }
+        if (mAutoBatteryNightModeManager != null) {
+            mAutoBatteryNightModeManager.cleanup();
         }
     }
 
@@ -517,8 +525,11 @@ class AppCompatDelegateImpl extends AppCompatDelegate
         }
 
         // Make sure we clean up any receivers setup for AUTO mode
-        if (mAutoNightModeManager != null) {
-            mAutoNightModeManager.cleanup();
+        if (mAutoTimeNightModeManager != null) {
+            mAutoTimeNightModeManager.cleanup();
+        }
+        if (mAutoBatteryNightModeManager != null) {
+            mAutoBatteryNightModeManager.cleanup();
         }
     }
 
@@ -2021,10 +2032,11 @@ class AppCompatDelegateImpl extends AppCompatDelegate
             applied = updateForNightMode(modeToApply);
         }
 
-        if (nightMode == MODE_NIGHT_AUTO) {
+        if (nightMode == MODE_NIGHT_AUTO_TIME) {
             // If we're already been started, we may need to setup auto mode again
-            ensureAutoNightModeManager();
-            mAutoNightModeManager.setup();
+            getAutoTimeNightModeManager().setup();
+        } else if (nightMode == MODE_NIGHT_AUTO_BATTERY) {
+            getAutoBatteryNightModeManager().setup();
         }
 
         return applied;
@@ -2033,25 +2045,23 @@ class AppCompatDelegateImpl extends AppCompatDelegate
     @Override
     public void setLocalNightMode(@NightMode final int mode) {
         switch (mode) {
-            case MODE_NIGHT_AUTO:
             case MODE_NIGHT_NO:
             case MODE_NIGHT_YES:
             case MODE_NIGHT_FOLLOW_SYSTEM:
+            case MODE_NIGHT_AUTO_TIME:
+            case MODE_NIGHT_AUTO_BATTERY:
                 if (mLocalNightMode != mode) {
                     mLocalNightMode = mode;
                     applyDayNight();
                 }
                 break;
-            default:
-                Log.i(TAG, ""setLocalNightMode() called with an unknown mode"");
-                break;
         }
     }
 
     @ApplyableNightMode
     int mapNightMode(@NightMode final int mode) {
         switch (mode) {
-            case MODE_NIGHT_AUTO:
+            case MODE_NIGHT_AUTO_TIME:
                 if (Build.VERSION.SDK_INT >= 23) {
                     UiModeManager uiModeManager = mContext.getSystemService(UiModeManager.class);
                     if (uiModeManager.getNightMode() == UiModeManager.MODE_NIGHT_AUTO) {
@@ -2060,14 +2070,14 @@ class AppCompatDelegateImpl extends AppCompatDelegate
                         return MODE_NIGHT_FOLLOW_SYSTEM;
                     }
                 }
-                ensureAutoNightModeManager();
-                return mAutoNightModeManager.getApplyableNightMode();
+                return getAutoTimeNightModeManager().getApplyableNightMode();
+            case MODE_NIGHT_AUTO_BATTERY:
+                return getAutoBatteryNightModeManager().getApplyableNightMode();
             case MODE_NIGHT_UNSPECIFIED:
                 // If we don't have a mode specified, just let the system handle it
                 return MODE_NIGHT_FOLLOW_SYSTEM;
-            default:
-                return mode;
         }
+        return mode;
     }
 
     @NightMode
@@ -2151,16 +2161,24 @@ class AppCompatDelegateImpl extends AppCompatDelegate
         return handled;
     }
 
-    private void ensureAutoNightModeManager() {
-        if (mAutoNightModeManager == null) {
-            mAutoNightModeManager = new AutoNightModeManager(TwilightManager.getInstance(mContext));
+    /**
+     * @hide
+     */
+    @NonNull
+    @RestrictTo(LIBRARY)
+    final AutoNightModeManager getAutoTimeNightModeManager() {
+        if (mAutoTimeNightModeManager == null) {
+            mAutoTimeNightModeManager = new AutoTimeNightModeManager(
+                    TwilightManager.getInstance(mContext));
         }
+        return mAutoTimeNightModeManager;
     }
 
-    @VisibleForTesting
-    final AutoNightModeManager getAutoNightModeManager() {
-        ensureAutoNightModeManager();
-        return mAutoNightModeManager;
+    private AutoNightModeManager getAutoBatteryNightModeManager() {
+        if (mAutoBatteryNightModeManager == null) {
+            mAutoBatteryNightModeManager = new AutoBatteryNightModeManager(mContext);
+        }
+        return mAutoBatteryNightModeManager;
     }
 
     private boolean isActivityManifestHandlingUiMode() {
@@ -2699,67 +2717,110 @@ class AppCompatDelegateImpl extends AppCompatDelegate
         }
     }
 
+    /**
+     * @hide
+     */
     @VisibleForTesting
-    final class AutoNightModeManager {
-        private TwilightManager mTwilightManager;
-        private boolean mIsNight;
-
-        private BroadcastReceiver mAutoTimeChangeReceiver;
-        private IntentFilter mAutoTimeChangeReceiverFilter;
-
-        AutoNightModeManager(@NonNull TwilightManager twilightManager) {
-            mTwilightManager = twilightManager;
-            mIsNight = twilightManager.isNight();
-        }
+    @RestrictTo(LIBRARY)
+    abstract class AutoNightModeManager {
+        private BroadcastReceiver mReceiver;
 
         @ApplyableNightMode
-        int getApplyableNightMode() {
-            mIsNight = mTwilightManager.isNight();
-            return mIsNight ? MODE_NIGHT_YES : MODE_NIGHT_NO;
-        }
+        abstract int getApplyableNightMode();
 
-        void dispatchTimeChanged() {
-            final boolean isNight = mTwilightManager.isNight();
-            if (isNight != mIsNight) {
-                mIsNight = isNight;
-                applyDayNight();
-            }
-        }
+        abstract void onChange();
 
         void setup() {
             cleanup();
 
-            // If we're set to AUTO, we register a receiver to be notified on time changes. The
-            // system only sends the tick out every minute, but that's enough fidelity for our use
-            // case
-            if (mAutoTimeChangeReceiver == null) {
-                mAutoTimeChangeReceiver = new BroadcastReceiver() {
+            final IntentFilter filter = createIntentFilterForBroadcastReceiver();
+            if (filter == null || filter.countActions() == 0) {
+                // Null or empty IntentFilter, skip
+                return;
+            }
+
+            if (mReceiver == null) {
+                mReceiver = new BroadcastReceiver() {
                     @Override
                     public void onReceive(Context context, Intent intent) {
-                        if (DEBUG) {
-                            Log.d(""AutoTimeChangeReceiver"", ""onReceive | Intent: "" + intent);
-                        }
-                        dispatchTimeChanged();
+                        onChange();
                     }
                 };
             }
-            if (mAutoTimeChangeReceiverFilter == null) {
-                mAutoTimeChangeReceiverFilter = new IntentFilter();
-                mAutoTimeChangeReceiverFilter.addAction(Intent.ACTION_TIME_CHANGED);
-                mAutoTimeChangeReceiverFilter.addAction(Intent.ACTION_TIMEZONE_CHANGED);
-                mAutoTimeChangeReceiverFilter.addAction(Intent.ACTION_TIME_TICK);
-            }
-            mContext.registerReceiver(mAutoTimeChangeReceiver, mAutoTimeChangeReceiverFilter);
+            mContext.registerReceiver(mReceiver, filter);
         }
 
+        @Nullable
+        abstract IntentFilter createIntentFilterForBroadcastReceiver();
+
         void cleanup() {
-            if (mAutoTimeChangeReceiver != null) {
-                mContext.unregisterReceiver(mAutoTimeChangeReceiver);
-                mAutoTimeChangeReceiver = null;
+            if (mReceiver != null) {
+",Fix the links to the docs about sinks and sources CLI ( <issue_id> ),0
"diff --git a/community/bolt/src/main/java/org/neo4j/bolt/v1/messaging/Neo4jPackV1.java b/community/bolt/src/main/java/org/neo4j/bolt/v1/messaging/Neo4jPackV1.java
index 115938955ac..a1c05e040a8 100644
--- a/community/bolt/src/main/java/org/neo4j/bolt/v1/messaging/Neo4jPackV1.java
+++ b/community/bolt/src/main/java/org/neo4j/bolt/v1/messaging/Neo4jPackV1.java
@@ -296,43 +296,57 @@ public class Neo4jPackV1 implements Neo4jPack
         @Override
         public void writeDuration( long months, long days, long seconds, int nanos ) throws IOException
         {
-            throw new UnsupportedOperationException( ""not implemented"" );
+            error = new Error( Status.Request.Invalid,
+                    ""Duration is not yet supported as a return type in Bolt"" );
+            packNull();
         }
 
         @Override
         public void writeDate( long epochDay ) throws IOException
         {
-            throw new UnsupportedOperationException( ""not implemented"" );
+            error = new Error( Status.Request.Invalid,
+                    ""Date is not yet supported as a return type in Bolt"" );
+            packNull();
         }
 
         @Override
         public void writeLocalTime( long nanoOfDay ) throws IOException
         {
-            throw new UnsupportedOperationException( ""not implemented"" );
+            error = new Error( Status.Request.Invalid,
+                    ""LocalTime is not yet supported as a return type in Bolt"" );
+            packNull();
         }
 
         @Override
         public void writeTime( long nanosOfDayUTC, int offsetSeconds ) throws IOException
         {
-            throw new UnsupportedOperationException( ""not implemented"" );
+            error = new Error( Status.Request.Invalid,
+                    ""Time is not yet supported as a return type in Bolt"" );
+            packNull();
         }
 
         @Override
         public void writeLocalDateTime( long epochSecond, int nano ) throws IOException
         {
-            throw new UnsupportedOperationException( ""not implemented"" );
+            error = new Error( Status.Request.Invalid,
+                    ""LocalDateTime is not yet supported as a return type in Bolt"" );
+            packNull();
         }
 
         @Override
         public void writeDateTime( long epochSecondUTC, int nano, int offsetSeconds ) throws IOException
         {
-            throw new UnsupportedOperationException( ""not implemented"" );
+            error = new Error( Status.Request.Invalid,
+                    ""DateTime is not yet supported as a return type in Bolt"" );
+            packNull();
         }
 
         @Override
         public void writeDateTime( long epochSecondUTC, int nano, String zoneId ) throws IOException
         {
-            throw new UnsupportedOperationException( ""not implemented"" );
+            error = new Error( Status.Request.Invalid,
+                    ""DateTime is not yet supported as a return type in Bolt"" );
+            packNull();
         }
 
         @Override
diff --git a/community/cypher/cypher/src/main/java/org/neo4j/cypher/internal/codegen/ParameterConverter.java b/community/cypher/cypher/src/main/java/org/neo4j/cypher/internal/codegen/ParameterConverter.java
index 57f9dcebc31..1f7c321a99f 100644
--- a/community/cypher/cypher/src/main/java/org/neo4j/cypher/internal/codegen/ParameterConverter.java
+++ b/community/cypher/cypher/src/main/java/org/neo4j/cypher/internal/codegen/ParameterConverter.java
@@ -20,8 +20,14 @@
 package org.neo4j.cypher.internal.codegen;
 
 import java.lang.reflect.Array;
+import java.time.Instant;
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.LocalTime;
+import java.time.OffsetTime;
 import java.time.ZoneId;
 import java.time.ZoneOffset;
+import java.time.ZonedDateTime;
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -38,19 +44,15 @@ import org.neo4j.helpers.collection.ReverseArrayIterator;
 import org.neo4j.kernel.impl.core.EmbeddedProxySPI;
 import org.neo4j.values.AnyValueWriter;
 import org.neo4j.values.storable.CoordinateReferenceSystem;
-import org.neo4j.values.storable.DateTimeValue;
-import org.neo4j.values.storable.DateValue;
 import org.neo4j.values.storable.DurationValue;
-import org.neo4j.values.storable.LocalDateTimeValue;
-import org.neo4j.values.storable.LocalTimeValue;
 import org.neo4j.values.storable.TextArray;
 import org.neo4j.values.storable.TextValue;
-import org.neo4j.values.storable.TimeValue;
 import org.neo4j.values.storable.Values;
-import org.neo4j.values.virtual.RelationshipValue;
 import org.neo4j.values.virtual.MapValue;
 import org.neo4j.values.virtual.NodeValue;
+import org.neo4j.values.virtual.RelationshipValue;
 
+import static java.time.ZoneOffset.UTC;
 import static org.neo4j.helpers.collection.Iterators.iteratorsEqual;
 
 /**
@@ -365,37 +367,37 @@ class ParameterConverter implements AnyValueWriter<RuntimeException>
     @Override
     public void writeDate( long epochDay ) throws RuntimeException
     {
-        writeValue( DateValue.epochDate( epochDay ) );
+        writeValue( LocalDate.ofEpochDay( epochDay ) );
     }
 
     @Override
     public void writeLocalTime( long nanoOfDay ) throws RuntimeException
     {
-        writeValue( LocalTimeValue.localTime( nanoOfDay ) );
+        writeValue( LocalTime.ofNanoOfDay( nanoOfDay ) );
     }
 
     @Override
     public void writeTime( long nanosOfDayUTC, int offsetSeconds ) throws RuntimeException
     {
-        writeValue( TimeValue.time( nanosOfDayUTC, ZoneOffset.ofTotalSeconds( offsetSeconds ) ) );
+        writeValue( OffsetTime.of( LocalTime.ofNanoOfDay( nanosOfDayUTC ), ZoneOffset.ofTotalSeconds( offsetSeconds ) ) );
     }
 
     @Override
     public void writeLocalDateTime( long epochSecond, int nano ) throws RuntimeException
     {
-        writeValue( LocalDateTimeValue.localDateTime( epochSecond, nano ) );
+        writeValue( LocalDateTime.ofInstant( Instant.ofEpochSecond(epochSecond, nano), UTC ) );
     }
 
     @Override
     public void writeDateTime( long epochSecondUTC, int nano, int offsetSeconds ) throws RuntimeException
     {
-        writeValue( DateTimeValue.datetime( epochSecondUTC, nano, ZoneOffset.ofTotalSeconds( offsetSeconds ) ) );
+        writeValue( ZonedDateTime.ofInstant( Instant.ofEpochSecond(epochSecondUTC, nano), ZoneOffset.ofTotalSeconds( offsetSeconds ) ) );
     }
 
     @Override
     public void writeDateTime( long epochSecondUTC, int nano, String zoneId ) throws RuntimeException
     {
-        writeValue( DateTimeValue.datetime( epochSecondUTC, nano, ZoneId.of( zoneId ) ) );
+        writeValue( ZonedDateTime.of( LocalDate.ofEpochDay( epochSecondUTC ), LocalTime.ofNanoOfDay( nano ), ZoneId.of( zoneId ) ) );
     }
 
     private interface Writer
diff --git a/community/cypher/cypher/src/main/scala/org/neo4j/cypher/internal/compatibility/v3_4/runtime/executionplan/procs/ProcedureExecutionResult.scala b/community/cypher/cypher/src/main/scala/org/neo4j/cypher/internal/compatibility/v3_4/runtime/executionplan/procs/ProcedureExecutionResult.scala
index d94a0ffcd1c..7ea08c68ea1 100644
--- a/community/cypher/cypher/src/main/scala/org/neo4j/cypher/internal/compatibility/v3_4/runtime/executionplan/procs/ProcedureExecutionResult.scala
+++ b/community/cypher/cypher/src/main/scala/org/neo4j/cypher/internal/compatibility/v3_4/runtime/executionplan/procs/ProcedureExecutionResult.scala
@@ -19,6 +19,8 @@
  */
 package org.neo4j.cypher.internal.compatibility.v3_4.runtime.executionplan.procs
 
+import java.time.temporal.TemporalAmount
+import java.time._
 import java.util
 
 import org.neo4j.cypher.internal.util.v3_4.{ProfilerStatisticsNotReadyException, TaskCloser}
@@ -35,7 +37,7 @@ import org.neo4j.graphdb.spatial.{Geometry, Point}
 import org.neo4j.kernel.impl.util.ValueUtils
 import org.neo4j.kernel.impl.util.ValueUtils._
 import org.neo4j.values.AnyValue
-import org.neo4j.values.storable.Values
+import org.neo4j.values.storable._
 import org.neo4j.values.storable.Values.{of => DONT_USE_OMG, _}
 
 /**
@@ -108,6 +110,12 @@ class ProcedureExecutionResult(context: QueryContext,
           case CTBoolean => transform(res(pos), booleanValue)
           case CTPoint => transform(res(pos), (p: Point) => asPointValue(p))
           case CTGeometry => transform(res(pos), (g: Geometry) => asGeometryValue(g))
+          case CTDateTime => transform(res(pos), (g: ZonedDateTime) => DateTimeValue.datetime(g))
+          case CTLocalDateTime => transform(res(pos), (g: LocalDateTime) => LocalDateTimeValue.localDateTime(g))
+          case CTDate => transform(res(pos), (g: LocalDate) => DateValue.date(g))
+          case CTTime => transform(res(pos), (g: OffsetTime) => TimeValue.time(g))
+          case CTLocalTime => transform(res(pos), (g: LocalTime) => LocalTimeValue.localTime(g))
+          case CTDuration => transform(res(pos), (g: TemporalAmount) => Values.durationValue(g))
           case CTMap => transform(res(pos), asMapValue)
           case ListType(_) => transform(res(pos), asListValue)
           case CTAny => transform(res(pos), ValueUtils.of)
diff --git a/community/cypher/cypher/src/test/java/org/neo4j/cypher/internal/codegen/ParameterConverterTest.java b/community/cypher/cypher/src/test/java/org/neo4j/cypher/internal/codegen/ParameterConverterTest.java
index a6cc6f05cd9..de5bb613db5 100644
--- a/community/cypher/cypher/src/test/java/org/neo4j/cypher/internal/codegen/ParameterConverterTest.java
+++ b/community/cypher/cypher/src/test/java/org/neo4j/cypher/internal/codegen/ParameterConverterTest.java
@@ -22,6 +22,11 @@ package org.neo4j.cypher.internal.codegen;
 import org.junit.Before;
 import org.junit.Test;
 
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.LocalTime;
+import java.time.OffsetTime;
+import java.time.ZonedDateTime;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
@@ -34,7 +39,13 @@ import org.neo4j.kernel.impl.core.NodeProxy;
 import org.neo4j.kernel.impl.core.RelationshipProxy;
 import org.neo4j.values.AnyValue;
 import org.neo4j.values.storable.CoordinateReferenceSystem;
+import org.neo4j.values.storable.DateTimeValue;
+import org.neo4j.values.storable.DateValue;
+import org.neo4j.values.storable.DurationValue;
+import org.neo4j.values.storable.LocalDateTimeValue;
+import org.neo4j.values.storable.LocalTimeValue;
 import org.neo4j.values.storable.LongArray;
+import org.neo4j.values.storable.TimeValue;
 import org.neo4j.values.storable.Values;
 import org.neo4j.values.virtual.RelationshipValue;
 import org.neo4j.values.virtual.ListValue;
@@ -198,6 +209,96 @@ public class ParameterConverterTest
         assertThat( point.getCRS().getCode(), equalTo( 4326 ) );
     }
 
+    @Test
+    public void shouldHandleDateTime()
+    {
+        // Given
+        DateTimeValue dvalue = DateTimeValue.datetime( 1, 2, 3, 4, 5, 6, 7, ""+00:00"" );
+
+        // When
+        dvalue.writeTo( converter );
+
+        // Then
+        Object value = converter.value();
+        assertThat( value, instanceOf( ZonedDateTime.class ) );
+        assertThat( value, equalTo( dvalue.asObjectCopy() ) );
+    }
+
+    @Test
+    public void shouldHandleLocalDateTime()
+    {
+        // Given
+        LocalDateTimeValue dvalue = LocalDateTimeValue.localDateTime( 1, 2, 3, 4, 5, 6, 7 );
+
+        // When
+        dvalue.writeTo( converter );
+
+        // Then
+        Object value = converter.value();
+        assertThat( value, instanceOf( LocalDateTime.class ) );
+        assertThat( value, equalTo( dvalue.asObjectCopy() ) );
+    }
+
+    @Test
+    public void shouldHandleDate()
+    {
+        // Given
+        DateValue dvalue = DateValue.date( 1, 2, 3 );
+
+        // When
+        dvalue.writeTo( converter );
+
+        // Then
+        Object value = converter.value();
+        assertThat( value, instanceOf( LocalDate.class ) );
+        assertThat( value, equalTo( dvalue.asObjectCopy() ) );
+    }
+
+    @Test
+    public void shouldHandleTime()
+    {
+        // Given
+        TimeValue dvalue = TimeValue.time( 1, 2, 3, 4, ""+00:00"" );
+
+        // When
+        dvalue.writeTo( converter );
+
+        // Then
+        Object value = converter.value();
+        assertThat( value, instanceOf( OffsetTime.class ) );
+        assertThat( value, equalTo( dvalue.asObjectCopy() ) );
+    }
+
+    @Test
+    public void shouldHandleLocalTime()
+    {
+        // Given
+        LocalTimeValue dvalue = LocalTimeValue.localTime( 1, 2, 3, 4 );
+
+        // When
+        dvalue.writeTo( converter );
+
+        // Then
+        Object value = converter.value();
+        assertThat( value, instanceOf( LocalTime.class ) );
+        assertThat( value, equalTo( dvalue.asObjectCopy() ) );
+    }
+
+    @Test
+    public void shouldHandleDurations()
+    {
+        // Given
+        DurationValue dvalue = DurationValue.duration( 1, 2, 3, 4 );
+
+        // When
+        dvalue.writeTo( converter );
+
+        // Then
+        Object value = converter.value();
+        assertThat( value, instanceOf( DurationValue.class ) );
+        assertThat( value, equalTo( dvalue.asObjectCopy() ) );
+    }
+
     @Test
     public void shouldHandleLists()
     {
diff --git a/community/cypher/interpreted-runtime/src/main/scala/org/neo4j/cypher/internal/runtime/interpreted/ValueConversion.scala b/community/cypher/interpreted-runtime/src/main/scala/org/neo4j/cypher/internal/runtime/interpreted/ValueConversion.scala
index 15ea2e65066..bd9c1fe1a55 100644
--- a/community/cypher/interpreted-runtime/src/main/scala/org/neo4j/cypher/internal/runtime/interpreted/ValueConversion.scala
+++ b/community/cypher/interpreted-runtime/src/main/scala/org/neo4j/cypher/internal/runtime/interpreted/ValueConversion.scala
@@ -19,13 +19,16 @@
  */
 package org.neo4j.cypher.internal.runtime.interpreted
 
+import java.time._
+import java.time.temporal.TemporalAmount
+
 import org.neo4j.cypher.internal.util.v3_4.Eagerly
 import org.neo4j.cypher.internal.util.v3_4.symbols._
 import org.neo4j.graphdb.spatial.{Geometry, Point}
 import org.neo4j.graphdb.{Node, Path, Relationship}
 import org.neo4j.kernel.impl.util.ValueUtils
 import org.neo4j.values.AnyValue
-import org.neo4j.values.storable.Values
+import org.neo4j.values.storable._
 import org.neo4j.values.storable.Values.byteArray
 import org.neo4j.values.virtual.VirtualValues.fromArray
 import org.neo4j.values.virtual.{MapValue, VirtualValues}
@@ -48,6 +51,12 @@ object ValueConversion {
       case CTAny => o => ValueUtils.of(o)
       case CTPoint => o => ValueUtils.asPointValue(o.asInstanceOf[Point])
       case CTGeometry => o => ValueUtils.asGeometryValue(o.asInstanceOf[Geometry])
+      case CTDateTime => o => DateTimeValue.datetime(o.asInstanceOf[ZonedDateTime])
+      case CTLocalDateTime => o => LocalDateTimeValue.localDateTime(o.asInstanceOf[LocalDateTime])
+      case CTDate => o => DateValue.date(o.asInstanceOf[LocalDate])
+      case CTTime => o => TimeValue.time(o.asInstanceOf[OffsetTime])
+      case CTLocalTime => o => LocalTimeValue.localTime(o.asInstanceOf[LocalTime])
+      case CTDuration => o => Values.durationValue(o.asInstanceOf[TemporalAmount])
     }
 
     (v) => if (v == null) Values.NO_VALUE else converter(v)
@@ -67,6 +76,12 @@ object ValueConversion {
     case p: Path => ValueUtils.asPathValue(p)
     case p: Point => ValueUtils.asPointValue(p)
     case p: Geometry => ValueUtils.asGeometryValue(p)
+    case x: ZonedDateTime => DateTimeValue.datetime(x)
+    case x: LocalDateTime => LocalDateTimeValue.localDateTime(x)
+    case x: LocalDate => DateValue.date(x)
+    case x: OffsetTime => TimeValue.time(x)
+    case x: LocalTime => LocalTimeValue.localTime(x)
+    case x: TemporalAmount => Values.durationValue(x)
     case m: Map[_, _] => VirtualValues.map(Eagerly.immutableMapValues(m.asInstanceOf[Map[String, Any]], asValue).asJava)
     case m: java.util.Map[_, _] => ValueUtils.asMapValue(m.asInstanceOf[java.util.Map[String, AnyRef]])
     case a: TraversableOnce[_] => VirtualValues.list(a.map(asValue).toArray:_*)
diff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/util/BaseToObjectValueWriter.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/util/BaseToObjectValueWriter.java
index dcc7c4b5b43..660ea1cf7ff 100644
--- a/community/kernel/src/main/java/org/neo4j/kernel/impl/util/BaseToObjectValueWriter.java
+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/util/BaseToObjectValueWriter.java
@@ -20,8 +20,14 @@
 package org.neo4j.kernel.impl.util;
 
 import java.lang.reflect.Array;
+import java.time.Instant;
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.LocalTime;
+import java.time.OffsetTime;
 import java.time.ZoneId;
 import java.time.ZoneOffset;
+import java.time.ZonedDateTime;
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -41,18 +47,14 @@ import org.neo4j.graphdb.traversal.Paths;
 import org.neo4j.helpers.collection.ReverseArrayIterator;
 import org.neo4j.values.AnyValueWriter;
 import org.neo4j.values.storable.CoordinateReferenceSystem;
-import org.neo4j.values.storable.DateTimeValue;
-import org.neo4j.values.storable.DateValue;
 import org.neo4j.values.storable.DurationValue;
-import org.neo4j.values.storable.LocalDateTimeValue;
-import org.neo4j.values.storable.LocalTimeValue;
 import org.neo4j.values.storable.TextArray;
 import org.neo4j.values.storable.TextValue;
-import org.neo4j.values.virtual.RelationshipValue;
-import org.neo4j.values.storable.TimeValue;
 import org.neo4j.values.virtual.MapValue;
 import org.neo4j.values.virtual.NodeValue;
+import org.neo4j.values.virtual.RelationshipValue;
 
+import static java.time.ZoneOffset.UTC;
 import static org.neo4j.helpers.collection.Iterators.iteratorsEqual;
 
 /**
@@ -417,37 +419,37 @@ public abstract class BaseToObjectValueWriter<E extends Exception> implements An
     @Override
     public void writeDate( long epochDay ) throws RuntimeException
     {
-        writeValue( DateValue.epochDate( epochDay ) );
+        writeValue( LocalDate.ofEpochDay( epochDay ) );
     }
 
     @Override
     public void writeLocalTime( long nanoOfDay ) throws RuntimeException
     {
-        writeValue( LocalTimeValue.localTime( nanoOfDay ) );
+        writeValue( LocalTime.ofNanoOfDay( nanoOfDay ) );
     }
 
     @Override
     public void writeTime( long nanosOfDayUTC, int offsetSeconds ) throws RuntimeException
     {
-        writeValue( TimeValue.time( nanosOfDayUTC, ZoneOffset.ofTotalSeconds( offsetSeconds ) ) );
+        writeValue( OffsetTime.of( LocalTime.ofNanoOfDay( nanosOfDayUTC ), ZoneOffset.ofTotalSeconds( offsetSeconds ) ) );
     }
 
     @Override
     public void writeLocalDateTime( long epochSecond, int nano ) throws RuntimeException
     {
-        writeValue( LocalDateTimeValue.localDateTime( epochSecond, nano ) );
+        writeValue( LocalDateTime.ofInstant( Instant.ofEpochSecond(epochSecond, nano), UTC ) );
     }
 
     @Override
     public void writeDateTime( long epochSecondUTC, int nano, int offsetSeconds ) throws RuntimeException
     {
-        writeValue( DateTimeValue.datetime( epochSecondUTC, nano, ZoneOffset.ofTotalSeconds( offsetSeconds ) ) );
+        writeValue( ZonedDateTime.ofInstant( Instant.ofEpochSecond(epochSecondUTC, nano), ZoneOffset.ofTotalSeconds( offsetSeconds ) ) );
     }
 
     @Override
     public void writeDateTime( long epochSecondUTC, int nano, String zoneId ) throws RuntimeException
     {
-        writeValue( DateTimeValue.datetime( epochSecondUTC, nano, ZoneId.of( zoneId ) ) );
+        writeValue( ZonedDateTime.of( LocalDate.ofEpochDay( epochSecondUTC ), LocalTime.ofNanoOfDay( nano ), ZoneId.of( zoneId ) ) );
     }
 
     private interface Writer",Adjust lastCalculatedSize comment .,0
"diff --git a/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboNamespaceHandler.java b/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboNamespaceHandler.java
index fe49ffdc4be..ddafd031586 100644
--- a/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboNamespaceHandler.java
+++ b/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboNamespaceHandler.java
@@ -17,6 +17,7 @@
 package org.apache.dubbo.config.spring.schema;
 
 import org.apache.dubbo.common.Version;
+import org.apache.dubbo.config.ApplicationConfig;
 import org.apache.dubbo.config.ConsumerConfig;
 import org.apache.dubbo.config.MetadataReportConfig;
 import org.apache.dubbo.config.MetricsConfig;
@@ -50,6 +51,7 @@ public class DubboNamespaceHandler extends NamespaceHandlerSupport implements Co
 
     @Override
     public void init() {
+        registerBeanDefinitionParser(""application"", new DubboBeanDefinitionParser(ApplicationConfig.class, true));
         registerBeanDefinitionParser(""module"", new DubboBeanDefinitionParser(ModuleConfig.class, true));
         registerBeanDefinitionParser(""registry"", new DubboBeanDefinitionParser(RegistryConfig.class, true));
         registerBeanDefinitionParser(""config-center"", new DubboBeanDefinitionParser(ConfigCenterBean.class, true));",register applicationconfig,1
"diff --git a/src/com/facebook/buck/json/buck.py b/src/com/facebook/buck/json/buck.py
index 1b4e1ae4b2..fb8b6c6471 100644
--- a/src/com/facebook/buck/json/buck.py
+++ b/src/com/facebook/buck/json/buck.py
@@ -421,23 +421,6 @@ def get_base_path(build_env=None):
     return build_env.base_path
 
 
-@provide_for_build
-def add_deps(name, deps=[], build_env=None):
-    assert build_env.type == BuildContextType.BUILD_FILE, (
-        ""Cannot use `add_deps()` at the top-level of an included file."")
-
-    if name not in build_env.rules:
-        raise ValueError(
-            'Invoked \'add_deps\' on non-existent rule %s.' % name)
-
-    rule = build_env.rules[name]
-    if 'deps' not in rule:
-        raise ValueError(
-            'Invoked \'add_deps\' on rule %s that has no \'deps\' field'
-            % name)
-    rule['deps'] = rule['deps'] + deps
-
-
 GENDEPS_SIGNATURE = re.compile(r'^#@# GENERATED FILE: DO NOT MODIFY ([a-f0-9]{40}) #@#\n$')
 
 class BuildFileProcessor(object):
diff --git a/test/com/facebook/buck/parser/ParserTest.java b/test/com/facebook/buck/parser/ParserTest.java
index 2a562e58e0..2a23a11f09 100644
--- a/test/com/facebook/buck/parser/ParserTest.java
+++ b/test/com/facebook/buck/parser/ParserTest.java
@@ -1204,45 +1204,6 @@ public class ParserTest {
     assertEquals(""Should have not invalidated cache."", 1, counter.calls);
   }
 
-  @Test
-  public void testGeneratedDeps() throws Exception {
-    // Execute buildTargetGraphForBuildTargets() with a target in a valid file but a bad rule name.
-    tempDir.newFolder(""java"", ""com"", ""facebook"", ""generateddeps"");
-
-    Path testGeneratedDepsBuckFile = tempDir.newFile(""java/com/facebook/generateddeps/BUCK"");
-    Files.write(
-        testGeneratedDepsBuckFile,
-        (""java_library(name = 'foo')\n"" +
-            ""java_library(name = 'bar')\n"" +
-            ""add_deps(name = 'foo', deps = [':bar'])\n"").getBytes(UTF_8));
-
-    BuildTarget fooTarget = BuildTarget.builder(
-        tempDir.getRoot().toRealPath(),
-        ""//java/com/facebook/generateddeps"",
-        ""foo"").build();
-
-    BuildTarget barTarget = BuildTarget.builder(
-        tempDir.getRoot().toRealPath(),
-        ""//java/com/facebook/generateddeps"",
-        ""bar"").build();
-    Iterable<BuildTarget> buildTargets = ImmutableList.of(fooTarget, barTarget);
-
-    TargetGraph targetGraph = parser.buildTargetGraph(
-        eventBus,
-        cell,
-        false,
-        executorService,
-        buildTargets);
-    BuildRuleResolver resolver = buildActionGraph(eventBus, targetGraph);
-
-    BuildRule fooRule = resolver.requireRule(fooTarget);
-    assertNotNull(fooRule);
-    BuildRule barRule = resolver.requireRule(barTarget);
-    assertNotNull(barRule);
-
-    assertEquals(ImmutableSet.of(barRule), fooRule.getDeps());
-  }
-
   @Test
   public void whenAllRulesAreRequestedWithDifferingIncludesThenRulesAreParsedTwice()
       throws BuildFileParseException, BuildTargetException, IOException, InterruptedException {","do all the operations on SQLite connections in a single thread , remove reset from ShadowSQLiteConnection .",0
"diff --git a/src/main/java/org/junit/internal/deprecated/ClassRoadie.java b/src/main/java/org/junit/internal/runners/ClassRoadie.java
similarity index 92%
rename from src/main/java/org/junit/internal/deprecated/ClassRoadie.java
rename to src/main/java/org/junit/internal/runners/ClassRoadie.java
index c1c527b7cb2e..6e65eaf72a91 100644
--- a/src/main/java/org/junit/internal/deprecated/ClassRoadie.java
+++ b/src/main/java/org/junit/internal/runners/ClassRoadie.java
@@ -1,11 +1,9 @@
-package org.junit.internal.deprecated;
+package org.junit.internal.runners;
 
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.util.List;
 
-import org.junit.internal.runners.BlockJUnit4ClassRunner;
-import org.junit.internal.runners.JUnit4ClassRunner;
 import org.junit.runner.Description;
 import org.junit.runner.notification.Failure;
 import org.junit.runner.notification.RunNotifier;
diff --git a/src/main/java/org/junit/internal/deprecated/FailedBefore.java b/src/main/java/org/junit/internal/runners/FailedBefore.java
similarity index 68%
rename from src/main/java/org/junit/internal/deprecated/FailedBefore.java
rename to src/main/java/org/junit/internal/runners/FailedBefore.java
index f3a61a2849da..6ea4be9a11ea 100644
--- a/src/main/java/org/junit/internal/deprecated/FailedBefore.java
+++ b/src/main/java/org/junit/internal/runners/FailedBefore.java
@@ -1,7 +1,5 @@
-package org.junit.internal.deprecated;
+package org.junit.internal.runners;
 
-import org.junit.internal.runners.BlockJUnit4ClassRunner;
-import org.junit.internal.runners.JUnit4ClassRunner;
 
 /**
  * @deprecated Included for backwards compatibility with JUnit 4.4. Will be
diff --git a/src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java b/src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java
index d15699adfff7..edc3fb841852 100644
--- a/src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java
+++ b/src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java
@@ -8,11 +8,6 @@
 import java.util.Iterator;
 import java.util.List;
 
-import org.junit.internal.deprecated.ClassRoadie;
-import org.junit.internal.deprecated.MethodRoadie;
-import org.junit.internal.deprecated.MethodValidator;
-import org.junit.internal.deprecated.TestClass;
-import org.junit.internal.deprecated.TestMethod;
 import org.junit.runner.Description;
 import org.junit.runner.Runner;
 import org.junit.runner.manipulation.Filter;
diff --git a/src/main/java/org/junit/internal/deprecated/MethodRoadie.java b/src/main/java/org/junit/internal/runners/MethodRoadie.java
similarity index 96%
rename from src/main/java/org/junit/internal/deprecated/MethodRoadie.java
rename to src/main/java/org/junit/internal/runners/MethodRoadie.java
index 857b17c569b2..4751878d9f9f 100644
--- a/src/main/java/org/junit/internal/deprecated/MethodRoadie.java
+++ b/src/main/java/org/junit/internal/runners/MethodRoadie.java
@@ -1,4 +1,4 @@
-package org.junit.internal.deprecated;
+package org.junit.internal.runners;
 
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
@@ -11,8 +11,6 @@
 import java.util.concurrent.TimeoutException;
 
 import org.junit.internal.AssumptionViolatedException;
-import org.junit.internal.runners.BlockJUnit4ClassRunner;
-import org.junit.internal.runners.JUnit4ClassRunner;
 import org.junit.runner.Description;
 import org.junit.runner.notification.Failure;
 import org.junit.runner.notification.RunNotifier;
diff --git a/src/main/java/org/junit/internal/deprecated/MethodValidator.java b/src/main/java/org/junit/internal/runners/MethodValidator.java
similarity index 92%
rename from src/main/java/org/junit/internal/deprecated/MethodValidator.java
rename to src/main/java/org/junit/internal/runners/MethodValidator.java
index cafaa0905a26..d3c75947c1db 100644
--- a/src/main/java/org/junit/internal/deprecated/MethodValidator.java
+++ b/src/main/java/org/junit/internal/runners/MethodValidator.java
@@ -1,4 +1,4 @@
-package org.junit.internal.deprecated;
+package org.junit.internal.runners;
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Method;
@@ -11,9 +11,6 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
-import org.junit.internal.runners.BlockJUnit4ClassRunner;
-import org.junit.internal.runners.InitializationError;
-import org.junit.internal.runners.JUnit4ClassRunner;
 
 /**
  * @deprecated Included for backwards compatibility with JUnit 4.4. Will be
diff --git a/src/main/java/org/junit/internal/deprecated/TestClass.java b/src/main/java/org/junit/internal/runners/TestClass.java
similarity index 94%
rename from src/main/java/org/junit/internal/deprecated/TestClass.java
rename to src/main/java/org/junit/internal/runners/TestClass.java
index 6f233da69848..3fbcd22b6304 100644
--- a/src/main/java/org/junit/internal/deprecated/TestClass.java
+++ b/src/main/java/org/junit/internal/runners/TestClass.java
@@ -1,4 +1,4 @@
-package org.junit.internal.deprecated;
+package org.junit.internal.runners;
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Constructor;
@@ -11,8 +11,6 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
-import org.junit.internal.runners.BlockJUnit4ClassRunner;
-import org.junit.internal.runners.JUnit4ClassRunner;
 
 /**
  * @deprecated Included for backwards compatibility with JUnit 4.4. Will be
diff --git a/src/main/java/org/junit/internal/deprecated/TestMethod.java b/src/main/java/org/junit/internal/runners/TestMethod.java
similarity index 91%
rename from src/main/java/org/junit/internal/deprecated/TestMethod.java
rename to src/main/java/org/junit/internal/runners/TestMethod.java
index 6898f285fad5..064e60dde1b1 100644
--- a/src/main/java/org/junit/internal/deprecated/TestMethod.java
+++ b/src/main/java/org/junit/internal/runners/TestMethod.java
@@ -1,4 +1,4 @@
-package org.junit.internal.deprecated;
+package org.junit.internal.runners;
 
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
@@ -9,8 +9,6 @@
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.Test.None;
-import org.junit.internal.runners.BlockJUnit4ClassRunner;
-import org.junit.internal.runners.JUnit4ClassRunner;
 
 /**
  * @deprecated Included for backwards compatibility with JUnit 4.4. Will be",Move deprecated classes back where they used to be.,1
"diff --git a/base/src/com/thoughtworks/go/util/FileDigester.java b/base/src/com/thoughtworks/go/util/FileDigester.java
index a49f6b6d42..c8f2b95650 100644
--- a/base/src/com/thoughtworks/go/util/FileDigester.java
+++ b/base/src/com/thoughtworks/go/util/FileDigester.java
@@ -16,18 +16,15 @@
 
 package com.thoughtworks.go.util;
 
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.security.MessageDigest;
-import java.security.NoSuchAlgorithmException;
-
+import org.apache.commons.codec.CharEncoding;
 import org.apache.commons.io.IOUtils;
+import org.apache.commons.io.comparator.NameFileComparator;
 import org.apache.commons.io.output.NullOutputStream;
 
-import static com.thoughtworks.go.util.ExceptionUtils.bomb;
+import java.io.*;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import java.util.Arrays;
 
 public class FileDigester {
     private final InputStream input;
@@ -75,6 +72,19 @@ public class FileDigester {
         }
     }
 
+    public static String md5DigestOfFolderContent(File directory) throws IOException {
+        File[] files = directory.listFiles();
+        Arrays.sort(files, NameFileComparator.NAME_COMPARATOR);
+        StringBuilder md5 = new StringBuilder();
+        for (File file : files) {
+            if (file.isDirectory())
+                md5.append(md5DigestOfFolderContent(file));
+            else
+                md5.append(md5DigestOfFile(file));
+        }
+        return md5DigestOfStream(new ByteArrayInputStream(md5.toString().getBytes(CharEncoding.UTF_8)));
+    }
+
     public static String md5DigestOfStream(InputStream stream) throws IOException {
         return copyAndDigest(stream, new NullOutputStream());
     }
diff --git a/base/test/com/thoughtworks/go/util/FileDigesterTest.java b/base/test/com/thoughtworks/go/util/FileDigesterTest.java
index 62de31eddb..17bd7f4819 100644
--- a/base/test/com/thoughtworks/go/util/FileDigesterTest.java
+++ b/base/test/com/thoughtworks/go/util/FileDigesterTest.java
@@ -16,7 +16,11 @@
 
 package com.thoughtworks.go.util;
 
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
 import org.junit.Test;
+import org.junit.rules.TemporaryFolder;
 
 import java.io.File;
 import java.io.IOException;
@@ -26,20 +30,45 @@ import static org.junit.Assert.assertThat;
 import static org.junit.Assert.fail;
 
 public class FileDigesterTest {
-    private File createFileWithSampleData() throws IOException {
-        File tempFile = TestFileUtil.createTempFile(""test.txt"");
-        FileUtil.writeContentToFile(""sample data"", tempFile);
-        return tempFile;
+    @Rule
+    public TemporaryFolder temporaryFolder = new TemporaryFolder();
+
+    @Before
+    public void setUp() throws Exception {
+        temporaryFolder.create();
+    }
+
+    @After
+    public void tearDown() throws Exception {
+        temporaryFolder.delete();
     }
 
     @Test
     public void shouldReturnSameMd5ForSameData() throws Exception {
-        String digest1 = FileDigester.md5DigestOfFile(createFileWithSampleData());
+        File fileWithSampleData = createFileWithSampleData();
+        String digest1 = FileDigester.md5DigestOfFile(fileWithSampleData);
+        assertThat(""md5 should not be empty"", digest1.length() > 0, is(true));
+        String digest2 = FileDigester.md5DigestOfFile(fileWithSampleData);
+        assertThat(digest1, is(digest2));
+    }
+
+    @Test
+    public void shouldReturnSameMd5ForFolderContents() throws Exception {
+        File folderWithSampleData = createFolderWithSampleData();
+        String digest1 = FileDigester.md5DigestOfFolderContent(folderWithSampleData);
         assertThat(""md5 should not be empty"", digest1.length() > 0, is(true));
-        String digest2 = FileDigester.md5DigestOfFile(createFileWithSampleData());
+        String digest2 = FileDigester.md5DigestOfFolderContent(folderWithSampleData);
         assertThat(digest1, is(digest2));
     }
 
+    @Test
+    public void shouldReturnConsistentMd5BySortingTheFileList() throws Exception {
+        File folderWithSampleData = createFolderWithSampleData();
+        String digest1 = FileDigester.md5DigestOfFolderContent(folderWithSampleData);
+        assertThat(""md5 should not be empty"", digest1.length() > 0, is(true));
+        assertThat(digest1, is(""FJ9Q0KO4KE5ukH6Y7r1FIQ==""));
+    }
+
     @Test
     public void shouldThrowExceptionIfITryToGetMd5WithoutDigestingFile() {
         FileDigester fileDigester = new FileDigester(null, null);
@@ -49,4 +78,20 @@ public class FileDigesterTest {
         } catch (Exception ignored) {
         }
     }
+
+    private File createFileWithSampleData() throws IOException {
+        File tempFile = temporaryFolder.newFile(""test.txt"");
+        FileUtil.writeContentToFile(""sample data"", tempFile);
+        return tempFile;
+    }
+
+    private File createFolderWithSampleData() throws IOException {
+        File firstPlugin = temporaryFolder.newFile(""first-plugin"");
+        File secondPlugin = temporaryFolder.newFile(""second-plugin"");
+        File thirdPlugin = temporaryFolder.newFile(""third-plugin"");
+        FileUtil.writeContentToFile(""sample plugin for first plugin"", firstPlugin);
+        FileUtil.writeContentToFile(""sample plugin for third plugin"", secondPlugin);
+        FileUtil.writeContentToFile(""sample plugin for second plugin"", thirdPlugin);
+        return temporaryFolder.getRoot();
+    }
 }
diff --git a/plugin-infra/go-plugin-infra/src/com/thoughtworks/go/plugin/infra/commons/PluginsZip.java b/plugin-infra/go-plugin-infra/src/com/thoughtworks/go/plugin/infra/commons/PluginsZip.java
index c19ceae5b6..7975597a5d 100644
--- a/plugin-infra/go-plugin-infra/src/com/thoughtworks/go/plugin/infra/commons/PluginsZip.java
+++ b/plugin-infra/go-plugin-infra/src/com/thoughtworks/go/plugin/infra/commons/PluginsZip.java
@@ -22,16 +22,18 @@ import com.thoughtworks.go.util.ZipUtil;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
 
+import java.io.BufferedWriter;
 import java.io.File;
-import java.io.IOException;
+import java.io.FileWriter;
 
 import static com.thoughtworks.go.util.FileDigester.md5DigestOfFile;
+import static com.thoughtworks.go.util.FileDigester.md5DigestOfFolderContent;
 
 @Component
 public class PluginsZip {
     private static final org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(PluginsZip.class);
     private ZipUtil zipUtil;
-    private String md5DigestOfFile;
+    private String md5DigestOfPlugins;
     private final File destZipFile;
     private final File bundledPlugins;
     private final File externalPlugins;
@@ -53,16 +55,30 @@ public class PluginsZip {
         try {
             ZipBuilder zipBuilder = zipUtil.zipContentsOfMultipleFolders(destZipFile, true);
             zipBuilder.add(""bundled"", bundledPlugins).add(""external"", externalPlugins).done();
-            md5DigestOfFile = md5DigestOfFile(destZipFile);
+            md5DigestOfPlugins = computeMd5DigestOfPlugins();
         } catch (Exception e) {
             LOG.error(""Could not create zip of plugins for agent to download."", e);
         }
     }
 
-    public String md5() throws IOException {
-        if (md5DigestOfFile == null) {
-            return md5DigestOfFile(destZipFile);
+    public String md5() {
+        if (md5DigestOfPlugins == null) {
+            return computeMd5DigestOfPlugins();
+        }
+        return md5DigestOfPlugins;
+    }
+
+    private String computeMd5DigestOfPlugins() {
+        try {
+            String digestOfBundledFolder = md5DigestOfFolderContent(bundledPlugins);
+            String digestOfExternalFolder = md5DigestOfFolderContent(externalPlugins);
+            File tempFileToStoreMd5 = File.createTempFile(""tempFileToStoreMd5"", "".txt"");
+            BufferedWriter writer = new BufferedWriter(new FileWriter(tempFileToStoreMd5));
+            writer.write(String.format(""digestOfBundledFolder:"" + digestOfBundledFolder + ""\tdigestOfExternalFolder:"" + digestOfExternalFolder));
+            writer.close();
+            return md5DigestOfFile(tempFileToStoreMd5);
+        } catch (Exception e) {
+            throw new RuntimeException(String.format(""Could not compute md5 of plugins. Exception occurred: %s"", e.getStackTrace()));
         }
-        return md5DigestOfFile;
     }
 }
diff --git a/plugin-infra/go-plugin-infra/test/com/thoughtworks/go/plugin/infra/commons/PluginsZipTest.java b/plugin-infra/go-plugin-infra/test/com/thoughtworks/go/plugin/infra/commons/PluginsZipTest.java
index ba52e244b7..40a2bdcb3c 100644
--- a/plugin-infra/go-plugin-infra/test/com/thoughtworks/go/plugin/infra/commons/PluginsZipTest.java
+++ b/plugin-infra/go-plugin-infra/test/com/thoughtworks/go/plugin/infra/commons/PluginsZipTest.java
@@ -27,7 +27,6 @@ import org.junit.rules.ExpectedException;
 import org.junit.rules.TemporaryFolder;
 
 import java.io.File;
-import java.io.FileNotFoundException;
 import java.util.zip.ZipFile;
 
 import static com.thoughtworks.go.util.SystemEnvironment.*;
@@ -112,8 +111,8 @@ public class PluginsZipTest {
 
     @Test
     public void shouldThrowExceptionWhileRetrievingChecksumOfUnavailableFile() throws Exception {
-        expectedException.expect(FileNotFoundException.class);
-        expectedException.expectMessage(containsString(""go-plugins-all.zip (No such file or directory)""));
+        expectedException.expect(RuntimeException.class);
+        expectedException.expectMessage(containsString(""Could not compute md5 of plugins. Exception occurred:""));
 
         temporaryFolder.delete();
         pluginsZip.md5();",delete useless fescar - common in fescar - core because fescar - config had imported it ( <issue_id> ) .,0
"diff --git a/README.md b/README.md
index 3aaa36d6bb..9ae60f449a 100644
--- a/README.md
+++ b/README.md
@@ -16,19 +16,19 @@ example interface:
 public interface DummyServiceAsync {
   // Produces a url like ""foo/bar?id=idValue"".
   @GET(""foo/bar"")
-  void normalGet(@Name(""id"") String id, Callback<SimpleResponse> callback);
+  void normalGet(@Name(""id"") String id, Callback<Response> callback);
 
   // Produces a url like ""foo/idValue/bar?category=categoryValue"".
   @GET(""foo/{id}/bar"")
-  void getWithPathParam(@Name(""id"") String id, @Name(""category"") String category, Callback<SimpleResponse> callback);
+  void getWithPathParam(@Name(""id"") String id, @Name(""category"") String category, Callback<Response> callback);
 
   // Produces a url like ""foo/bar/idValue"" and body like ""id=idValue&body=bodyValue"".
   @POST(""foo/bar/{id}"")
-  void normalPost(@Name(""id"") String id, @Name(""body"") String body, Callback<SimpleResponse> callback);
+  void normalPost(@Name(""id"") String id, @Name(""body"") String body, Callback<Response> callback);
 
   // Produces a url like ""foo/bar/idValue"" and body generated by MyJsonObj.
   @POST(""foo/bar/{id}"")
-  void singleEntityPost(@SingleEntity MyJsonObj card, @Name(""id"") String id, Callback<SimpleResponse> callback);
+  void singleEntityPost(@SingleEntity MyJsonObj card, @Name(""id"") String id, Callback<Response> callback);
 }
 ```
 
@@ -44,7 +44,7 @@ For synchronous execution, omit the `Callback` parameter and specify the respons
 ```java
 public interface DummyServiceSync {
   @GET(""foo/bar"")
-  SimpleResponse normalGet(@Name(""id"") String id);
+  Response normalGet(@Name(""id"") String id);
 }
 ```",Using Response in readme instead of SimpleResponse,1
"diff --git a/core/pom.xml b/core/pom.xml
index 2d80f0b9..cbb93e63 100644
--- a/core/pom.xml
+++ b/core/pom.xml
@@ -45,10 +45,6 @@
             <groupId>${project.groupId}</groupId>
             <artifactId>fescar-config</artifactId>
         </dependency>
-        <dependency>
-            <groupId>${project.groupId}</groupId>
-            <artifactId>fescar-common</artifactId>
-        </dependency>
         <dependency>
             <groupId>org.apache.commons</groupId>","Changed the way md5 was checked . . * Due to plugins zip being recreated on every server restart , the md5 changed when the server was migrated to a new machine .",0
"diff --git a/doc/ReleaseNotes4.5.txt b/doc/ReleaseNotes4.5.txt
index f34aa7d9b73a..c0620ee836f6 100644
--- a/doc/ReleaseNotes4.5.txt
+++ b/doc/ReleaseNotes4.5.txt
@@ -27,6 +27,11 @@
 - Correct results when comparing the string ""null"" with potentially
   null values.  [Bug 1857283]
 
+- Annotating a class with `@RunWith(JUnit4.class)` will always invoke the
+  default JUnit 4 runner in the current version of JUnit.  This default changed
+  from `JUnit4ClassRunner` in 4.4 to `BlockJUnit4ClassRunner` in 4.5 (see below),
+  and may change again.
+
 ### Extension ###
 
 - `BlockJUnit4Runner` is a new implementation of the standard JUnit 4
diff --git a/src/main/java/org/junit/runners/JUnit4.java b/src/main/java/org/junit/runners/JUnit4.java
new file mode 100644
index 000000000000..1e1f3479d322
--- /dev/null
+++ b/src/main/java/org/junit/runners/JUnit4.java
@@ -0,0 +1,22 @@
+package org.junit.runners;
+
+import org.junit.runners.model.InitializationError;
+
+/**
+ * Aliases the current default JUnit 4 class runner, for future-proofing. If
+ * future versions of JUnit change the default Runner class, they will also
+ * change the definition of this class. Developers wanting to explicitly tag a
+ * class as a JUnit 4 class should use {@code @RunWith(JUnit4.class)}, not,
+ * for example in JUnit 4.5, {@code @RunWith(BlockJUnit4ClassRunner.class)}.
+ * This is the only way this class should be used--any extension that
+ * depends on the implementation details of this class is likely to break
+ * in future versions.
+ */
+public final class JUnit4 extends BlockJUnit4ClassRunner {
+	/**
+	 * Constructs a new instance of the default runner
+	 */
+	public JUnit4(Class<?> klass) throws InitializationError {
+		super(klass);
+	}
+}
diff --git a/src/test/java/org/junit/tests/running/methods/AnnotationTest.java b/src/test/java/org/junit/tests/running/methods/AnnotationTest.java
index ccce9e06a320..7abf4c0d2ddd 100644
--- a/src/test/java/org/junit/tests/running/methods/AnnotationTest.java
+++ b/src/test/java/org/junit/tests/running/methods/AnnotationTest.java
@@ -17,6 +17,8 @@
 import org.junit.runner.Description;
 import org.junit.runner.JUnitCore;
 import org.junit.runner.Result;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 public class AnnotationTest extends TestCase {
 	static boolean run;
@@ -38,6 +40,19 @@ public void testAnnotatedMethod() throws Exception {
 		assertTrue(run);
 	}
 	
+	@RunWith(JUnit4.class)
+	static public class SimpleTestWithFutureProofExplicitRunner {
+		@Test public void success() {
+			run= true;
+		}
+	}
+
+	public void testAnnotatedMethodWithFutureProofExplicitRunner() throws Exception {
+		JUnitCore runner= new JUnitCore();
+		runner.run(SimpleTestWithFutureProofExplicitRunner.class);
+		assertTrue(run);
+	}
+	
 	static public class SetupTest {
 		@Before public void before() {
 			run= true;",JUnit4 runner as a pointer to the current default,1
"diff --git a/compiler/src/java_plugin/cpp/java_dubbo_generator.cpp b/compiler/src/java_plugin/cpp/java_dubbo_generator.cpp
index 885f00b5c00..8e7d7b19a76 100644
--- a/compiler/src/java_plugin/cpp/java_dubbo_generator.cpp
+++ b/compiler/src/java_plugin/cpp/java_dubbo_generator.cpp
@@ -433,7 +433,7 @@ static void PrintDubboInterface(
     p->Print(
     *vars,
     ""public interface $dubbo_interface$ {\n\n""
-    ""   static Class<?> clazz = init();\n"");
+    ""   static Class<?> clazz = init();\n\n"");
 
     for (int i = 0; i < service->method_count(); ++i) {
         const MethodDescriptor* method = service->method(i);
@@ -450,7 +450,7 @@ static void PrintDubboInterface(
        // Simple Future RPC
         p->Print(
             *vars,
-            ""   $CompletableFuture$<$output_type$> $lower_method_name$Async(\n$input_type$ request);\n\n"");
+            ""   $CompletableFuture$<$output_type$> $lower_method_name$Async(\n  $input_type$ request);\n\n"");
 //            p->Print(
 //            *vars,
 //            ""default $CompletableFuture$<$output_type$> $lower_method_name$Async(\n""
@@ -459,7 +459,7 @@ static void PrintDubboInterface(
     }
 
     p->Outdent();
-    p->Print("" }\n\n"");
+    p->Print(""  }\n\n"");
 
 }",adjust format of generated stub,1
"diff --git a/.github/workflows/build.yml b/.github/workflows/build.yml
new file mode 100644
index 0000000000..0f43a5b5e4
--- /dev/null
+++ b/.github/workflows/build.yml
@@ -0,0 +1,50 @@
+name: build
+
+on: [push, pull_request]
+
+jobs:
+  jvm:
+    runs-on: ubuntu-latest
+
+    strategy:
+      fail-fast: false
+      matrix:
+        java-version:
+          - 1.8
+          - 9
+          - 10
+          - 11
+          - 12
+          - 13
+          - 14
+          - 15-ea
+
+    steps:
+      - name: checkout
+        uses: actions/checkout@v2
+
+      - name: Configure JDK
+        uses: actions/setup-java@v1
+        with:
+          java-version: ${{ matrix.java-version }}
+
+      - name: Test
+        run: ./gradlew build
+
+  release:
+    runs-on: ubuntu-latest
+    if: ${{ github.ref == 'master' }}
+    needs:
+      - jvm
+
+    steps:
+      - name: checkout
+        uses: actions/checkout@v2
+
+      - name: Configure JDK
+        uses: actions/setup-java@v1
+        with:
+          java-version: 14
+
+      - name: Test
+        run: ./gradlew uploadArchives
diff --git a/.travis.yml b/.travis.yml
deleted file mode 100644
index 3185acbcbf..0000000000
--- a/.travis.yml
+++ /dev/null
@@ -1,29 +0,0 @@
-language: java
-
-jdk:
-  - openjdk8
-  - openjdk9
-  - openjdk10
-  - openjdk11
-  - openjdk12
-  - openjdk13
-  - openjdk14
-  - openjdk-ea
-
-install: ./gradlew assemble
-script: ./gradlew build
-
-after_success:
-  - .buildscript/deploy_snapshot.sh
-
-env:
-  global:
-    - secure: ""M0bjPTMwinz0uXN6qjXcpyfvhz/YX9W7ty4RdV90jMU8ZJxSdGdKXRy1N0TsMO8ciOQ2fryE/FpiX+arrphnVvqUmGBh386lGvj1rhgrVqXNqlGE23cQpzHsQ0nNqTGIxnoE4dmJF3PjWoYG+B4WbFsSb3PB7sEjpLq7klqGeHk=""
-    - secure: ""iL5BdYAmMaEDRKxNx1d9Zxn0tfJhCzXBGUvn+p7QGeQDUSVCdCc8cXS4ePbRj0401pK20nK1OouIi0lLP+z0QpZY6RrKIEncGOZeSFPQbS/vnZ7niCYJQdXCZ/GOlYUkAW2AsQl5bzzHYbHKX/TVgTuO3iFlbyeoZZuIjD3VaiM=""
-
-branches:
-  except:
-    - gh-pages
-
-notifications:
-  email: false",Switch to GitHub Actions,1
"diff --git a/README.md b/README.md
index d3c76302dcc..cf85b39a710 100644
--- a/README.md
+++ b/README.md
@@ -42,7 +42,7 @@ There's a [README](https://github.com/apache/dubbo-samples/tree/master/dubbo-sam
 
 ```xml
 <properties>
-    <dubbo.version>2.7.2</dubbo.version>
+    <dubbo.version>2.7.3</dubbo.version>
 </properties>
     
 <dependencies>",update default dependency to the latest version.,1
"diff --git a/jaxws/.hgtags b/jaxws/.hgtags
index 419e26ca52..5b9ee31ae5 100644
--- a/jaxws/.hgtags
+++ b/jaxws/.hgtags
@@ -976,3 +976,4 @@ a24e8384bfc34d7df62b6707b5e8b4d403b6a3b6 jdk8u202-b04
 7458800f0a265f1b8d939e982ffbed62f8262d22 jdk8u202-b07
 99fbc435f2faedf1dd68e80d679ebf4abd8c98c9 jdk8u202-b08
 a51e13337c7b4575acf7930ebf80ccbfc405fa17 jdk8u202-b25
+81d8126f05e5290e3974d4f3ea7360481676a78c jdk8u202-b26",Added tracking of sending operations .,0
"diff --git a/modules/web/src/core/editor/model/CustomEditor.js b/modules/web/src/core/editor/model/CustomEditor.js
index 6d0ec1e4188..3abccf703cd 100644
--- a/modules/web/src/core/editor/model/CustomEditor.js
+++ b/modules/web/src/core/editor/model/CustomEditor.js
@@ -13,15 +13,17 @@ class CustomEditor extends EventChannel {
      * @param {String} icon 
      * @param {Object} component 
      * @param {Function} propsProvider
+     * @param {Function} additionalProps
      * @param {string} customTitleClass
      */
-    constructor(id, title, icon, component, propsProvider, customTitleClass) {
+    constructor(id, title, icon, component, propsProvider, additionalProps, customTitleClass) {
         super();
         this._id = id;
         this._title = title;
         this._icon = icon;
         this._component = component;
         this._propsProvider = propsProvider;
+        this._additionalProps = additionalProps;
         this._customTitleClass = customTitleClass;
     }
 
@@ -45,6 +47,14 @@ class CustomEditor extends EventChannel {
         return this._propsProvider;
     }
 
+    set additionalProps(additionalProps) {
+        this._additionalProps = additionalProps;
+    }
+
+    get additionalProps() {
+        return this._additionalProps;
+    }
+
     get customTitleClass() {
         return this._customTitleClass;
     }
diff --git a/modules/web/src/core/editor/plugin.js b/modules/web/src/core/editor/plugin.js
index 3d68511aa48..a9896f58c65 100644
--- a/modules/web/src/core/editor/plugin.js
+++ b/modules/web/src/core/editor/plugin.js
@@ -229,15 +229,18 @@ class EditorPlugin extends Plugin {
      * @param {Object} command args
      */
     onOpenCustomEditorTab(args) {
-        const { id, title, icon, component, propsProvider, customTitleClass, activate } = args;
-        if (!this.getEditorByID(id)) {
-            const editor = new CustomEditor(id, title, icon, component, propsProvider, customTitleClass);
+        const { id, title, icon, component, propsProvider, additionalProps, customTitleClass, activate } = args;
+        const existingEditor = this.getEditorByID(id);
+        if (!existingEditor) {
+            const editor = new CustomEditor(id, title, icon, component, propsProvider,
+                additionalProps, customTitleClass);
             this.openedEditors.push(editor);
             if (activate || _.isNil(this.activeEditorID)) {
                 this.setActiveEditor(editor);
             }
         } else if (activate) {
-            this.setActiveEditor(this.getEditorByID(id));
+            existingEditor.additionalProps = additionalProps;
+            this.setActiveEditor(existingEditor);
         }
         this.reRender();
     }
diff --git a/modules/web/src/core/editor/views/EditorTabs.jsx b/modules/web/src/core/editor/views/EditorTabs.jsx
index 186e97889ec..588b7d06ae8 100644
--- a/modules/web/src/core/editor/views/EditorTabs.jsx
+++ b/modules/web/src/core/editor/views/EditorTabs.jsx
@@ -163,7 +163,7 @@ class EditorTabs extends View {
                 </TabPane>
             );
         } else if (editor instanceof CustomEditor) {
-            const { id, title, icon, propsProvider } = editor;
+            const { id, title, icon, propsProvider, additionalProps } = editor;
             const customTabDimensions = {
                 width: this.props.width, // custom tabs doesn't support split view hence full width
                 height: this.props.height - tabTitleHeight,
@@ -198,6 +198,7 @@ class EditorTabs extends View {
                         <editor.component
                             isActive={activeEditorID === id}
                             {...propsProvider()}
+                            {...additionalProps}
                             {...customTabDimensions}
                             panelResizeInProgress={this.props.panelResizeInProgress || this.state.panelResizeInProgress}
                         />
diff --git a/modules/web/src/core/layout/commands.js b/modules/web/src/core/layout/commands.js
index bbec8bb359d..671cd6018d7 100644
--- a/modules/web/src/core/layout/commands.js
+++ b/modules/web/src/core/layout/commands.js
@@ -13,6 +13,7 @@ export function getCommandDefinitions() {
             id: COMMANDS.SHOW_VIEW,
             argTypes: {
                 id: PropTypes.string.isRequired,
+                additionalProps: PropTypes.objectOf(Object),
             },
         },
         {
diff --git a/modules/web/src/core/layout/handlers.js b/modules/web/src/core/layout/handlers.js
index 5b324dab9c1..949978ce386 100644
--- a/modules/web/src/core/layout/handlers.js
+++ b/modules/web/src/core/layout/handlers.js
@@ -16,7 +16,7 @@ export function getHandlerDefinitions(layoutManager) {
     return [
         {
             cmdID: COMMANDS.SHOW_VIEW,
-            handler: (id) => {
+            handler: ({ id, additionalProps }) => {
                 const view = _.find(layoutManager.views, ['id', id]);
                 if (!_.isNil(view)) {
                     const { region, component, propsProvider, pluginID,
@@ -31,6 +31,7 @@ export function getHandlerDefinitions(layoutManager) {
                                 customTitleClass,
                                 component: withViewFeatures(component, pluginID),
                                 propsProvider,
+                                additionalProps,
                                 activate: true,
                             });
                             break;
diff --git a/modules/web/src/plugins/debugger/handlers.js b/modules/web/src/plugins/debugger/handlers.js
index e3dfa645d03..76b0413fa4b 100644
--- a/modules/web/src/plugins/debugger/handlers.js
+++ b/modules/web/src/plugins/debugger/handlers.js
@@ -40,7 +40,7 @@ export function getHandlerDefinitions(debuggerPlugin) {
                         file: activeEditor.file,
                         onSaveSuccess: () => {
                             dispatch(LAYOUT_COMMANDS.SHOW_BOTTOM_PANEL);
-",Fix a potential concurrency issue for loading CDB file .,0
"diff --git a/src/i18n/wildfire_i18n_en.properties b/src/i18n/wildfire_i18n_en.properties
index ddf249ada..271c1831b 100644
--- a/src/i18n/wildfire_i18n_en.properties
+++ b/src/i18n/wildfire_i18n_en.properties
@@ -155,6 +155,7 @@
 ##      Added key: 'sidebar.system-cache'
 ##      Added key: 'sidebar.system-cache.descr'
 ##      Added key: 'startup.starting.pubsub'
+##      Added section: 'pubsub.*'
 ##      Added section: 'system.cache.*'
 ##      Added section 'upgrade.database.*'
 
@@ -1660,4 +1661,69 @@ upgrade.database.unknown_db=Warning: database type unknown. You must manually up
 upgrade.database.interbase_db=Warning: automatic upgrades of Interbase are not supported. You \
     must manually upgrade your database.
 upgrade.database.success=Database upgraded successfully.
-upgrade.database.failure=Database upgrade failed. Please manually upgrade your database.
\ No newline at end of file
+upgrade.database.failure=Database upgrade failed. Please manually upgrade your database.
+
+# Publish-Subscribe
+
+startup.starting.pubsub=Publish-Subscribe domain: {0}
+pubsub.form.default.title=Default Node configuration
+pubsub.form.default.instruction=Configure the default configuration to apply for newly created nodes.
+pubsub.form.conf.title=Node configuration
+pubsub.form.conf.instruction=Please provide the configuration for node ""{0}"".
+pubsub.form.conf.deliver_payloads=Deliver payloads with event notifications
+pubsub.form.conf.notify_config=Notify subscribers when the node configuration changes
+pubsub.form.conf.notify_delete=Notify subscribers when the node is deleted
+pubsub.form.conf.notify_retract=Notify subscribers when items are removed from the node
+pubsub.form.conf.presence_based=Only deliver notifications to available users
+pubsub.form.conf.send_item_subscribe=Send items to new subscribers
+pubsub.form.conf.subscribe=Whether to allow subscriptions
+pubsub.form.conf.subscription_required=Mandatory to configure new subscriptions
+pubsub.form.conf.persist_items=Persist items to storage
+pubsub.form.conf.max_items=Max number of items to persist
+pubsub.form.conf.max_payload_size=Max payload size in bytes
+pubsub.form.conf.type=Specify the type of payload data to be provided at this node
+pubsub.form.conf.body_xslt=Message body XSLT
+pubsub.form.conf.dataform_xslt=Payload XSLT
+pubsub.form.conf.access_model=Specify who may subscribe and retrieve items
+pubsub.form.conf.publish_model=Specify the publisher model
+pubsub.form.conf.current_approver=Specify the current subscription approver(s)
+pubsub.form.conf.roster_allowed=Roster groups allowed to subscribe
+pubsub.form.conf.contact=People to contact with questions
+pubsub.form.conf.description=Description of the node
+pubsub.form.conf.language=Default language
+pubsub.form.conf.owner=Node owners
+pubsub.form.conf.publisher=Node publishers
+pubsub.form.conf.short_name=Short name for the node
+pubsub.form.conf.itemreply=Select entity that should receive replies to items
+pubsub.form.conf.replyroom=Multi-user chat room to which replies should be sent
+pubsub.form.conf.replyto=Users to which replies should be sent
+pubsub.form.conf.leaf_node_association=Users allowed to associate leaf nodes with the node
+pubsub.form.conf.leaf_node_whitelist=Enter list of users
+pubsub.form.conf.leaf_nodes_max=The maximum number of leaf nodes that can be associated with a collection
+pubsub.notification.message.body=This message contains an event notification
+pubsub.form.subscription.title=Subscription configuration
+pubsub.form.subscription.instruction=Please provide the subscription configuration for node ""{0}"".
+pubsub.form.subscription.deliver=Enable delivery?
+pubsub.form.subscription.digest=Receive digest notifications?
+pubsub.form.subscription.digest_frequency=Minimum number of milliseconds between sending any two notification digests
+pubsub.form.subscription.expire=Requested lease period
+pubsub.form.subscription.include_body=Receive message body in addition to payload?
+pubsub.form.subscription.show-values=Presence types which are allowed to receive notifications
+pubsub.form.subscription.subscription_type=Receive notification of items or nodes
+pubsub.form.subscription.subscription_depth=Receive notification from all or direct child nodes
+pubsub.form.subscription.keywords=Keyword to match
+pubsub.form.authorization.title=PubSub subscriber request
+pubsub.form.authorization.instruction=To approve this entitys subscription request, click \
+    the OK button. To deny the request, click the cancel button.
+pubsub.form.authorization.node=Node ID
+pubsub.form.authorization.subscriber=Subscriber Address
+pubsub.form.authorization.allow=Allow this JID to subscribe to this pubsub node?
+pubsub.command.pending-subscriptions.label=Authorize Pending Subscriptions
+pubsub.command.pending-subscriptions.title=Authorize Pending Subscriptions
+pubsub.command.pending-subscriptions.instruction=Select node to get pending subscriptions.
+pubsub.command.pending-subscriptions.node=Node
+pubsub.command.pending-subscriptions.error.idrequired=ID of node is missing.
+pubsub.command.pending-subscriptions.error.manyIDs=More than one nodeID was selected.
+pubsub.command.pending-subscriptions.success=Pending subscriptions have been sent.
+pubsub.command.pending-subscriptions.error.forbidden=You do not have enough permissions.
+pubsub.command.pending-subscriptions.error.badid=Invalid node ID was selected.
\ No newline at end of file",Remove deprecated code for pre - assigned resource IDs .,0
"diff --git a/src/main/java/org/springframework/metrics/instrument/MeterRegistry.java b/src/main/java/org/springframework/metrics/instrument/MeterRegistry.java
index 582681d79..8709cb0f0 100644
--- a/src/main/java/org/springframework/metrics/instrument/MeterRegistry.java
+++ b/src/main/java/org/springframework/metrics/instrument/MeterRegistry.java
@@ -308,7 +308,12 @@ public interface MeterRegistry {
     /**
      * Execute an algorithm to bind one or more metrics to the registry.
      */
-    MeterRegistry bind(MeterBinder... binders);
+    default MeterRegistry bind(MeterBinder... binders) {
+        for (MeterBinder binder : binders) {
+            binder.bindTo(this);
+        }
+        return this;
+    }
 
     /**
      * Record metrics on Guava caches.",Integrate LoadPlans into UniqueEntityLoader ( PoC ),0
"diff --git a/retrofit/src/main/java/retrofit/RequestBuilder.java b/retrofit/src/main/java/retrofit/RequestBuilder.java
index a4960a6343..40ebe1ff52 100644
--- a/retrofit/src/main/java/retrofit/RequestBuilder.java
+++ b/retrofit/src/main/java/retrofit/RequestBuilder.java
@@ -35,6 +35,7 @@ final class RequestBuilder implements RequestInterceptor.RequestFacade {
   private final RestMethodInfo.ParamUsage[] paramUsages;
   private final String requestMethod;
   private final boolean isSynchronous;
+  private final boolean isObservable;
 
   private final FormUrlEncodedTypedOutput formBody;
   private final MultipartTypedOutput multipartBody;
@@ -50,6 +51,7 @@ final class RequestBuilder implements RequestInterceptor.RequestFacade {
     paramUsages = methodInfo.requestParamUsage;
     requestMethod = methodInfo.requestMethod;
     isSynchronous = methodInfo.isSynchronous;
+    isObservable = methodInfo.isObservable;
 
     headers = new ArrayList<Header>();
     if (methodInfo.headers != null) {
@@ -163,7 +165,7 @@ void setArguments(Object[] args) {
       return;
     }
     int count = args.length;
-    if (!isSynchronous) {
+    if (!isSynchronous && !isObservable) {
       count -= 1;
     }
     for (int i = 0; i < count; i++) {",Last argument should be handled for observable methods,1
"diff --git a/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RestIntegTestTask.groovy b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RestIntegTestTask.groovy
deleted file mode 100644
index 99e4a2be5bc..00000000000
--- a/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RestIntegTestTask.groovy
+++ /dev/null
@@ -1,96 +0,0 @@
-/*
- * Licensed to Elasticsearch under one or more contributor
- * license agreements. See the NOTICE file distributed with
- * this work for additional information regarding copyright
- * ownership. Elasticsearch licenses this file to you under
- * the Apache License, Version 2.0 (the ""License""); you may
- * not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.elasticsearch.gradle.test
-
-import org.elasticsearch.gradle.testclusters.ElasticsearchCluster
-import org.elasticsearch.gradle.testclusters.RestTestRunnerTask
-import org.gradle.api.DefaultTask
-import org.gradle.api.Task
-import org.gradle.api.tasks.testing.Test
-
-/**
- * A wrapper task around setting up a cluster and running rest tests.
- */
-class RestIntegTestTask extends DefaultTask {
-
-    protected Test runner
-
-    RestIntegTestTask() {
-        runner = project.tasks.create(""${name}Runner"", RestTestRunnerTask.class)
-        super.dependsOn(runner)
-
-        ElasticsearchCluster cluster = project.testClusters.create(name)
-        runner.useCluster cluster
-
-        runner.include('**/*IT.class')
-        runner.systemProperty('tests.rest.load_packaged', 'false')
-
-        if (System.getProperty(""tests.rest.cluster"") == null) {
-            if (System.getProperty(""tests.cluster"") != null) {
-                throw new IllegalArgumentException(""tests.rest.cluster and tests.cluster must both be null or non-null"")
-            }
-
-            runner.nonInputProperties.systemProperty('tests.rest.cluster', ""${-> cluster.allHttpSocketURI.join("","")}"")
-            runner.nonInputProperties.systemProperty('tests.cluster', ""${-> cluster.transportPortURI}"")
-            runner.nonInputProperties.systemProperty('tests.clustername', ""${-> cluster.getName()}"")
-        } else {
-            if (System.getProperty(""tests.cluster"") == null) {
-                throw new IllegalArgumentException(""tests.rest.cluster and tests.cluster must both be null or non-null"")
-            }
-            // an external cluster was specified and all responsibility for cluster configuration is taken by the user
-            runner.systemProperty('tests.rest.cluster', System.getProperty(""tests.rest.cluster""))
-            runner.systemProperty('test.cluster', System.getProperty(""tests.cluster""))
-        }
-
-        // this must run after all projects have been configured, so we know any project
-        // references can be accessed as a fully configured
-        project.gradle.projectsEvaluated {
-            if (enabled == false) {
-                runner.enabled = false
-                return // no need to add cluster formation tasks if the task won't run!
-            }
-        }
-    }
-
-    @Override
-    public Task dependsOn(Object... dependencies) {
-        runner.dependsOn(dependencies)
-        for (Object dependency : dependencies) {
-            if (dependency instanceof Fixture) {
-                runner.finalizedBy(((Fixture)dependency).getStopTask())
-            }
-        }
-        return this
-    }
-
-    @Override
-    public void setDependsOn(Iterable<?> dependencies) {
-        runner.setDependsOn(dependencies)
-        for (Object dependency : dependencies) {
-            if (dependency instanceof Fixture) {
-                runner.finalizedBy(((Fixture)dependency).getStopTask())
-            }
-        }
-    }
-
-    public void runner(Closure configure) {
-        project.tasks.getByName(""${name}Runner"").configure(configure)
-    }
-
-}
diff --git a/buildSrc/src/main/java/org/elasticsearch/gradle/SystemPropertyCommandLineArgumentProvider.java b/buildSrc/src/main/java/org/elasticsearch/gradle/SystemPropertyCommandLineArgumentProvider.java
index 7e808724035..cfabb5575f6 100644
--- a/buildSrc/src/main/java/org/elasticsearch/gradle/SystemPropertyCommandLineArgumentProvider.java
+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/SystemPropertyCommandLineArgumentProvider.java
@@ -5,11 +5,16 @@ import org.gradle.process.CommandLineArgumentProvider;
 
 import java.util.LinkedHashMap;
 import java.util.Map;
+import java.util.function.Supplier;
 import java.util.stream.Collectors;
 
 public class SystemPropertyCommandLineArgumentProvider implements CommandLineArgumentProvider {
     private final Map<String, Object> systemProperties = new LinkedHashMap<>();
 
+    public void systemProperty(String key, Supplier<String> value) {
+        systemProperties.put(key, value);
+    }
+
     public void systemProperty(String key, Object value) {
         systemProperties.put(key, value);
     }
@@ -18,7 +23,12 @@ public class SystemPropertyCommandLineArgumentProvider implements CommandLineArg
     public Iterable<String> asArguments() {
         return systemProperties.entrySet()
             .stream()
-            .map(entry -> ""-D"" + entry.getKey() + ""="" + entry.getValue())
+            .map(
+                entry -> ""-D""
+                    + entry.getKey()
+                    + ""=""
+                    + (entry.getValue() instanceof Supplier ? ((Supplier) entry.getValue()).get() : entry.getValue())
+            )
             .collect(Collectors.toList());
     }
 
diff --git a/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/Fixture.groovy b/buildSrc/src/main/java/org/elasticsearch/gradle/test/Fixture.java
similarity index 89%
rename from buildSrc/src/main/groovy/org/elasticsearch/gradle/test/Fixture.groovy
rename to buildSrc/src/main/java/org/elasticsearch/gradle/test/Fixture.java
index 498a1627b35..551acec4e75 100644
--- a/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/Fixture.groovy
+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/test/Fixture.java
@@ -7,7 +7,7 @@
  * not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *    http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
@@ -16,7 +16,8 @@
  * specific language governing permissions and limitations
  * under the License.
  */
-package org.elasticsearch.gradle.test
+
+package org.elasticsearch.gradle.test;
 
 /**
  * Any object that can produce an accompanying stop task, meant to tear down
@@ -25,6 +26,6 @@ package org.elasticsearch.gradle.test
 public interface Fixture {
 
     /** A task which will stop this fixture. This should be used as a finalizedBy for any tasks that use the fixture. */
-    public Object getStopTask()
+    Object getStopTask();
 
 }
diff --git a/buildSrc/src/main/java/org/elasticsearch/gradle/test/RestIntegTestTask.java b/buildSrc/src/main/java/org/elasticsearch/gradle/test/RestIntegTestTask.java
new file mode 100644
index 00000000000..4a05067df45
--- /dev/null
+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/test/RestIntegTestTask.java
@@ -0,0 +1,104 @@
+/*
+ * Licensed to Elasticsearch under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch licenses this file to you under
+ * the Apache License, Version 2.0 (the ""License""); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.elasticsearch.gradle.test;
+
+import org.elasticsearch.gradle.SystemPropertyCommandLineArgumentProvider;
+import org.elasticsearch.gradle.testclusters.ElasticsearchCluster;
+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;
+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;
+import org.gradle.api.Action;
+import org.gradle.api.DefaultTask;
+import org.gradle.api.NamedDomainObjectContainer;
+import org.gradle.api.Project;
+import org.gradle.api.Task;
+
+public class RestIntegTestTask extends DefaultTask {
+
+    protected RestTestRunnerTask runner;
+    private static final String TESTS_REST_CLUSTER = ""tests.rest.cluster"";
+    private static final String TESTS_CLUSTER = ""tests.cluster"";
+    private static final String TESTS_CLUSTER_NAME = ""tests.clustername"";
+
+    public RestIntegTestTask() {
+        Project project = getProject();
+        String name = getName();
+        runner = project.getTasks().create(name + ""Runner"", RestTestRunnerTask.class);
+        super.dependsOn(runner);
+        @SuppressWarnings(""unchecked"")
+        NamedDomainObjectContainer<ElasticsearchCluster> testClusters = (NamedDomainObjectContainer<ElasticsearchCluster>) project
+            .getExtensions()
+            .getByName(TestClustersPlugin.EXTENSION_NAME);
+        ElasticsearchCluster cluster = testClusters.create(name);
+        runner.useCluster(cluster);
+        runner.include(""**/*IT.class"");
+        runner.systemProperty(""tests.rest.load_packaged"", Boolean.FALSE.toString());
+        if (System.getProperty(TESTS_REST_CLUSTER) == null) {
+            if (System.getProperty(TESTS_CLUSTER) != null || System.getProperty(TESTS_CLUSTER_NAME) != null) {
+                throw new IllegalArgumentException(
+                    String.format(""%s, %s, and %s must all be null or non-null"", TESTS_REST_CLUSTER, TESTS_CLUSTER, TESTS_CLUSTER_NAME)
+                );
+            }
+            SystemPropertyCommandLineArgumentProvider runnerNonInputProperties = (SystemPropertyCommandLineArgumentProvider) runner
+                .getExtensions()
+                .getByName(""nonInputProperties"");
+            runnerNonInputProperties.systemProperty(TESTS_REST_CLUSTER, () -> String.join("","", cluster.getAllHttpSocketURI()));
+            runnerNonInputProperties.systemProperty(TESTS_CLUSTER, () -> String.join("","", cluster.getAllTransportPortURI()));
+            runnerNonInputProperties.systemProperty(TESTS_CLUSTER_NAME, cluster::getName);
+        } else {
+            if (System.getProperty(TESTS_CLUSTER) == null || System.getProperty(TESTS_CLUSTER_NAME) == null) {
+                throw new IllegalArgumentException(
+                    String.format(""%s, %s, and %s must all be null or non-null"", TESTS_REST_CLUSTER, TESTS_CLUSTER, TESTS_CLUSTER_NAME)
+                );
+            }
+        }
+        // this must run after all projects have been configured, so we know any project
+        // references can be accessed as a fully configured
+        project.getGradle().projectsEvaluated(x -> {
+            if (isEnabled() == false) {
+                runner.setEnabled(false);
+            }
+        });
+    }
+
+    @Override
+    public Task dependsOn(Object... dependencies) {
+        runner.dependsOn(dependencies);
+        for (Object dependency : dependencies) {
+            if (dependency instanceof Fixture) {
+                runner.finalizedBy(((Fixture) dependency).getStopTask());
+            }
+        }
+        return this;
+    }
+
+    @Override
+    public void setDependsOn(Iterable<?> dependencies) {
+        runner.setDependsOn(dependencies);
+        for (Object dependency : dependencies) {
+            if (dependency instanceof Fixture) {
+                runner.finalizedBy(((Fixture) dependency).getStopTask());
+            }
+        }
+    }
+
+    public void runner(Action<? super RestTestRunnerTask> configure) {
+        configure.execute(runner);
+    }
+}",Move Elasticsearch APIs to REST APIs section .,0
"diff --git a/appengine/.project b/appengine/.project
index c7fc93149..e964d8042 100644
--- a/appengine/.project
+++ b/appengine/.project
@@ -1,6 +1,6 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
 <projectDescription>
-	<name>gridworks appengine</name>
+	<name>gridworks-appengine</name>
 	<comment></comment>
 	<projects>
 	</projects>
diff --git a/extensions/jython/.project b/extensions/jython/.project
index 8999f66f4..6deffdf48 100644
--- a/extensions/jython/.project
+++ b/extensions/jython/.project
@@ -1,6 +1,6 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
 <projectDescription>
-	<name>gridworks jython</name>
+	<name>gridworks-jython</name>
 	<comment></comment>
 	<projects>
 	</projects>
diff --git a/extensions/sample-extension/.project b/extensions/sample-extension/.project
index 294e44993..1c17169c4 100644
--- a/extensions/sample-extension/.project
+++ b/extensions/sample-extension/.project
@@ -1,6 +1,6 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
 <projectDescription>
-	<name>gridworks sample-extension</name>
+	<name>gridworks-sample-extension</name>
 	<comment></comment>
 	<projects>
 	</projects>
diff --git a/main/.classpath b/main/.classpath
index 067c64ff7..d96531809 100644
--- a/main/.classpath
+++ b/main/.classpath
@@ -28,7 +28,7 @@
 	<classpathentry kind=""lib"" path=""webapp/WEB-INF/lib/jrdf-0.5.6.jar""/>
 	<classpathentry kind=""lib"" path=""tests/server/lib/mockito-all-1.8.4.jar"" sourcepath=""tests/server/lib-src/mockito-all-1.8.4-sources.jar""/>
 	<classpathentry kind=""lib"" path=""tests/server/lib/testng-5.12.1.jar"" sourcepath=""tests/server/lib-src/testng-5.12.1-sources.jar""/>
-	<classpathentry kind=""lib"" path=""/gridworks server/lib/servlet-api-2.5.jar"" sourcepath=""/gridworks server/lib-src/servlet-api-2.5-sources.jar""/>
+	<classpathentry kind=""lib"" path=""/Users/dfhuynh/dev/standalones/gridworks/server/lib/servlet-api-2.5.jar"" sourcepath=""/gridworks server/lib-src/servlet-api-2.5-sources.jar""/>
 	<classpathentry kind=""lib"" path=""webapp/WEB-INF/lib/jcl-over-slf4j-1.5.6.jar"" sourcepath=""webapp/WEB-INF/lib-src/jcl-over-slf4j-1.5.6-sources.jar""/>
 	<classpathentry kind=""lib"" path=""webapp/WEB-INF/lib/slf4j-api-1.5.6.jar"" sourcepath=""webapp/WEB-INF/lib/slf4j-api-1.5.6.jar""/>
 	<classpathentry kind=""lib"" path=""webapp/WEB-INF/lib/slf4j-log4j12-1.5.6.jar"" sourcepath=""webapp/WEB-INF/lib-src/slf4j-log4j12-1.5.6-sources.jar""/>
diff --git a/server/.project b/server/.project
index be4b2f9d5..e3c41ddb0 100644
--- a/server/.project
+++ b/server/.project
@@ -1,12 +1,17 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
 <projectDescription>
-  <name>gridworks server</name>
-  <projects/>
-  <buildSpec>
-    <buildCommand>
-      <name>org.eclipse.jdt.core.javabuilder</name>
-    </buildCommand>
-  </buildSpec>
-  <natures>
-    <nature>org.eclipse.jdt.core.javanature</nature>
-  </natures>
-</projectDescription>
\ No newline at end of file
+	<name>gridworks-server</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>
diff --git a/server/IDEs/eclipse/Gridworks.launch b/server/IDEs/eclipse/Gridworks.launch
index bde9d67c1..f7465acd7 100644
--- a/server/IDEs/eclipse/Gridworks.launch
+++ b/server/IDEs/eclipse/Gridworks.launch
@@ -1,13 +1,13 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
 <launchConfiguration type=""org.eclipse.jdt.launching.localJavaApplication"">
 <listAttribute key=""org.eclipse.debug.core.MAPPED_RESOURCE_PATHS"">
-<listEntry value=""/gridworks server/src/com/metaweb/gridworks/Gridworks.java""/>
+<listEntry value=""/gridworks-server/src/com/metaweb/gridworks/Gridworks.java""/>
 </listAttribute>
 <listAttribute key=""org.eclipse.debug.core.MAPPED_RESOURCE_TYPES"">
 <listEntry value=""1""/>
 </listAttribute>
 <stringAttribute key=""org.eclipse.jdt.launching.MAIN_TYPE"" value=""com.metaweb.gridworks.Gridworks""/>
-<stringAttribute key=""org.eclipse.jdt.launching.PROJECT_ATTR"" value=""gridworks server""/>
+<stringAttribute key=""org.eclipse.jdt.launching.PROJECT_ATTR"" value=""gridworks-server""/>
 <stringAttribute key=""org.eclipse.jdt.launching.VM_ARGUMENTS"" value=""-Dgridworks.autoreloading=true""/>
 <stringAttribute key=""org.eclipse.jdt.launching.WORKING_DIRECTORY"" value=""${workspace_loc:gridworks}""/>
 </launchConfiguration>",Remove public visibility from the custom schedule method .,0
"diff --git a/README.md b/README.md
index a01e122946c..94a4090b160 100644
--- a/README.md
+++ b/README.md
@@ -42,7 +42,7 @@ There's a [README](https://github.com/apache/dubbo-samples/tree/master/dubbo-sam
 
 ```xml
 <properties>
-    <dubbo.version>2.7.4.1</dubbo.version>
+    <dubbo.version>2.7.5</dubbo.version>
 </properties>
     
 <dependencies>",upgrade dependency to 2.7.5,1
"diff --git a/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java
index 2f3a83567a4..c27ffd8cb05 100644
--- a/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java
+++ b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java
@@ -18,7 +18,6 @@
 
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.URLBuilder;
-import org.apache.dubbo.common.Version;
 import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
@@ -34,7 +33,6 @@
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Protocol;
-import org.apache.dubbo.rpc.RpcException;
 import org.apache.dubbo.rpc.cluster.Cluster;
 import org.apache.dubbo.rpc.cluster.Configurator;
 import org.apache.dubbo.rpc.cluster.Router;
@@ -560,43 +558,44 @@ private void destroyUnusedInvokers(Map<String, Invoker<T>> oldUrlInvokerMap, Map
 
     @Override
     public List<Invoker<T>> doList(Invocation invocation) {
-        if (forbidden) {
-            // 1. No service provider 2. Service providers are disabled
-            throw new RpcException(RpcException.FORBIDDEN_EXCEPTION, ""No provider available from registry "" +
-                    getUrl().getAddress() + "" for service "" + getConsumerUrl().getServiceKey() + "" on consumer "" +
-                    NetUtils.getLocalHost() + "" use dubbo version "" + Version.getVersion() +
-                    "", please check status of providers(disabled, not registered or in blacklist)."");
-        }
-
-        if (multiGroup) {
-            return this.invokers == null ? Collections.emptyList() : this.invokers;
-        }
-
-        List<Invoker<T>> invokers = null;
-        try {
-            // Get invokers from cache, only runtime routers will be executed.
-            invokers = routerChain.route(getConsumerUrl(), invocation);
-        } catch (Throwable t) {
-            logger.error(""Failed to execute router: "" + getUrl() + "", cause: "" + t.getMessage(), t);
-        }
-
-
-        // FIXME Is there any need of failing back to Constants.ANY_VALUE or the first available method invokers when invokers is null?
-        /*Map<String, List<Invoker<T>>> localMethodInvokerMap = this.methodInvokerMap; // local reference
-        if (localMethodInvokerMap != null && localMethodInvokerMap.size() > 0) {
-            String methodName = RpcUtils.getMethodName(invocation);
-            invokers = localMethodInvokerMap.get(methodName);
-            if (invokers == null) {
-                invokers = localMethodInvokerMap.get(Constants.ANY_VALUE);
-            }
-            if (invokers == null) {
-                Iterator<List<Invoker<T>>> iterator = localMethodInvokerMap.values().iterator();
-                if (iterator.hasNext()) {
-                    invokers = iterator.next();
-                }
-            }
-        }*/
-        return invokers == null ? Collections.emptyList() : invokers;
+//        if (forbidden) {
+//            // 1. No service provider 2. Service providers are disabled
+//            throw new RpcException(RpcException.FORBIDDEN_EXCEPTION, ""No provider available from registry "" +
+//                    getUrl().getAddress() + "" for service "" + getConsumerUrl().getServiceKey() + "" on consumer "" +
+//                    NetUtils.getLocalHost() + "" use dubbo version "" + Version.getVersion() +
+//                    "", please check status of providers(disabled, not registered or in blacklist)."");
+//        }
+//
+//        if (multiGroup) {
+//            return this.invokers == null ? Collections.emptyList() : this.invokers;
+//        }
+//
+//        List<Invoker<T>> invokers = null;
+//        try {
+//            // Get invokers from cache, only runtime routers will be executed.
+//            invokers = routerChain.route(getConsumerUrl(), invocation);
+//        } catch (Throwable t) {
+//            logger.error(""Failed to execute router: "" + getUrl() + "", cause: "" + t.getMessage(), t);
+//        }
+//
+//
+//        // FIXME Is there any need of failing back to Constants.ANY_VALUE or the first available method invokers when invokers is null?
+//        /*Map<String, List<Invoker<T>>> localMethodInvokerMap = this.methodInvokerMap; // local reference
+//        if (localMethodInvokerMap != null && localMethodInvokerMap.size() > 0) {
+//            String methodName = RpcUtils.getMethodName(invocation);
+//            invokers = localMethodInvokerMap.get(methodName);
+//            if (invokers == null) {
+//                invokers = localMethodInvokerMap.get(Constants.ANY_VALUE);
+//            }
+//            if (invokers == null) {
+//                Iterator<List<Invoker<T>>> iterator = localMethodInvokerMap.values().iterator();
+//                if (iterator.hasNext()) {
+//                    invokers = iterator.next();
+//                }
+//            }
+//        }*/
+//        return invokers == null ? Collections.emptyList() : invokers;
+        return invokers;
     }
 
     @Override","Don't merge, disable routers",1
"diff --git a/src/java/voldemort/client/protocol/admin/AdminClient.java b/src/java/voldemort/client/protocol/admin/AdminClient.java
index f16315d46..3787176be 100644
--- a/src/java/voldemort/client/protocol/admin/AdminClient.java
+++ b/src/java/voldemort/client/protocol/admin/AdminClient.java
@@ -546,11 +546,20 @@ public class AdminClient {
         }
     }
 
+    /**
+     * For a particular store and node, runs the replication job
+     * 
+     * @param restoringNodeId The node which we want to restore
+     * @param cluster The cluster metadata
+     * @param storeDef The definition of the store which we want to restore
+     * @param executorService An executor to allow us to run the replication job
+     */
     private void restoreStoreFromReplication(final int restoringNodeId,
                                              final Cluster cluster,
                                              final StoreDefinition storeDef,
                                              final ExecutorService executorService) {
-        logger.info(""Restoring data for store:"" + storeDef.getName());
+        logger.info(""Restoring data for store "" + storeDef.getName() + "" on node ""
+                    + restoringNodeId);
         RoutingStrategyFactory factory = new RoutingStrategyFactory();
         RoutingStrategy strategy = factory.updateRoutingStrategy(storeDef, cluster);
 
@@ -589,9 +598,18 @@ public class AdminClient {
         }
     }
 
-    private Map<Integer, List<Integer>> getReplicationMapping(Cluster cluster,
-                                                              int nodeId,
-                                                              RoutingStrategy strategy) {
+    /**
+     * For a particular node and routing strategy, generates a mapping of node
+     * to their corresponding list of replica partitions.
+     * 
+     * @param cluster The cluster metadata
+     * @param nodeId The id of the node
+     * @param strategy The routing strategy used
+     * @return Mapping of node to replica partitions of nodeId
+     */
+    public Map<Integer, List<Integer>> getReplicationMapping(Cluster cluster,
+                                                             int nodeId,
+                                                             RoutingStrategy strategy) {
         Map<Integer, Integer> partitionsToNodeMapping = RebalanceUtils.getCurrentPartitionMapping(cluster);
         HashMap<Integer, List<Integer>> restoreMapping = new HashMap<Integer, List<Integer>>();
 
@@ -618,6 +636,23 @@ public class AdminClient {
         return restoreMapping;
     }
 
+    /**
+     * For a particular node id and routing strategy, finds all the partitions
+     * which are replicas to the partitions belonging to this particular node.
+     * This returned list includes the partitions belonging to the particular
+     * node as well. <br>
+     * 
+     * For example, say we have 4 nodes, N_0 => P_3, N_1 => P_0, N_2 => P_1 and
+     * N_3 => P_2 and if zone routing is being used then the replica mapping is
+     * P_3 => P_1, P_0 => P_1, P_1 => P_3 and P_2 => P_3. So if we're moving
+     * node N_0, the replicas of partition P_3 would be P_1 and P_2 ( in other
+     * words we need to read from nodes N_2 and N_3 respectively)
+     * 
+     * @param cluster The cluster metadata
+     * @param nodeId The id of the node
+     * @param strategy Routing strategy used
+     * @return List of replica partitions
+     */
     private List<Integer> getNodePartitions(Cluster cluster, int nodeId, RoutingStrategy strategy) {
         List<Integer> partitionsList = new ArrayList<Integer>(cluster.getNodeById(nodeId)
                                                                      .getPartitionIds());
diff --git a/src/java/voldemort/client/rebalance/RebalanceClusterPlan.java b/src/java/voldemort/client/rebalance/RebalanceClusterPlan.java
index 239f4174d..60273a500 100644
--- a/src/java/voldemort/client/rebalance/RebalanceClusterPlan.java
+++ b/src/java/voldemort/client/rebalance/RebalanceClusterPlan.java
@@ -276,13 +276,13 @@ public class RebalanceClusterPlan {
     public static void main(String args[]) throws IOException {
         OptionParser parser = new OptionParser();
         parser.accepts(""help"", ""print help information"");
-        parser.accepts(""cluster-xml"", ""[REQUIRED] cluster xml file location"")
+        parser.accepts(""cluster-xml"", ""[REQUIRED] old cluster xml file location"")
               .withRequiredArg()
               .describedAs(""path"");
         parser.accepts(""stores-xml"", ""[REQUIRED] stores xml file location"")
               .withRequiredArg()
               .describedAs(""path"");
-        parser.accepts(""old-cluster-xml"", ""[REQUIRED] old cluster xml file location"")
+        parser.accepts(""target-cluster-xml"", ""[REQUIRED] new cluster xml file location"")
               .withRequiredArg()
               .describedAs(""path"");
 
@@ -296,20 +296,21 @@ public class RebalanceClusterPlan {
         Set<String> missing = CmdUtils.missing(options,
                                                ""cluster-xml"",
                                                ""stores-xml"",
-                                               ""old-cluster-xml"");
+                                               ""target-cluster-xml"");
         if(missing.size() > 0) {
             System.err.println(""Missing required arguments: "" + Joiner.on("", "").join(missing));
             parser.printHelpOn(System.err);
             System.exit(1);
         }
 
-        String newClusterXml = (String) options.valueOf(""cluster-xml"");
-        String oldClusterXml = (String) options.valueOf(""old-cluster-xml"");
+        String newClusterXml = (String) options.valueOf(""target-cluster-xml"");
+        String oldClusterXml = (String) options.valueOf(""cluster-xml"");
         String storesXml = (String) options.valueOf(""stores-xml"");
 
         if(!Utils.isReadableFile(newClusterXml) || !Utils.isReadableFile(oldClusterXml)
            || !Utils.isReadableFile(storesXml)) {
             System.err.println(""Could not read files"");
+            parser.printHelpOn(System.err);
             System.exit(1);
         }
 
diff --git a/src/java/voldemort/server/protocol/admin/AdminServiceRequestHandler.java b/src/java/voldemort/server/protocol/admin/AdminServiceRequestHandler.java
index 1a428a99a..fc91cb3a8 100644
--- a/src/java/voldemort/server/protocol/admin/AdminServiceRequestHandler.java
+++ b/src/java/voldemort/server/protocol/admin/AdminServiceRequestHandler.java
@@ -51,7 +51,6 @@ import voldemort.store.ErrorCodeMapper;
 import voldemort.store.StorageEngine;
 import voldemort.store.StoreDefinition;
 import voldemort.store.StoreOperationFailureException;
-import voldemort.store.grandfather.GrandfatherState;
 import voldemort.store.metadata.MetadataStore;
 import voldemort.store.readonly.FileFetcher;
 import voldemort.store.readonly.ReadOnlyStorageConfiguration;
@@ -259,8 +258,8 @@ public class AdminServiceRequestHandler implements RequestHandler {
 
             if(metadataStore.getServerState().equals(MetadataStore.VoldemortState.NORMAL_SERVER)) {
                 // If normal, set the state + rebalancer state
-                metadataStore.put(MetadataStore.GRANDFATHERING_INFO,
-                                  new GrandfatherState(plans, storeDefs));
+                // metadataStore.put(MetadataStore.GRANDFATHERING_INFO,
+                // new GrandfatherState(plans, storeDefs));
                 metadataStore.put(MetadataStore.SERVER_STATE_KEY,
                                   MetadataStore.VoldemortState.GRANDFATHERING_SERVER);
             }
diff --git a/src/java/voldemort/store/metadata/MetadataStore.java b/src/java/voldemort/store/metadata/MetadataStore.java
index 69b1b1339..615e03367 100644
--- a/src/java/voldemort/store/metadata/MetadataStore.java
+++ b/src/java/voldemort/store/metadata/MetadataStore.java
@@ -496,8 +496,9 @@ public class MetadataStore implements StorageEngine<ByteArray, byte[], byte[]> {
             RebalancerState rebalancerState = (RebalancerState) value.getValue();
             valueStr = rebalancerState.toJsonString();
         } else if(GRANDFATHERING_INFO.equals(key)) {
-            GrandfatherState grandfatherState = (GrandfatherState) value.getValue();
-            valueStr = grandfatherState.toJsonString();
+            // GrandfatherState grandfatherState = (GrandfatherState)
+            // value.getValue();
+            // valueStr = grandfatherState.toJsonString();
         } else if(SERVER_STATE_KEY.equals(key) || NODE_ID_KEY.equals(key)) {
             valueStr = value.getValue().toString();
         } else {
@@ -537,12 +538,13 @@ public class MetadataStore implements StorageEngine<ByteArray, byte[], byte[]> {
                 valueObject = new RebalancerState(Arrays.asList(RebalancePartitionsInfo.create(valueString)));
             }
         } else if(GRANDFATHERING_INFO.equals(key)) {
-            String valueString = value.getValue();
-            if(valueString.startsWith(""["")) {
-                valueObject = GrandfatherState.create(valueString);
-            } else {
-                valueObject = new GrandfatherState(Arrays.asList(RebalancePartitionsInfo.create(valueString)));
-            }
+            // String valueString = value.getValue();
+            // if(valueString.startsWith(""["")) {
+            // valueObject = GrandfatherState.create(valueString);
+            // } else {
+            // valueObject = new
+            // GrandfatherState(Arrays.asList(RebalancePartitionsInfo.create(valueString)));
+            // }
         } else {
             throw new VoldemortException(""Unhandled key:'"" + key
                                          + ""' for String to Object serialization."");
diff --git a/test/common/voldemort/ServerTestUtils.java b/test/common/voldemort/ServerTestUtils.java
index 77b1b1197..10d324d1a 100644
--- a/test/common/voldemort/ServerTestUtils.java
+++ b/test/common/voldemort/ServerTestUtils.java
@@ -22,8 +22,10 @@ import java.io.IOException;
 import java.io.StringReader;
 import java.net.ServerSocket;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.Date;
 import java.util.HashMap;
+import java.util.LinkedList;
 import java.util.List;
 import java.util.Properties;
 
@@ -40,6 +42,7 @@ import voldemort.client.protocol.admin.AdminClient;
 import voldemort.client.protocol.admin.AdminClientConfig;
 import voldemort.cluster.Cluster;
 import voldemort.cluster.Node;
+import voldemort.cluster.Zone;
 import voldemort.routing.RoutingStrategyType;
 import voldemort.serialization.SerializerDefinition;
 import voldemort.server.AbstractSocketService;
@@ -72,6 +75,7 @@ import voldemort.xml.ClusterMapper;
 import voldemort.xml.StoreDefinitionsMapper;
 
 import com.google.common.collect.ImmutableList;
+import com.google.common.collect.Lists;
 
 /**
  * Helper functions for testing with real server implementations
@@ -277,6 +281,64 @@ public class ServerTestUtils {
         return new Cluster(""test-cluster"", nodes);
     }
 
+    /**
+     * Returns a cluster with <b>numberOfNodes</b> nodes in <b>numberOfZones</b>
+     * zones. It is important that <b>numberOfNodes</b> be divisible by
+     * <b>numberOfZones</b>
+     * 
+     * @param numberOfNodes Number of nodes in the cluster
+     * @param numberOfZones Number of zones
+     * @return Cluster
+     */
+    public static Cluster getLocalCluster(int numberOfNodes, int numberOfZones) {
+
+        if(numberOfZones > 0 && numberOfNodes > 0 && numberOfNodes % numberOfZones != 0) {
+            throw new VoldemortException(""The number of nodes ("" + numberOfNodes
+",Reduce wait between same targets to from 1s to 100ms,0
"diff --git a/.github/workflows/sonatype.yaml b/.github/workflows/sonatype.yaml
index 55619adb17..b306aa1b71 100644
--- a/.github/workflows/sonatype.yaml
+++ b/.github/workflows/sonatype.yaml
@@ -23,7 +23,7 @@ on:
 
 jobs:
   build:
-    if: github.repository_owner == 'mybatis'
+    if: github.repository_owner == 'mybatis' && ! contains(toJSON(github.event.head_commit.message), '[maven-release-plugin]')
     runs-on: ubuntu-latest
     steps:
       - uses: actions/checkout@v2
diff --git a/travis/after_success.sh b/travis/after_success.sh
index ea1fad6c0a..3a47192e81 100755
--- a/travis/after_success.sh
+++ b/travis/after_success.sh
@@ -1,6 +1,6 @@
 #!/bin/bash
 #
-#    Copyright 2009-2019 the original author or authors.
+#    Copyright 2009-2020 the original author or authors.
 #
 #    Licensed under the Apache License, Version 2.0 (the ""License"");
 #    you may not use this file except in compliance with the License.",fixed my bad attempt to apply Sam \' s patch : ) .,0
"diff --git a/docs/reference/ml/anomaly-detection/apis/get-job-stats.asciidoc b/docs/reference/ml/anomaly-detection/apis/get-job-stats.asciidoc
index 76d918d68c2..d6246e73417 100644
--- a/docs/reference/ml/anomaly-detection/apis/get-job-stats.asciidoc
+++ b/docs/reference/ml/anomaly-detection/apis/get-job-stats.asciidoc
@@ -237,25 +237,16 @@ this value indicates the latest size.
 (string) For internal use. The type of result.
 
 `model_size_stats`.`total_by_field_count`:::
-(long) The number of `by` field values that were analyzed by the models.
-+
---
-NOTE: The `by` field values are counted separately for each detector and
-partition.
-
---
+(long) The number of `by` field values that were analyzed by the models. This 
+value is cumulative for all detectors.
 
 `model_size_stats`.`total_over_field_count`:::
-(long) The number of `over` field values that were analyzed by the models.
-+
---
-NOTE: The `over` field values are counted separately for each detector and
-partition.
-
---
+(long) The number of `over` field values that were analyzed by the models. This 
+value is cumulative for all detectors.
 
 `model_size_stats`.`total_partition_field_count`:::
-(long) The number of `partition` field values that were analyzed by the models.
+(long) The number of `partition` field values that were analyzed by the models. 
+This value is cumulative for all detectors.
 
 `model_size_stats`.`timestamp`:::
 (date) The timestamp of the `model_size_stats` according to the timestamp of the",Remove unused config definition,0
"diff --git a/src/main/java/com/xtremelabs/robolectric/tester/org/apache/http/FakeHttpLayer.java b/src/main/java/com/xtremelabs/robolectric/tester/org/apache/http/FakeHttpLayer.java
index ab3d14770..ca610298c 100644
--- a/src/main/java/com/xtremelabs/robolectric/tester/org/apache/http/FakeHttpLayer.java
+++ b/src/main/java/com/xtremelabs/robolectric/tester/org/apache/http/FakeHttpLayer.java
@@ -18,6 +18,7 @@ public class FakeHttpLayer {
     List<HttpEntityStub.ResponseRule> httpResponseRules = new ArrayList<HttpEntityStub.ResponseRule>();
     HttpResponse defaultHttpResponse;
     private HttpResponse defaultResponse;
+    private boolean logHttpRequests = false;
 
     public void addPendingHttpResponse(int statusCode, String responseBody) {
         addPendingHttpResponse(new TestHttpResponse(statusCode, responseBody));
@@ -72,8 +73,14 @@ public class FakeHttpLayer {
     }
 
     public HttpResponse emulateRequest(HttpHost httpHost, HttpRequest httpRequest, HttpContext httpContext, RequestDirector requestDirector) throws HttpException, IOException {
+        if (logHttpRequests) {
+            System.out.println(""  <-- "" + httpRequest.getRequestLine());
+        }
         HttpResponse httpResponse = findResponse(httpRequest);
-
+        if (logHttpRequests) {
+            System.out.println(""  --> "" + (httpResponse == null ? null : httpResponse.getStatusLine().getStatusCode()));
+        }
+        
         if (httpResponse == null) {
             throw new RuntimeException(""Unexpected call to execute, no pending responses are available. See Robolectric.addPendingResponse()."");
         }
@@ -110,6 +117,14 @@ public class FakeHttpLayer {
         httpResponseRules.clear();
     }
 
+    public void logHttpRequests() {
+        logHttpRequests = true;
+    }
+
+    public void silence() {
+        logHttpRequests = false;
+    }
+
     public static class RequestMatcherResponseRule implements HttpEntityStub.ResponseRule {
         private RequestMatcher requestMatcher;
         private HttpResponse responseToGive;",Enhanced the path cache to be more efficient and allow for different caching modes .,0
"diff --git a/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java
index e379bf07441e..79a0887e5c44 100644
--- a/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java
+++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java
@@ -51,6 +51,10 @@ public void connect(OkHttpClient client) {
   }
 
   @Override public void onResponse(Call call, Response response) {
+    processResponse(response);
+  }
+
+  public void processResponse(Response response) {
     try {
       //noinspection ConstantConditions main body is never null
       BufferedSource source = response.body().source();
diff --git a/okhttp-sse/src/main/java/okhttp3/sse/EventSources.java b/okhttp-sse/src/main/java/okhttp3/sse/EventSources.java
index 04a5f1501bbe..77f596c5f265 100644
--- a/okhttp-sse/src/main/java/okhttp3/sse/EventSources.java
+++ b/okhttp-sse/src/main/java/okhttp3/sse/EventSources.java
@@ -17,6 +17,7 @@
 
 import okhttp3.OkHttpClient;
 import okhttp3.Request;
+import okhttp3.Response;
 import okhttp3.internal.sse.RealEventSource;
 
 public final class EventSources {
@@ -30,6 +31,11 @@ public static EventSource.Factory createFactory(final OkHttpClient client) {
     };
   }
 
+  public static void processResponse(Response response, EventSourceListener listener) {
+    RealEventSource eventSource = new RealEventSource(response.request(), listener);
+    eventSource.processResponse(response);
+  }
+
   private EventSources() {
     throw new AssertionError();
   }",API for handling an unexpected SSE response,1
"diff --git a/pom.xml b/pom.xml
index 33e528d5e2..159babc2e6 100644
--- a/pom.xml
+++ b/pom.xml
@@ -55,7 +55,7 @@
     <protobuf.version>2.5.0</protobuf.version>
     <jackson.version>2.2.2</jackson.version>
     <wire.version>1.0.1</wire.version>
-	<simplexml.version>2.7.1</simplexml.version>
+    <simplexml.version>2.7.1</simplexml.version>
 
     <!-- Test Dependencies -->
     <junit.version>4.10</junit.version>
diff --git a/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXMLConverter.java b/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXMLConverter.java
index 83ef6bad32..98d36887f1 100644
--- a/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXMLConverter.java
+++ b/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXMLConverter.java
@@ -20,7 +20,7 @@ public class SimpleXMLConverter implements Converter {
   private static final String CHARSET = ""UTF-8"";
   private static final String MIME_TYPE = ""application/xml; charset="" + CHARSET;
 
-  private Serializer serializer = null;
+  private final Serializer serializer;
 
   public SimpleXMLConverter(Serializer serializer) {
     this.serializer = serializer;
@@ -45,10 +45,6 @@ public TypedOutput toBody(Object source) {
       serializer.write(source, osw);
       osw.flush();
       return new TypedByteArray(MIME_TYPE, bos.toByteArray());
-    } catch (final NullPointerException e) {
-      throw new AssertionError(e);
-    } catch (IOException e) {
-      throw new AssertionError(e);
     } catch (Exception e) {
       throw new AssertionError(e);
     } finally {
diff --git a/retrofit-converters/simplexml/src/test/java/retrofit/converter/SimpleXMLConverterTest.java b/retrofit-converters/simplexml/src/test/java/retrofit/converter/SimpleXMLConverterTest.java
index d9b0b2fcf3..8eaa53b69e 100644
--- a/retrofit-converters/simplexml/src/test/java/retrofit/converter/SimpleXMLConverterTest.java
+++ b/retrofit-converters/simplexml/src/test/java/retrofit/converter/SimpleXMLConverterTest.java
@@ -27,7 +27,6 @@ public class SimpleXMLConverterTest {
 	private final Converter converter = initConverter();
 
 	private static Converter initConverter() {
-
 		Format format = new Format(0, null, new HyphenStyle(), Verbosity.HIGH);
 		Persister persister = new Persister(format);
 		return new SimpleXMLConverter(persister);",Code review,0
"diff --git a/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-editor.ts b/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-editor.ts
index 9b86762d54..c637306c9f 100644
--- a/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-editor.ts
+++ b/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-editor.ts
@@ -18,9 +18,12 @@ import { EditorView, DecorationSet, NodeView } from 'prosemirror-view';
 import { findParentNodeOfType, NodeWithPos, findChildrenByType, findChildren } from 'prosemirror-utils';
 import { EditorState, TextSelection, Plugin, PluginKey, Transaction } from 'prosemirror-state';
 
+import zenscroll from 'zenscroll';
+
 import { nodeDecoration } from '../../api/decoration';
-import { firstNode, lastNode } from '../../api/node';
+import { firstNode, lastNode, editingRootScrollContainerElement } from '../../api/node';
 import { selectionIsWithin } from '../../api/selection';
+import { bodyElement } from '../../api/dom';
 
 import { findFootnoteNode, selectedFootnote, selectedNote } from './footnote';
 
@@ -53,6 +56,24 @@ export function footnoteEditorActivationPlugin() {
         return key.getState(state);
       },
     },
+
+    view: () => ({
+      // scroll footnote into view (if necessary) when note editor is active
+      update: (view: EditorView) => {
+        const note = selectedNote(view.state.selection);
+        if (note) {
+          const footnote = findFootnoteNode(view.state.doc, note.node.attrs.ref);
+          if (footnote) {
+            const footnoteEl = view.nodeDOM(footnote.pos);
+            if (footnoteEl) {
+              const body = bodyElement(view);
+              const scroller = zenscroll.createScroller(body, 0, 30);
+              scroller.intoView(footnoteEl as HTMLElement);
+            }
+          }
+        }
+      }
+    })
   });
 }
 
diff --git a/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-styles.css b/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-styles.css
index e8f8b8cea3..4e0854b57d 100644
--- a/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-styles.css
+++ b/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-styles.css
@@ -37,12 +37,12 @@
 }
 
 .ProseMirror .body.editing-footnote {
-  bottom: 100px;
+  bottom: 160px;
   border-bottom: 1px solid;
 }
 
 .ProseMirror .notes.editing-footnote {
-  height: 90px;
+  height: 150px;
   padding-top: 10px;
   z-index: 5;
 }
diff --git a/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote.ts b/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote.ts
index 7455927f70..8d98e35ff0 100644
--- a/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote.ts
+++ b/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote.ts
@@ -86,7 +86,11 @@ const extension: Extension = {
           },
         ],
         writer: (output: PandocOutput, node: ProsemirrorNode) => {
-          output.writeNote(node);
+          // don't write empty footnotes (otherwise in block or section mode they gobble up
+          // the section below them)
+          if (node.childCount > 0) {
+            output.writeNote(node);
+          }
         },
       },
     },",Remove CollectionUtils .,0
"diff --git a/modules/web/src/plugins/ballerina/diagram/views/default/components/nodes/while-node.jsx b/modules/web/src/plugins/ballerina/diagram/views/default/components/nodes/while-node.jsx
index 8808dd08bf3..addc6f9cb73 100644
--- a/modules/web/src/plugins/ballerina/diagram/views/default/components/nodes/while-node.jsx
+++ b/modules/web/src/plugins/ballerina/diagram/views/default/components/nodes/while-node.jsx
@@ -57,7 +57,6 @@ class WhileNode extends React.Component {
                     expression={expression}
                     editorOptions={editorOptions}
                     model={model}
-                    body={model.body}
                 />
             </g>
         );
diff --git a/modules/web/src/plugins/ballerina/diagram/views/default/components/nodes/while-statement-decorator.jsx b/modules/web/src/plugins/ballerina/diagram/views/default/components/nodes/while-statement-decorator.jsx
index 644d49c33c2..d6dbdb9eda8 100644
--- a/modules/web/src/plugins/ballerina/diagram/views/default/components/nodes/while-statement-decorator.jsx
+++ b/modules/web/src/plugins/ballerina/diagram/views/default/components/nodes/while-statement-decorator.jsx
@@ -170,8 +170,6 @@ class WhileStatementDecorator extends React.Component {
         const pointX = bBox.getRight() - breakpointHalf;
         const { model: { viewState } } = this.props;
         const statementBBox = viewState.components['statement-box'];
-        const { designer } = this.context;
-        const headerHeight = viewState.components['block-header'].h;
         const pointY = statementBBox.y - breakpointHalf;
         return (
             <Breakpoint
@@ -348,7 +346,7 @@ class WhileStatementDecorator extends React.Component {
                     width={statementBBox.w}
                     height={statementBBox.h}
                     baseComponent='rect'
-                    dropTarget={this.props.body}
+                    dropTarget={this.props.model.body}
                     enableDragBg
                     enableCenterOverlayLine={!this.props.disableDropzoneMiddleLineOverlay}
                 />
@@ -361,7 +359,7 @@ class WhileStatementDecorator extends React.Component {
                         onClick={this.openExpressionEditor}
                         className='invisible-rect'
                     />
-                    {expression && <title> {expression.text} </title>}
+                    {expression && <title> {this.props.editorOptions.model.getSource(true)} </title>}
                 </g>
                 { isBreakpoint && this.renderBreakpointIndicator() }
                 {this.props.children}
@@ -383,7 +381,6 @@ WhileStatementDecorator.defaultProps = {
     draggable: null,
     children: null,
     undeletable: false,
-    editorOptions: null,
     parameterEditorOptions: null,
     utilities: null,
     parameterBbox: null,
@@ -394,17 +391,14 @@ WhileStatementDecorator.defaultProps = {
         jump: false,
     },
     disableDropzoneMiddleLineOverlay: false,
+    isDebugHit: false,
 };
 
 WhileStatementDecorator.propTypes = {
-    draggable: PropTypes.func,
     title: PropTypes.string.isRequired,
     model: PropTypes.instanceOf(Node).isRequired,
     children: PropTypes.arrayOf(React.PropTypes.node),
-    utilities: PropTypes.element,",added test for to_date and to_char templates,0
"diff --git a/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/DubboBootstrap.java b/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/DubboBootstrap.java
index 4c6662afa61..7d1fb5ea808 100644
--- a/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/DubboBootstrap.java
+++ b/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/DubboBootstrap.java
@@ -1033,12 +1033,11 @@ private ServiceInstance createServiceInstance(String serviceName, String host, i
     }
 
     public void destroy() {
+        // for compatibility purpose
+        DubboShutdownHook.destroyAll();
 
         if (started.compareAndSet(true, false)
                 && destroyed.compareAndSet(false, true)) {
-            // for compatibility purpose
-            DubboShutdownHook.destroyAll();
-
             unregisterServiceInstance();
             unexportMetadataService();
             unexportServices();",Revert '[Dubbo-5813]prevent destroyAll method of DubboShutdownHook being invoked twice when using Spring (#5814)' (#5818) <enter>  <enter> This reverts commit 5194791f130eb34d6ed75bc43ef731289a12148a.,1
"diff --git a/src/main/java/org/junit/internal/runners/model/EachTestNotifier.java b/src/main/java/org/junit/internal/runners/model/EachTestNotifier.java
index 3e28ecb023ce..74cf30c2d884 100644
--- a/src/main/java/org/junit/internal/runners/model/EachTestNotifier.java
+++ b/src/main/java/org/junit/internal/runners/model/EachTestNotifier.java
@@ -4,6 +4,7 @@
 package org.junit.internal.runners.model;
 
 
+import org.junit.internal.AssumptionViolatedException;
 import org.junit.runner.Description;
 import org.junit.runner.notification.Failure;
 import org.junit.runner.notification.RunNotifier;
@@ -28,6 +29,10 @@ public void addFailure(Throwable targetException) {
 		fNotifier.fireTestFailure(new Failure(fDescription, targetException));
 	}
 
+	public void addFailedAssumption(AssumptionViolatedException e) {
+		fNotifier.fireTestAssumptionFailed(new Failure(fDescription, e));
+	}
+
 	public void fireTestFinished() {
 		fNotifier.fireTestFinished(fDescription);
 	}
diff --git a/src/main/java/org/junit/runner/Result.java b/src/main/java/org/junit/runner/Result.java
index 4038566f5343..888e0c037ce7 100644
--- a/src/main/java/org/junit/runner/Result.java
+++ b/src/main/java/org/junit/runner/Result.java
@@ -91,6 +91,11 @@ public void testIgnored(Description description) throws Exception {
 			fIgnoreCount++;
 			fIgnoredDuringExecution= true;
 		}
+		
+		@Override
+		public void testAssumptionFailure(Failure failure) {
+			// do nothing: same as passing (for 4.5; may change in 4.6)
+		}
 	}
 
 	/**
diff --git a/src/main/java/org/junit/runner/notification/RunListener.java b/src/main/java/org/junit/runner/notification/RunListener.java
index f6a1b1f50305..ffe8134a6d16 100644
--- a/src/main/java/org/junit/runner/notification/RunListener.java
+++ b/src/main/java/org/junit/runner/notification/RunListener.java
@@ -1,5 +1,6 @@
 package org.junit.runner.notification;
 
+import org.junit.internal.AssumptionViolatedException;
 import org.junit.runner.Description;
 import org.junit.runner.Result;
 
@@ -68,6 +69,17 @@ public void testFinished(Description description) throws Exception {
 	public void testFailure(Failure failure) throws Exception {
 	}
 
+	/**
+	 * Called when an atomic test flags that it assumes a condition that is
+	 * false
+	 * 
+	 * @param failure
+	 *            describes the test that failed and the
+	 *            {@link AssumptionViolatedException} that was thrown
+	 */
+	public void testAssumptionFailure(Failure failure) {
+	}
+
 	/**
 	 * Called when a test will not be run, generally because a test method is annotated 
 	 * with {@link org.junit.Ignore}.
diff --git a/src/main/java/org/junit/runner/notification/RunNotifier.java b/src/main/java/org/junit/runner/notification/RunNotifier.java
index b794f8d98d63..9164634acdbd 100644
--- a/src/main/java/org/junit/runner/notification/RunNotifier.java
+++ b/src/main/java/org/junit/runner/notification/RunNotifier.java
@@ -4,6 +4,7 @@
 import java.util.Iterator;
 import java.util.List;
 
+import org.junit.internal.AssumptionViolatedException;
 import org.junit.runner.Description;
 import org.junit.runner.Result;
 
@@ -97,6 +98,23 @@ protected void notifyListener(RunListener each) throws Exception {
 		}.run();
 	}
 
+	/**
+	 * Invoke to tell listeners that an atomic test flagged that it assumed
+	 * something false.
+	 * 
+	 * @param failure
+	 *            the description of the test that failed and the
+	 *            {@link AssumptionViolatedException} thrown
+	 */
+	public void fireTestAssumptionFailed(final Failure failure) {
+		new SafeNotifier() {
+			@Override
+			protected void notifyListener(RunListener each) throws Exception {
+				each.testAssumptionFailure(failure);
+			};
+		}.run();
+	}
+
 	/**
 	 * Invoke to tell listeners that an atomic test was ignored.
 	 * @param description the description of the ignored test
diff --git a/src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java b/src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java
index a7aae19b1f31..b4b9b2236beb 100644
--- a/src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java
+++ b/src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java
@@ -72,7 +72,7 @@ protected void runChild(FrameworkMethod method, RunNotifier notifier) {
 		try {
 			methodBlock(method).evaluate();
 		} catch (AssumptionViolatedException e) {
-			// do nothing: same as passing (for 4.5; may change in 4.6)
+			eachNotifier.addFailedAssumption(e);
 		} catch (Throwable e) {
 			eachNotifier.addFailure(e);
 		} finally {
diff --git a/src/test/java/org/junit/tests/experimental/AssumptionTest.java b/src/test/java/org/junit/tests/experimental/AssumptionTest.java
index e38e648a3ca6..153b942405f0 100644
--- a/src/test/java/org/junit/tests/experimental/AssumptionTest.java
+++ b/src/test/java/org/junit/tests/experimental/AssumptionTest.java
@@ -17,6 +17,8 @@
 import org.junit.internal.AssumptionViolatedException;
 import org.junit.runner.JUnitCore;
 import org.junit.runner.Result;
+import org.junit.runner.notification.Failure;
+import org.junit.runner.notification.RunListener;
 
 public class AssumptionTest {
 	public static class HasFailingAssumption {
@@ -35,6 +37,22 @@ public void failedAssumptionsMeanPassing() {
 		assertThat(result.getFailureCount(), is(0));
 	}
 
+	private static int assumptionFailures= 0;
+	@Test
+	public void failedAssumptionsCanBeDetectedByListeners() {
+		assumptionFailures= 0;
+		JUnitCore core= new JUnitCore();
+		core.addListener(new RunListener() {
+			@Override
+			public void testAssumptionFailure(Failure failure) {
+				assumptionFailures++;
+			}
+		});
+		core.run(HasFailingAssumption.class);
+		
+		assertThat(assumptionFailures, is(1));
+	}
+
 	public static class HasPassingAssumption {
 		@Test
 		public void assumptionsFail() {
diff --git a/src/test/java/org/junit/tests/listening/TextListenerTest.java b/src/test/java/org/junit/tests/listening/TextListenerTest.java
index c08dd70100b2..08d0dce28ab6 100644
--- a/src/test/java/org/junit/tests/listening/TextListenerTest.java
+++ b/src/test/java/org/junit/tests/listening/TextListenerTest.java
@@ -65,10 +65,4 @@ private String convert(String string) {
 		writer.println();
 		return string.replace(""\n"", resultsStream.toString());
 	}
-	
-	public static class AssumptionFailureTest {
-		@Test public void failsAssumption() {
-			assumeThat(""Greece"", is(""Spain""));
-		}
-	}
 }",Failing assumptions can be listened for.,1
"diff --git a/build.gradle b/build.gradle
index 0cf8201289fe..c1bcceb26f36 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,3 +1,5 @@
+import net.ltgt.gradle.errorprone.CheckSeverity
+
 buildscript {
   ext.versions = [
       'airline': '0.8',
@@ -127,6 +129,11 @@ subprojects { project ->
     errorproneJavac 'com.google.errorprone:javac:9+181-r4173-1'
     errorprone 'com.google.errorprone:error_prone_core:2.3.3'
   }
+  tasks.withType(JavaCompile).configureEach {
+    options.errorprone {
+      check(""MissingOverride"", CheckSeverity.ERROR)
+    }
+  }
 
   apply plugin: 'org.jetbrains.dokka'
   dokka {
diff --git a/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java
index a1d3015421e3..9a61c457bb16 100644
--- a/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java
+++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java
@@ -220,7 +220,7 @@ private Request.Builder request() {
   }
 
   private static class LogRecorder extends HttpLoggingInterceptorTest.LogRecorder {
-    LogRecorder assertLogMatch(String pattern) {
+    @Override LogRecorder assertLogMatch(String pattern) {
       return (LogRecorder) super.assertLogMatch(""\\[\\d+ ms] "" + pattern);
     }
   }
diff --git a/okhttp/src/test/java/okhttp3/DelegatingSSLSocket.java b/okhttp/src/test/java/okhttp3/DelegatingSSLSocket.java
index e6c931b6ad01..6647dfc4d926 100644
--- a/okhttp/src/test/java/okhttp3/DelegatingSSLSocket.java
+++ b/okhttp/src/test/java/okhttp3/DelegatingSSLSocket.java
@@ -287,6 +287,7 @@ public DelegatingSSLSocket(SSLSocket delegate) {
 
   // Java 9 methods.
 
+  @SuppressWarnings(""MissingOverride"") // Can only override with JDK 9+
   public SSLSession getHandshakeSession() {
     try {
       return (SSLSession) SSLSocket.class.getMethod(""getHandshakeSession"").invoke(delegate);
@@ -295,6 +296,7 @@ public SSLSession getHandshakeSession() {
     }
   }
 
+  @SuppressWarnings(""MissingOverride"") // Can only override with JDK 9+
   public String getApplicationProtocol() {
     try {
       return (String) SSLSocket.class.getMethod(""getApplicationProtocol"").invoke(delegate);
@@ -303,6 +305,7 @@ public String getApplicationProtocol() {
     }
   }
 
+  @SuppressWarnings(""MissingOverride"") // Can only override with JDK 9+
   public String getHandshakeApplicationProtocol() {
     try {
       return (String) SSLSocket.class.getMethod(""getHandshakeApplicationProtocol"").invoke(delegate);
@@ -311,6 +314,7 @@ public String getHandshakeApplicationProtocol() {
     }
   }
 
+  @SuppressWarnings(""MissingOverride"") // Can only override with JDK 9+
   public <T> Socket setOption(SocketOption<T> name, T value) throws IOException {
     try {
       SSLSocket.class.getMethod(""setOption"", SocketOption.class, Object.class).invoke(delegate, name, value);
@@ -320,7 +324,10 @@ public <T> Socket setOption(SocketOption<T> name, T value) throws IOException {
     }
   }
 
-  @SuppressWarnings(""unchecked"") // Using reflection to delegate.
+  @SuppressWarnings({
+      ""MissingOverride"", // Can only override with JDK 9+
+      ""unchecked"" // Using reflection to delegate.
+  })
   public <T> T getOption(SocketOption<T> name) throws IOException {
     try {
       return (T) SSLSocket.class.getMethod(""getOption"", SocketOption.class).invoke(delegate, name);
@@ -329,7 +336,10 @@ public <T> T getOption(SocketOption<T> name) throws IOException {
     }
   }
 
-  @SuppressWarnings(""unchecked"") // Using reflection to delegate.
+  @SuppressWarnings({
+      ""MissingOverride"", // Can only override with JDK 9+
+      ""unchecked"" // Using reflection to delegate.
+  })
   public Set<SocketOption<?>> supportedOptions() {
     try {
       return (Set<SocketOption<?>>) SSLSocket.class.getMethod(""supportedOptions"").invoke(delegate);
diff --git a/okhttp/src/test/java/okhttp3/URLConnectionTest.java b/okhttp/src/test/java/okhttp3/URLConnectionTest.java
index cc5c4c0eeb16..813853d1ace8 100644
--- a/okhttp/src/test/java/okhttp3/URLConnectionTest.java
+++ b/okhttp/src/test/java/okhttp3/URLConnectionTest.java
@@ -746,24 +746,24 @@ private void testConnectViaProxy(ProxyConfig proxyConfig) throws Exception {
 
   private void testConnectViaSocketFactory(boolean useHttps) throws IOException {
     SocketFactory uselessSocketFactory = new SocketFactory() {
-      public Socket createSocket() {
+      @Override public Socket createSocket() {
         throw new IllegalArgumentException(""useless"");
       }
 
-      public Socket createSocket(InetAddress host, int port) {
+      @Override public Socket createSocket(InetAddress host, int port) {
         return null;
       }
 
-      public Socket createSocket(InetAddress address, int port, InetAddress localAddress,
+      @Override public Socket createSocket(InetAddress address, int port, InetAddress localAddress,
           int localPort) {
         return null;
       }
 
-      public Socket createSocket(String host, int port) {
+      @Override public Socket createSocket(String host, int port) {
         return null;
       }
 
-      public Socket createSocket(String host, int port, InetAddress localHost, int localPort) {
+      @Override public Socket createSocket(String host, int port, InetAddress localHost, int localPort) {
         return null;
       }
     };
@@ -3807,15 +3807,15 @@ private static class RecordingTrustManager implements X509TrustManager {
       this.delegate = delegate;
     }
 
-    public X509Certificate[] getAcceptedIssuers() {
+    @Override public X509Certificate[] getAcceptedIssuers() {
       return delegate.getAcceptedIssuers();
     }
 
-    public void checkClientTrusted(X509Certificate[] chain, String authType) {
+    @Override public void checkClientTrusted(X509Certificate[] chain, String authType) {
       calls.add(""checkClientTrusted "" + certificatesToString(chain));
     }
 
-    public void checkServerTrusted(X509Certificate[] chain, String authType) {
+    @Override public void checkServerTrusted(X509Certificate[] chain, String authType) {
       calls.add(""checkServerTrusted "" + certificatesToString(chain));
     }
 
diff --git a/okhttp/src/test/java/okhttp3/UrlComponentEncodingTester.java b/okhttp/src/test/java/okhttp3/UrlComponentEncodingTester.java
index 5875bc39703b..bc2f054fc911 100644
--- a/okhttp/src/test/java/okhttp3/UrlComponentEncodingTester.java
+++ b/okhttp/src/test/java/okhttp3/UrlComponentEncodingTester.java
@@ -306,13 +306,13 @@ private void testUri(
 
   public enum Encoding {
     IDENTITY {
-      public String encode(int codePoint) {
+      @Override public String encode(int codePoint) {
         return new String(new int[] {codePoint}, 0, 1);
       }
     },
 
     PERCENT {
-      public String encode(int codePoint) {
+      @Override public String encode(int codePoint) {
         ByteString utf8 = ByteString.encodeUtf8(IDENTITY.encode(codePoint));
         Buffer percentEncoded = new Buffer();
         for (int i = 0; i < utf8.size(); i++) {",Make error-prone validate missing override annotations,1
"diff --git a/dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/exchange/support/header/HeartBeatTaskTest.java b/dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/exchange/support/header/HeartBeatTaskTest.java
index 3249d46f168..9e0ee0fd985 100644
--- a/dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/exchange/support/header/HeartBeatTaskTest.java
+++ b/dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/exchange/support/header/HeartBeatTaskTest.java
@@ -21,6 +21,7 @@
 import org.apache.dubbo.common.timer.HashedWheelTimer;
 import org.apache.dubbo.remoting.Channel;
 import org.apache.dubbo.remoting.exchange.Request;
+
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -63,10 +64,8 @@ public void testHeartBeat() throws Exception {
         long now = System.currentTimeMillis();
 
         url = url.addParameter(DUBBO_VERSION_KEY, ""2.1.1"");
-        channel.setAttribute(
-                HeaderExchangeHandler.KEY_READ_TIMESTAMP, now);
-        channel.setAttribute(
-                HeaderExchangeHandler.KEY_WRITE_TIMESTAMP, now);
+        channel.setAttribute(HeartbeatHandler.KEY_READ_TIMESTAMP, now);
+        channel.setAttribute(HeartbeatHandler.KEY_WRITE_TIMESTAMP, now);
 
         heartbeatTimer.newTimeout(heartbeatTimerTask, 250, TimeUnit.MILLISECONDS);",unify heartbeat stamp key,1
"diff --git a/config-provisioning/src/main/resources/configdefinitions/config-server-security.def b/config-provisioning/src/main/resources/configdefinitions/config-server-security.def
deleted file mode 100644
index cfd5c9c04e5..00000000000
--- a/config-provisioning/src/main/resources/configdefinitions/config-server-security.def
+++ /dev/null
@@ -1,9 +0,0 @@
-# Copyright 2019 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.
-namespace=config.provisioning
-
-athenzProviderHostname      string
-controllerHostIdentity      string
-configServerHostIdentity    string
-proxyHostIdentity           string
-tenantHostIdentity          string
-tenantIdentity              string",Clarifies model_size_stats . total_xxx_field_count objects and removes notes in GET job stats API docs .,0
"diff --git a/api/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/AbstractCasEvent.java b/api/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/AbstractCasEvent.java
index 7a919fdaf8..939660a257 100644
--- a/api/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/AbstractCasEvent.java
+++ b/api/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/AbstractCasEvent.java
@@ -1,5 +1,6 @@
 package org.apereo.cas.support.events;
 
+import org.apache.commons.lang3.builder.ToStringBuilder;
 import org.apereo.cas.authentication.Authentication;
 import org.springframework.context.ApplicationEvent;
 
@@ -22,10 +23,14 @@ public abstract class AbstractCasEvent extends ApplicationEvent implements Seria
     /**
      * Instantiates a new Abstract cas sso event.
      *
-     * @param source                 the source
+     * @param source the source
      */
     public AbstractCasEvent(final Object source) {
         super(source);
     }
 
+    @Override
+    public String toString() {
+        return new ToStringBuilder(this).toString();
+    }
 }
diff --git a/core/cas-server-core-events/src/main/java/org/apereo/cas/support/events/listener/DefaultCasEventListener.java b/core/cas-server-core-events/src/main/java/org/apereo/cas/support/events/listener/DefaultCasEventListener.java
index 23c7cda0ae..d395da1c8a 100644
--- a/core/cas-server-core-events/src/main/java/org/apereo/cas/support/events/listener/DefaultCasEventListener.java
+++ b/core/cas-server-core-events/src/main/java/org/apereo/cas/support/events/listener/DefaultCasEventListener.java
@@ -2,6 +2,7 @@ package org.apereo.cas.support.events.listener;
 
 import org.apereo.cas.authentication.adaptive.geo.GeoLocationRequest;
 import org.apereo.cas.configuration.CasConfigurationProperties;
+import org.apereo.cas.support.events.CasConfigurationModifiedEvent;
 import org.apereo.cas.support.events.CasRiskyAuthenticationDetectedEvent;
 import org.apereo.cas.support.events.CasTicketGrantingTicketCreatedEvent;
 import org.apereo.cas.support.events.dao.CasEvent;
@@ -18,9 +19,11 @@ import org.springframework.boot.context.event.ApplicationReadyEvent;
 import org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor;
 import org.springframework.cloud.bus.event.RefreshRemoteApplicationEvent;
 import org.springframework.cloud.context.environment.EnvironmentChangeEvent;
+import org.springframework.cloud.endpoint.RefreshEndpoint;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.event.EventListener;
 
+import java.util.Collection;
 import java.util.Map;
 
 /**
@@ -37,6 +40,9 @@ public class DefaultCasEventListener {
     @Autowired
     private ConfigurationPropertiesBindingPostProcessor binder;
 
+    @Autowired
+    private RefreshEndpoint refreshEndpoint;
+
     @Autowired
     private ApplicationContext applicationContext;
 
@@ -78,6 +84,19 @@ public class DefaultCasEventListener {
         rebindCasConfigurationProperties();
     }
 
+    /**
+     * Handle configuration modified event.
+     *
+     * @param event the event
+     */
+    @EventListener
+    public void handleConfigurationModifiedEvent(final CasConfigurationModifiedEvent event) {
+        LOGGER.debug(""Received event [{}]. Refreshing CAS configuration..."", event);
+        final Collection<String> keys = this.refreshEndpoint.invoke();
+        LOGGER.info(""The following settings were refreshed/updated: [{}]. CAS will attempt to rebind it configuration..."", keys);
+        rebindCasConfigurationProperties();
+    }
+
     /**
      * Rebind cas configuration properties.
      */
diff --git a/support/cas-server-support-configuration/src/main/java/org/apereo/cas/config/monitor/ConfigurationDirectoryPathWatchService.java b/support/cas-server-support-configuration/src/main/java/org/apereo/cas/config/monitor/ConfigurationDirectoryPathWatchService.java
index c9b84d0628..a089911507 100644
--- a/support/cas-server-support-configuration/src/main/java/org/apereo/cas/config/monitor/ConfigurationDirectoryPathWatchService.java
+++ b/support/cas-server-support-configuration/src/main/java/org/apereo/cas/config/monitor/ConfigurationDirectoryPathWatchService.java
@@ -9,13 +9,13 @@ import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.context.ApplicationEventPublisher;
 
+import java.io.File;
 import java.nio.file.FileSystems;
 import java.nio.file.Path;
 import java.nio.file.StandardWatchEventKinds;
 import java.nio.file.WatchEvent;
 import java.nio.file.WatchKey;
 import java.nio.file.WatchService;
-import java.util.concurrent.atomic.AtomicBoolean;
 
 import static java.nio.file.StandardWatchEventKinds.ENTRY_CREATE;
 import static java.nio.file.StandardWatchEventKinds.ENTRY_DELETE;
@@ -32,6 +32,7 @@ import static java.nio.file.StandardWatchEventKinds.OVERFLOW;
  */
 public class ConfigurationDirectoryPathWatchService implements Runnable {
     private static final Logger LOGGER = LoggerFactory.getLogger(ConfigurationDirectoryPathWatchService.class);
+    private static final long MONITOR_INTERVAL = 5_000;
 
     private final WatchService watcher;
     private final Path directory;
@@ -56,10 +57,7 @@ public class ConfigurationDirectoryPathWatchService implements Runnable {
      * Watch the directory for changes.
      */
     public void watch() {
-        final AtomicBoolean eventFired = new AtomicBoolean();
-
         while (true) {
-
             final WatchKey key;
             try {
                 key = watcher.take();
@@ -68,7 +66,7 @@ public class ConfigurationDirectoryPathWatchService implements Runnable {
                 return;
             }
 
-
+            long lastModified = 0;
             for (final WatchEvent<?> event : key.pollEvents()) {
                 final WatchEvent.Kind<?> kind = event.kind();
 
@@ -83,24 +81,24 @@ public class ConfigurationDirectoryPathWatchService implements Runnable {
                 try {
                     LOGGER.debug(""Detected configuration change [{}]"", kind.name());
                     final Path child = this.directory.resolve(filename);
-                    if (StringUtils.equalsIgnoreCase(StandardWatchEventKinds.ENTRY_CREATE.name(), kind.name()) && !eventFired.get()) {
-                        this.eventPublisher.publishEvent(new CasConfigurationCreatedEvent(this, child));
-                        eventFired.set(true);
-                    }
-                    if (StringUtils.equalsIgnoreCase(StandardWatchEventKinds.ENTRY_DELETE.name(), kind.name()) && !eventFired.get()) {
-                        this.eventPublisher.publishEvent(new CasConfigurationDeletedEvent(this, child));
-                        eventFired.set(true);
-                    }
-                    if (StringUtils.equalsIgnoreCase(StandardWatchEventKinds.ENTRY_MODIFY.name(), kind.name()) && !eventFired.get()) {
-                        this.eventPublisher.publishEvent(new CasConfigurationModifiedEvent(this, child));
-                        eventFired.set(true);
+                    final File childFile = child.toFile();
+                    if (childFile.lastModified() - lastModified > MONITOR_INTERVAL) {
+                        if (StringUtils.equalsIgnoreCase(StandardWatchEventKinds.ENTRY_CREATE.name(), kind.name())) {
+                            this.eventPublisher.publishEvent(new CasConfigurationCreatedEvent(this, child));
+                        }
+                        if (StringUtils.equalsIgnoreCase(StandardWatchEventKinds.ENTRY_DELETE.name(), kind.name())) {
+                            this.eventPublisher.publishEvent(new CasConfigurationDeletedEvent(this, child));
+                        }
+                        if (StringUtils.equalsIgnoreCase(StandardWatchEventKinds.ENTRY_MODIFY.name(), kind.name())) {
+                            this.eventPublisher.publishEvent(new CasConfigurationModifiedEvent(this, child));
+                        }
                     }
+                    lastModified = childFile.lastModified();
                 } catch (final Exception e) {
                     LOGGER.warn(e.getMessage(), e);
                     continue;
                 }
             }
-            eventFired.set(false);
             final boolean valid = key.reset();
             if (!valid) {
                 break;",Remove references to SupportData everywhere except in CcProtoAspect . . RELNOTES : None . . PiperOrigin - RevId : 222216840,0
"diff --git a/pom.xml b/pom.xml
index 2bcd23fc6c..cc7efb624f 100644
--- a/pom.xml
+++ b/pom.xml
@@ -56,7 +56,7 @@
     <rxjava.version>1.3.0</rxjava.version>
     <rxjava2.version>2.0.0</rxjava2.version>
     <guava.version>19.0</guava.version>
-    <scala.version>2.12.3</scala.version>
+    <scala.version>2.12.4</scala.version>
 
     <!-- Converter Dependencies -->
     <gson.version>2.8.2</gson.version>",Update Scala dependency,1
"diff --git a/java/org/apache/catalina/Context.java b/java/org/apache/catalina/Context.java
index 9e5c467704..ef2bd3cfcf 100644
--- a/java/org/apache/catalina/Context.java
+++ b/java/org/apache/catalina/Context.java
@@ -1183,5 +1183,11 @@ public interface Context extends Container {
      */
     public JspConfigDescriptor getJspConfigDescriptor();
 
+    /**
+     * Add a URL for a JAR that contains static resources in a
+     * META-INF/resources directory that should be included in the static
+     * resources for this context.
+     */
+    public void addResourceJarUrl(URL url);
 }
 
diff --git a/java/org/apache/catalina/core/LocalStrings.properties b/java/org/apache/catalina/core/LocalStrings.properties
index ddabbdff4f..2a774697b7 100644
--- a/java/org/apache/catalina/core/LocalStrings.properties
+++ b/java/org/apache/catalina/core/LocalStrings.properties
@@ -115,6 +115,7 @@ standardContext.loginConfig.loginPage=Form login page {0} must start with a ''/'
 standardContext.loginConfig.loginWarning=WARNING: Form login page {0} must start with a ''/'' in Servlet 2.4
 standardContext.loginConfig.required=LoginConfig cannot be null
 standardContext.mappingError=MAPPING configuration error for relative URI {0}
+standardContext.noResourceJar=Resource JARs are not supported. The JAR found at [{0}] will no be used to provide static content for context with path [{1}]
 standardContext.notFound=The requested resource ({0}) is not available.
 standardContext.notReloadable=Reloading is disabled on this Context
 standardContext.notStarted=Context has not yet been started
diff --git a/java/org/apache/catalina/core/StandardContext.java b/java/org/apache/catalina/core/StandardContext.java
index eedc91c1f9..4c1c58bf42 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -961,6 +961,21 @@ public class StandardContext
     }
 
 
+    /**
+     * Add a URL for a JAR that contains static resources in a
+     * META-INF/resources directory that should be included in the static
+     * resources for this context.
+     */
+    public void addResourceJarUrl(URL url) {
+        if (webappResources instanceof BaseDirContext) {
+            ((BaseDirContext) webappResources).addResourcesJar(url);
+        } else {
+            log.error(sm.getString(""standardContext.noResourceJar"", url,
+                    getPath()));
+        }
+    }
+    
+    
     /**
      * Set the current alias configuration. The list of aliases should be of the
      * form ""/aliasPath1=docBase1,/aliasPath2=docBase2"" where aliasPathN must
@@ -2122,11 +2137,13 @@ public class StandardContext
             return;
 
         if (resources instanceof BaseDirContext) {
+            // Caching
             ((BaseDirContext) resources).setCached(isCachingAllowed());
             ((BaseDirContext) resources).setCacheTTL(getCacheTTL());
             ((BaseDirContext) resources).setCacheMaxSize(getCacheMaxSize());
             ((BaseDirContext) resources).setCacheObjectMaxSize(
                     getCacheObjectMaxSize());
+            // Alias support
             ((BaseDirContext) resources).setAliases(getAliases());
         }
         if (resources instanceof FileDirContext) {
diff --git a/java/org/apache/catalina/startup/ContextConfig.java b/java/org/apache/catalina/startup/ContextConfig.java
index b248c68326..81c95aef71 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -38,6 +38,7 @@ import java.util.Properties;
 import java.util.Set;
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
+import java.util.zip.ZipEntry;
 
 import javax.servlet.ServletContext;
 
@@ -1237,6 +1238,8 @@ public class ContextConfig
             if (context.getLogEffectiveWebXml()) {
                 log.info(""web.xml:\n"" + mergedWebXml);
             }
+            
+            processResourceJARs(orderedFragments);
         } else {
             // Apply unmerged web.xml to Context
             webXml.configureContext(context);
@@ -1244,6 +1247,40 @@ public class ContextConfig
     }
 
     
+    /**
+     * Scan JARs that contain web-fragment.xml files that will be used to
+     * configure this application to see if they also contain static resources.
+     * If static resources are found, add them to the context. Resources are
+     * added in web-fragment.xml priority order.
+     */
+    protected void processResourceJARs(Set<WebXml> fragments) {
+        for (WebXml fragment : fragments) {
+            URL jarUrl = fragment.getURL();
+            JarFile jarFile = null;
+            try {
+                JarURLConnection conn =
+                    (JarURLConnection) jarUrl.openConnection();
+                jarFile = conn.getJarFile();   
+                ZipEntry entry = jarFile.getEntry(""META-INF/resources/"");
+                if (entry != null) {
+                    context.addResourceJarUrl(jarUrl);
+                }
+            } catch (IOException ioe) {
+                log.error(sm.getString(""contextConfig.resourceJarFail"", jarUrl,
+                        context.getPath()));
+            } finally {
+                if (jarFile != null) {
+                    try {
+                        jarFile.close();
+                    } catch (IOException e) {
+                        // Ignore
+                    }
+                }
+            }
+        }
+    }
+    
+    
     /**
      * Identify the default web.xml to be used and obtain an input source for
      * it.
diff --git a/java/org/apache/catalina/startup/LocalStrings.properties b/java/org/apache/catalina/startup/LocalStrings.properties
index 6f3fe5d478..5644b079f9 100644
--- a/java/org/apache/catalina/startup/LocalStrings.properties
+++ b/java/org/apache/catalina/startup/LocalStrings.properties
@@ -46,6 +46,7 @@ contextConfig.jar=Unable to process resource [{0}] for annotations
 contextConfig.jndiUrl=Unable to process JNDI URL [{0}] for annotations
 contextConfig.jndiUrlNotDirContextConn=The connection created for URL [{0}] was not a DirContextURLConnection
 contextConfig.missingRealm=No Realm has been configured to authenticate against
+contextConfig.resourceJarFail=Failed to processes JAR found at URL [{0}] for static resources to be included in context with path [{0}]
 contextConfig.role.auth=WARNING: Security role name {0} used in an <auth-constraint> without being defined in a <security-role>
 contextConfig.role.link=WARNING: Security role name {0} used in a <role-link> without being defined in a <security-role>
 contextConfig.role.runas=WARNING: Security role name {0} used in a <run-as> without being defined in a <security-role>
diff --git a/java/org/apache/naming/resources/BaseDirContext.java b/java/org/apache/naming/resources/BaseDirContext.java
index f8b34e5ad0..89e50b3c5d 100644
--- a/java/org/apache/naming/resources/BaseDirContext.java
+++ b/java/org/apache/naming/resources/BaseDirContext.java
@@ -19,11 +19,18 @@
 package org.apache.naming.resources;
 
 import java.io.File;
+import java.io.IOException;
+import java.net.JarURLConnection;
+import java.net.URL;
+import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Hashtable;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
+import java.util.jar.JarFile;
+import java.util.zip.ZipEntry;
 
 import javax.naming.Binding;
 import javax.naming.Context;
@@ -131,9 +138,38 @@ public abstract class BaseDirContext implements DirContext {
         new HashMap<String,BaseDirContext>();
 
 
+    /**
+     * Alternate / backup DirContexts for static resources. These will be
+     * searched in the order they are added if the requested resource cannot be
+     * found in the primary DirContext. 
+     */
+    protected List<DirContext> altDirContexts = new ArrayList<DirContext>();
+    
+    
     // ------------------------------------------------------------- Properties
 
 
+    /**
+     * Add a resources JAR. The contents of /META-INF/resources/ will be used if
+     * a requested resource can not be found in the main context.
+     */
+    public void addResourcesJar(URL url) {
+        try {
+            JarURLConnection conn = (JarURLConnection) url.openConnection();
+            JarFile jarFile = conn.getJarFile();   
+            ZipEntry entry = jarFile.getEntry(""/"");
+            WARDirContext warDirContext = new WARDirContext(jarFile,
+                    new WARDirContext.Entry(""/"", entry));
+            warDirContext.loadEntries();
+            altDirContexts.add(warDirContext);
+        } catch (IOException ioe) {
+            // TODO: Log failure
+        } finally {
+            // TODO: Clean up
+        }
+    }
+    
+    
     /**
      * Add an alias.
      */
@@ -350,7 +386,25 @@ public abstract class BaseDirContext implements DirContext {
                 return result.dirContext.doGetRealPath(result.aliasName);
             }
         }
-        return doGetRealPath(name);
+        
+        // Next do a standard getRealPath()
+        String path = doGetRealPath(name);
+
+        if (path != null)
+            return path;
+        
+        // Check the alternate locations
+        for (DirContext altDirContext : altDirContexts) {
+            if (altDirContext instanceof BaseDirContext){
+                path = ((BaseDirContext) altDirContext).getRealPath(
+                        ""META-INF/resources/"" + name);
+                if (path != null)
+                    return path;
+            }
+        }
+        
+        // Really not found
+        return null; 
     }
 
     // -------------------------------------------------------- Context Methods
@@ -380,13 +434,29 @@ public abstract class BaseDirContext implements DirContext {
      * @exception NamingException if a naming exception is encountered
      */
     public final Object lookup(String name) throws NamingException {
+        // First check for aliases
         if (!aliases.isEmpty()) {
             AliasResult result = findAlias(name);
             if (result.dirContext != null) {
                 return result.dirContext.lookup(result.aliasName);
             }
         }
-        return doLookup(name);
+        
+        // Next do a standard lookup
+        Object obj = doLookup(name);
+
+        if (obj != null)
+            return obj;
+        
+        // Check the alternate locations
+        for (DirContext altDirContext : altDirContexts) {
+            obj = altDirContext.lookup(""META-INF/resources/"" + name);
+            if (obj != null)
+                return obj;
+        }
+        
+        // Really not found
+        throw new NamingException(sm.getString(""resources.notFound"", name));
     }
 
     /**
@@ -589,7 +659,31 @@ public abstract class BaseDirContext implements DirContext {
                 return result.dirContext.listBindings(result.aliasName);
             }
         }
-        return doListBindings(name);
+        
+        // Next do a standard lookup
+        NamingEnumeration<Binding> bindings = doListBindings(name);
+
+        if (bindings != null)
+            return bindings;
+        
+        // Check the alternate locations
+        for (DirContext altDirContext : altDirContexts) {
+            if (altDirContext instanceof BaseDirContext)
+                bindings = ((BaseDirContext) altDirContext).doListBindings(
+                        ""META-INF/resources/"" + name);
+            else {
+                try {
+                    bindings = altDirContext.listBindings(name);
+                } catch (NamingException ne) {
+                    // Ignore
+                }
+            }
+            if (bindings != null)
+                return bindings;
+        }
+
+        // Really not found
+        throw new NamingException(sm.getString(""resources.notFound"", name));
     }
 
 
@@ -912,6 +1006,8 @@ public abstract class BaseDirContext implements DirContext {
      */
     public final Attributes getAttributes(String name, String[] attrIds)
         throws NamingException {
+        
+        // First check for aliases
         if (!aliases.isEmpty()) {
             AliasResult result = findAlias(name);
             if (result.dirContext != null) {
@@ -919,7 +1015,31 @@ public abstract class BaseDirContext implements DirContext {
                         result.aliasName, attrIds);
             }
         }
-        return doGetAttributes(name, attrIds);
+        
+        // Next do a standard lookup
+        Attributes attrs = doGetAttributes(name, attrIds);
+
+        if (attrs != null)
+            return attrs;
+        
+        // Check the alternate locations
+        for (DirContext altDirContext : altDirContexts) {
+            if (altDirContext instanceof BaseDirContext)
+                attrs = ((BaseDirContext) altDirContext).doGetAttributes(
+                        ""META-INF/resources/"" + name, attrIds);
+            else {
+                try {
+                    attrs = altDirContext.getAttributes(name, attrIds);
+                } catch (NamingException ne) {
+                    // Ignore
+                }
+            }
+            if (attrs != null)
+                return attrs;
+        }
+        
+        // Really not found
+        throw new NamingException(sm.getString(""resources.notFound"", name));
     }
 
     /**
diff --git a/java/org/apache/naming/resources/FileDirContext.java b/java/org/apache/naming/resources/FileDirContext.java
index 1f2c872da0..ba02c11603 100644
--- a/java/org/apache/naming/resources/FileDirContext.java
+++ b/java/org/apache/naming/resources/FileDirContext.java
@@ -202,8 +202,7 @@ public class FileDirContext extends BaseDirContext {
         File file = file(name);
 
         if (file == null)
-            throw new NamingException
-                (sm.getString(""resources.notFound"", name));
+            return null;
 
         if (file.isDirectory()) {
             FileDirContext tempContext = new FileDirContext(env);
@@ -326,9 +325,8 @@ public class FileDirContext extends BaseDirContext {
         File file = file(name);
 
         if (file == null)
-",Added String dataformat docs to Gitbook,0
"diff --git a/spring-boot-samples/spring-boot-sample-simple/build.gradle b/spring-boot-samples/spring-boot-sample-simple/build.gradle
index f7fcf3c70419..e56605f7f405 100644
--- a/spring-boot-samples/spring-boot-sample-simple/build.gradle
+++ b/spring-boot-samples/spring-boot-sample-simple/build.gradle
@@ -25,6 +25,10 @@ jar {
 	version =  '0.0.0'
 }
 
+run {
+  systemProperties = System.properties
+}
+
 repositories {
 	// NOTE: You should declare only repositories that you need here
 	mavenLocal()",Add systemProperties to run task in sample,1
"diff --git a/src/main/org/codehaus/groovy/ant/Groovyc.java b/src/main/org/codehaus/groovy/ant/Groovyc.java
index ad7d930b2c..9903bf5d12 100644
--- a/src/main/org/codehaus/groovy/ant/Groovyc.java
+++ b/src/main/org/codehaus/groovy/ant/Groovyc.java
@@ -380,9 +380,9 @@ public class Groovyc extends MatchingTask {
             }
 
             try {
-                String classpath = getClasspath().toString();
+                Path classpath = getClasspath();
                 if (classpath != null) {
-",Skip push to sonatype during release process,0
"diff --git a/qa/test-db-upgrade/pom.xml b/qa/test-db-upgrade/pom.xml
index 21f18f60b2..5ea2aaa350 100755
--- a/qa/test-db-upgrade/pom.xml
+++ b/qa/test-db-upgrade/pom.xml
@@ -358,6 +358,10 @@
 
                 <exclude>**/ProcessDiagramRetrievalTest.java</exclude>
                 <exclude>**/ProcessDiagramParseTest.java</exclude>
+
+                <!-- as the patch scripts of current version are not applied for db-upgrade test suite
+                     this must be skipped, it is already tested in the unit tests -->
+                <exclude>**/SchemaLogEnsureSqlScriptTest.java</exclude>",Add an info item to show the currently inherited client environment .,0
"diff --git a/pom.xml b/pom.xml
index abf278304c..d0e9c75401 100644
--- a/pom.xml
+++ b/pom.xml
@@ -348,6 +348,14 @@
 			  <properties>
 			    <maven.test.failure.ignore>true</maven.test.failure.ignore>
 			  </properties>
+    </profile>
+    <profile>
+      <id>deploy</id>
+      <modules>
+        <module>modules/activiti-spring</module>
+        <module>modules/activiti-cxf</module>
+        <module>modules/activiti-mule</module>
+      </modules>
     </profile>
 		<profile>
 			<id>check</id>",Remove @ NonNull annotation in Consumer method parameter ( <issue_id> ) .,0
"diff --git a/src/main/java/com/alibaba/fastjson/parser/JSONScanner.java b/src/main/java/com/alibaba/fastjson/parser/JSONScanner.java
index ec74e66f8..96262ebd4 100755
--- a/src/main/java/com/alibaba/fastjson/parser/JSONScanner.java
+++ b/src/main/java/com/alibaba/fastjson/parser/JSONScanner.java
@@ -2346,8 +2346,44 @@ public final class JSONScanner implements JSONLexer {
 
     public boolean scanISO8601DateIfMatch(boolean strict) {
         int rest = text.length() - bp;
+        
+        if ((!strict) && rest > 13) {
+            char c0 = charAt(bp);
+            char c1 = charAt(bp + 1);
+            char c2 = charAt(bp + 2);
+            char c3 = charAt(bp + 3);
+            char c4 = charAt(bp + 4);
+            char c5 = charAt(bp + 5);
+            
+            char c_r0 = charAt(bp + rest - 1);
+            char c_r1 = charAt(bp + rest - 2);
+            if (c0 == '/' && c1 == 'D' && c2 == 'a' && c3 == 't' && c4 == 'e' && c5 == '(' && c_r0 == '/' && c_r1 == ')') {
+                int plusIndex = -1;
+                for (int i = 6; i < rest; ++i) {
+                    char c = charAt(bp + i);
+                    if (c == '+') {
+                        plusIndex = i;
+                    } else if (c < '0' || c > '9') {
+                        break;
+                    }
+                }
+                if (plusIndex == -1) {
+                    return false;
+                }
+                int offset = bp + 6;
+                String numberText = this.subString(offset, plusIndex - offset);
+                long millis = Long.parseLong(numberText);
+                
+                Locale local = Locale.getDefault();
+                calendar = Calendar.getInstance(TimeZone.getDefault(), local);
+                calendar.setTimeInMillis(millis);
+                
+                token = JSONToken.LITERAL_ISO8601_DATE;
+                return true;
+            }
+        }
 
-        if (rest == 8) {
+        if (rest == 8 || rest == 14 || rest == 17) {
             if (strict) {
                 return false;
             }
@@ -2360,26 +2396,54 @@ public final class JSONScanner implements JSONLexer {
             char M1 = charAt(bp + 5);
             char d0 = charAt(bp + 6);
             char d1 = charAt(bp + 7);
-            
-            if (!checkYear(y0, y1, y2, y3)) {
-                return false;
-            }
 
-            if (!checkMonth(M0, M1)) {
-                return false;
-            }
-
-            if (!checkDay(d0, d1)) {
+            if (!checkDate(y0, y1, y2, y3, M0, M1, d0, d1)) {
                 return false;
             }
 
             setCalendar(y0, y1, y2, y3, M0, M1, d0, d1);
-            
-            calendar.set(Calendar.HOUR_OF_DAY, 0);
-            calendar.set(Calendar.MINUTE, 0);
-            calendar.set(Calendar.SECOND, 0);
-            calendar.set(Calendar.MILLISECOND, 0);
 
+            if (rest != 8) {
+                char h0 = charAt(bp + 8);
+                char h1 = charAt(bp + 9);
+                char m0 = charAt(bp + 10);
+                char m1 = charAt(bp + 11);
+                char s0 = charAt(bp + 12);
+                char s1 = charAt(bp + 13);
+
+               if(!checkTime(h0, h1, m0, m1, s0, s1)) {
+                   return false;
+               }
+
+                int millis;
+                if (rest == 17) {
+                    char S0 = charAt(bp + 14);
+                    char S1 = charAt(bp + 15);
+                    char S2 = charAt(bp + 16);
+                    if (S0 < '0' || S0 > '9') {
+                        return false;
+                    }
+                    if (S1 < '0' || S1 > '9') {
+                        return false;
+                    }
+                    if (S2 < '0' || S2 > '9') {
+                        return false;
+                    }
+
+                    millis = digits[S0] * 100 + digits[S1] * 10 + digits[S2];
+                } else {
+                    millis = 0;
+                }
+                
+                int hour = digits[h0] * 10 + digits[h1];
+                int minute = digits[m0] * 10 + digits[m1];
+                int seconds = digits[s0] * 10 + digits[s1];
+                
+                calendar.set(Calendar.HOUR_OF_DAY, hour);
+                calendar.set(Calendar.MINUTE, minute);
+                calendar.set(Calendar.SECOND, seconds);
+                calendar.set(Calendar.MILLISECOND, millis);
+            }
             token = JSONToken.LITERAL_ISO8601_DATE;
             return true;
         }
@@ -2388,31 +2452,22 @@ public final class JSONScanner implements JSONLexer {
             return false;
         }
 
-        char y0 = charAt(bp);
-        char y1 = charAt(bp + 1);
-        char y2 = charAt(bp + 2);
-        char y3 = charAt(bp + 3);
-        if (!checkYear(y0, y1, y2, y3)) {
-            return false;
-        }
-
         if (charAt(bp + 4) != '-') {
             return false;
         }
-
-        char M0 = charAt(bp + 5);
-        char M1 = charAt(bp + 6);
-        if (!checkMonth(M0, M1)) {
-            return false;
-        }
-
         if (charAt(bp + 7) != '-') {
             return false;
         }
 
+        char y0 = charAt(bp);
+        char y1 = charAt(bp + 1);
+        char y2 = charAt(bp + 2);
+        char y3 = charAt(bp + 3);
+        char M0 = charAt(bp + 5);
+        char M1 = charAt(bp + 6);
         char d0 = charAt(bp + 8);
         char d1 = charAt(bp + 9);
-        if (!checkDay(d0, d1)) {
+        if (!checkDate(y0, y1, y2, y3, M0, M1, d0, d1)) {
             return false;
         }
 
@@ -2437,59 +2492,21 @@ public final class JSONScanner implements JSONLexer {
             return false;
         }
 
-        char h0 = charAt(bp + 11);
-        char h1 = charAt(bp + 12);
-        if (h0 == '0') {
-            if (h1 < '0' || h1 > '9') {
-                return false;
-            }
-        } else if (h0 == '1') {
-            if (h1 < '0' || h1 > '9') {
-                return false;
-            }
-        } else if (h0 == '2') {
-            if (h1 < '0' || h1 > '4') {
-                return false;
-            }
-        } else {
-            return false;
-        }
-
         if (charAt(bp + 13) != ':') {
             return false;
         }
-
-        char m0 = charAt(bp + 14);
-        char m1 = charAt(bp + 15);
-        if (m0 >= '0' && m0 <= '5') {
-            if (m1 < '0' || m1 > '9') {
-                return false;
-            }
-        } else if (m0 == '6') {
-            if (m1 != '0') {
-                return false;
-            }
-        } else {
-            return false;
-        }
-
         if (charAt(bp + 16) != ':') {
             return false;
         }
 
+        char h0 = charAt(bp + 11);
+        char h1 = charAt(bp + 12);
+        char m0 = charAt(bp + 14);
+        char m1 = charAt(bp + 15);
         char s0 = charAt(bp + 17);
         char s1 = charAt(bp + 18);
-        if (s0 >= '0' && s0 <= '5') {
-            if (s1 < '0' || s1 > '9') {
-                return false;
-            }
-        } else if (s0 == '6') {
-            if (s1 != '0') {
-                return false;
-            }
-        } else {
-            return false;
-        }
+
+        checkTime(h0, h1, m0, m1, s0, s1);
 
         int hour = digits[h0] * 10 + digits[h1];
         int minute = digits[m0] * 10 + digits[m1];
@@ -2534,44 +2551,41 @@ public final class JSONScanner implements JSONLexer {
         return true;
     }
 
-    private void setCalendar(char y0, char y1, char y2, char y3, char M0, char M1, char d0, char d1) {
-        Locale local = Locale.getDefault();
-        calendar = Calendar.getInstance(TimeZone.getDefault(), local);
-        int year = digits[y0] * 1000 + digits[y1] * 100 + digits[y2] * 10 + digits[y3];
-        int month = digits[M0] * 10 + digits[M1] - 1;
-        int day = digits[d0] * 10 + digits[d1];
-        calendar.set(Calendar.YEAR, year);
-        calendar.set(Calendar.MONTH, month);
-        calendar.set(Calendar.DAY_OF_MONTH, day);
-    }
-
-    static boolean checkDay(char d0, char d1) {
-        if (d0 == '0') {
-            if (d1 < '1' || d1 > '9') {
+    private boolean checkTime(char h0, char h1, char m0, char m1, char s0, char s1) {
+        if (h0 == '0') {
+            if (h1 < '0' || h1 > '9') {
                 return false;
             }
-        } else if (d0 == '1' || d0 == '2') {
-            if (d1 < '0' || d1 > '9') {
+        } else if (h0 == '1') {
+            if (h1 < '0' || h1 > '9') {
                 return false;
             }
-        } else if (d0 == '3') {
-            if (d1 != '0' && d1 != '1') {
+        } else if (h0 == '2') {
+            if (h1 < '0' || h1 > '4') {
                 return false;
             }
         } else {
             return false;
         }
 
-        return true;
-    }
+        if (m0 >= '0' && m0 <= '5') {
+            if (m1 < '0' || m1 > '9') {
+                return false;
+            }
+        } else if (m0 == '6') {
+            if (m1 != '0') {
+                return false;
+            }
+        } else {
+            return false;
+        }
 
-    static boolean checkMonth(char M0, char M1) {
-        if (M0 == '0') {
-            if (M1 < '1' || M1 > '9') {
+        if (s0 >= '0' && s0 <= '5') {
+            if (s1 < '0' || s1 > '9') {
                 return false;
             }
-        } else if (M0 == '1') {
-            if (M1 != '0' && M1 != '1' && M1 != '2') {
+        } else if (s0 == '6') {
+            if (s1 != '0') {
                 return false;",Make ImageClassLoader . forName ( ) more resilient .,0
"diff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/plan/spi/LoadPlanBuilderTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/plans/LoadPlanBuilderTest.java
similarity index 99%
rename from hibernate-core/src/test/java/org/hibernate/test/loader/plan/spi/LoadPlanBuilderTest.java
rename to hibernate-core/src/test/java/org/hibernate/test/loadplans/plans/LoadPlanBuilderTest.java
index 47b8eca1a6..4b315785c4 100644
--- a/hibernate-core/src/test/java/org/hibernate/test/loader/plan/spi/LoadPlanBuilderTest.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/plans/LoadPlanBuilderTest.java
@@ -21,7 +21,7 @@
  * 51 Franklin Street, Fifth Floor
  * Boston, MA  02110-1301  USA
  */
-package org.hibernate.test.loader.plan.spi;
+package org.hibernate.test.loadplans.plans;
 
 import javax.persistence.CascadeType;
 import javax.persistence.Entity;
diff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/plan/spi/LoadPlanStructureAssertionHelper.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/plans/LoadPlanStructureAssertionHelper.java
similarity index 99%
rename from hibernate-core/src/test/java/org/hibernate/test/loader/plan/spi/LoadPlanStructureAssertionHelper.java
rename to hibernate-core/src/test/java/org/hibernate/test/loadplans/plans/LoadPlanStructureAssertionHelper.java
index b54b87899b..7b92fc5d3d 100644
--- a/hibernate-core/src/test/java/org/hibernate/test/loader/plan/spi/LoadPlanStructureAssertionHelper.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/plans/LoadPlanStructureAssertionHelper.java
@@ -21,7 +21,7 @@
  * 51 Franklin Street, Fifth Floor
  * Boston, MA  02110-1301  USA
  */
-package org.hibernate.test.loader.plan.spi;
+package org.hibernate.test.loadplans.plans;
 
 import org.hibernate.LockMode;
 import org.hibernate.LockOptions;
diff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/plan/spi/LoadPlanStructureAssertionTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/plans/LoadPlanStructureAssertionTest.java
similarity index 95%
rename from hibernate-core/src/test/java/org/hibernate/test/loader/plan/spi/LoadPlanStructureAssertionTest.java
rename to hibernate-core/src/test/java/org/hibernate/test/loadplans/plans/LoadPlanStructureAssertionTest.java
index 94fc7ca20b..cabb5798fb 100644
--- a/hibernate-core/src/test/java/org/hibernate/test/loader/plan/spi/LoadPlanStructureAssertionTest.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/plans/LoadPlanStructureAssertionTest.java
@@ -21,20 +21,15 @@
  * 51 Franklin Street, Fifth Floor
  * Boston, MA  02110-1301  USA
  */
-package org.hibernate.test.loader.plan.spi;
+package org.hibernate.test.loadplans.plans;
 
 import org.hibernate.cfg.Configuration;
 import org.hibernate.engine.spi.SessionFactoryImplementor;
-import org.hibernate.test.loader.EncapsulatedCompositeIdResultSetProcessorTest;
-import org.hibernate.test.loader.Helper;
+import org.hibernate.test.loadplans.process.EncapsulatedCompositeIdResultSetProcessorTest;
 
-import org.hibernate.loader.plan2.build.internal.returns.SimpleEntityIdentifierDescriptionImpl;
-import org.hibernate.loader.plan2.exec.process.internal.ResultSetProcessorImpl;
-import org.hibernate.loader.plan2.exec.spi.EntityLoadQueryDetails;
 //import org.hibernate.loader.plan2.spi.BidirectionalEntityFetch;
 import org.hibernate.loader.plan2.build.internal.returns.CollectionFetchableElementEntityGraph;
 import org.hibernate.loader.plan2.spi.CollectionFetch;
-import org.hibernate.loader.plan2.spi.CompositeFetch;
 import org.hibernate.loader.plan2.spi.EntityFetch;
 import org.hibernate.loader.plan2.spi.EntityReturn;
 import org.hibernate.loader.plan2.spi.FetchSource;
diff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/EncapsulatedCompositeAttributeResultSetProcessorTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EncapsulatedCompositeAttributeResultSetProcessorTest.java
similarity index 99%
rename from hibernate-core/src/test/java/org/hibernate/test/loader/EncapsulatedCompositeAttributeResultSetProcessorTest.java
rename to hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EncapsulatedCompositeAttributeResultSetProcessorTest.java
index 6d28809d84..499ce5d6cf 100644
--- a/hibernate-core/src/test/java/org/hibernate/test/loader/EncapsulatedCompositeAttributeResultSetProcessorTest.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EncapsulatedCompositeAttributeResultSetProcessorTest.java
@@ -21,7 +21,7 @@
  * 51 Franklin Street, Fifth Floor
  * Boston, MA  02110-1301  USA
  */
-package org.hibernate.test.loader;
+package org.hibernate.test.loadplans.process;
 
 import javax.persistence.CollectionTable;
 import javax.persistence.Column;
diff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/EncapsulatedCompositeIdResultSetProcessorTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EncapsulatedCompositeIdResultSetProcessorTest.java
similarity index 99%
rename from hibernate-core/src/test/java/org/hibernate/test/loader/EncapsulatedCompositeIdResultSetProcessorTest.java
rename to hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EncapsulatedCompositeIdResultSetProcessorTest.java
index 979051ae25..81a465fe5b 100644
--- a/hibernate-core/src/test/java/org/hibernate/test/loader/EncapsulatedCompositeIdResultSetProcessorTest.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EncapsulatedCompositeIdResultSetProcessorTest.java
@@ -21,7 +21,7 @@
  * 51 Franklin Street, Fifth Floor
  * Boston, MA  02110-1301  USA
  */
-package org.hibernate.test.loader;
+package org.hibernate.test.loadplans.process;
 
 import javax.persistence.Embeddable;
 import javax.persistence.EmbeddedId;
diff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/EntityAssociationResultSetProcessorTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityAssociationResultSetProcessorTest.java
similarity index 99%
rename from hibernate-core/src/test/java/org/hibernate/test/loader/EntityAssociationResultSetProcessorTest.java
rename to hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityAssociationResultSetProcessorTest.java
index 3c0e673c2a..a89f00f3f4 100644
--- a/hibernate-core/src/test/java/org/hibernate/test/loader/EntityAssociationResultSetProcessorTest.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityAssociationResultSetProcessorTest.java
@@ -21,7 +21,7 @@
  * 51 Franklin Street, Fifth Floor
  * Boston, MA  02110-1301  USA
  */
-package org.hibernate.test.loader;
+package org.hibernate.test.loadplans.process;
 
 import javax.persistence.CascadeType;
 import javax.persistence.Entity;
diff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/EntityWithNonLazyCollectionResultSetProcessorTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityWithNonLazyCollectionResultSetProcessorTest.java
similarity index 99%
rename from hibernate-core/src/test/java/org/hibernate/test/loader/EntityWithNonLazyCollectionResultSetProcessorTest.java
rename to hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityWithNonLazyCollectionResultSetProcessorTest.java
index d1b2a7205d..a8c37c4f33 100644
--- a/hibernate-core/src/test/java/org/hibernate/test/loader/EntityWithNonLazyCollectionResultSetProcessorTest.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityWithNonLazyCollectionResultSetProcessorTest.java
@@ -21,7 +21,7 @@
  * 51 Franklin Street, Fifth Floor
  * Boston, MA  02110-1301  USA
  */
-package org.hibernate.test.loader;
+package org.hibernate.test.loadplans.process;
 
 import javax.persistence.CollectionTable;
 import javax.persistence.Column;
diff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/EntityWithNonLazyOneToManyListResultSetProcessorTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityWithNonLazyOneToManyListResultSetProcessorTest.java
similarity index 99%
rename from hibernate-core/src/test/java/org/hibernate/test/loader/EntityWithNonLazyOneToManyListResultSetProcessorTest.java
rename to hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityWithNonLazyOneToManyListResultSetProcessorTest.java
index e78263c1c0..80b877995e 100644
--- a/hibernate-core/src/test/java/org/hibernate/test/loader/EntityWithNonLazyOneToManyListResultSetProcessorTest.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityWithNonLazyOneToManyListResultSetProcessorTest.java
@@ -21,7 +21,7 @@
  * 51 Franklin Street, Fifth Floor
  * Boston, MA  02110-1301  USA
  */
-package org.hibernate.test.loader;
+package org.hibernate.test.loadplans.process;
 
 import javax.persistence.CascadeType;
 import javax.persistence.Entity;
diff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/EntityWithNonLazyOneToManySetResultSetProcessorTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityWithNonLazyOneToManySetResultSetProcessorTest.java
similarity index 99%
rename from hibernate-core/src/test/java/org/hibernate/test/loader/EntityWithNonLazyOneToManySetResultSetProcessorTest.java
rename to hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityWithNonLazyOneToManySetResultSetProcessorTest.java
index baca9557cf..c757f2642c 100644
--- a/hibernate-core/src/test/java/org/hibernate/test/loader/EntityWithNonLazyOneToManySetResultSetProcessorTest.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityWithNonLazyOneToManySetResultSetProcessorTest.java
@@ -21,7 +21,7 @@
  * 51 Franklin Street, Fifth Floor
  * Boston, MA  02110-1301  USA
  */
-package org.hibernate.test.loader;
+package org.hibernate.test.loadplans.process;
 
 import javax.persistence.CascadeType;
 import javax.persistence.Entity;
diff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/Helper.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/Helper.java
similarity index 98%
rename from hibernate-core/src/test/java/org/hibernate/test/loader/Helper.java
rename to hibernate-core/src/test/java/org/hibernate/test/loadplans/process/Helper.java
index d2ecd1f90f..fb82f15d5f 100644
--- a/hibernate-core/src/test/java/org/hibernate/test/loader/Helper.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/Helper.java
@@ -21,7 +21,7 @@
  * 51 Franklin Street, Fifth Floor
  * Boston, MA  02110-1301  USA
  */
-package org.hibernate.test.loader;
+package org.hibernate.test.loadplans.process;
 
 import org.hibernate.LockMode;
 import org.hibernate.LockOptions;
diff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/NonEncapsulatedCompositeIdResultSetProcessorTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/NonEncapsulatedCompositeIdResultSetProcessorTest.java
similarity index 99%
rename from hibernate-core/src/test/java/org/hibernate/test/loader/NonEncapsulatedCompositeIdResultSetProcessorTest.java
rename to hibernate-core/src/test/java/org/hibernate/test/loadplans/process/NonEncapsulatedCompositeIdResultSetProcessorTest.java
index 1679043cb4..c256a39ddd 100644
--- a/hibernate-core/src/test/java/org/hibernate/test/loader/NonEncapsulatedCompositeIdResultSetProcessorTest.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/NonEncapsulatedCompositeIdResultSetProcessorTest.java
@@ -21,7 +21,7 @@
  * 51 Franklin Street, Fifth Floor
  * Boston, MA  02110-1301  USA
  */
-package org.hibernate.test.loader;
+package org.hibernate.test.loadplans.process;
 
 import java.sql.Connection;
 import java.sql.PreparedStatement;
diff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/SimpleResultSetProcessorTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/SimpleResultSetProcessorTest.java
similarity index 99%
rename from hibernate-core/src/test/java/org/hibernate/test/loader/SimpleResultSetProcessorTest.java
rename to hibernate-core/src/test/java/org/hibernate/test/loadplans/process/SimpleResultSetProcessorTest.java
index 3cfa050bfb..d945048e66 100644
--- a/hibernate-core/src/test/java/org/hibernate/test/loader/SimpleResultSetProcessorTest.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/SimpleResultSetProcessorTest.java
@@ -21,7 +21,7 @@
  * 51 Franklin Street, Fifth Floor
  * Boston, MA  02110-1301  USA
  */
-package org.hibernate.test.loader;
+package org.hibernate.test.loadplans.process;
 
 import javax.persistence.Entity;
 import javax.persistence.Id;
diff --git a/hibernate-core/src/test/java/org/hibernate/test/walking/BasicWalkingTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/BasicWalkingTest.java
similarity index 97%
rename from hibernate-core/src/test/java/org/hibernate/test/walking/BasicWalkingTest.java
rename to hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/BasicWalkingTest.java
index 426b6b2ba2..5316e73de4 100644
--- a/hibernate-core/src/test/java/org/hibernate/test/walking/BasicWalkingTest.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/BasicWalkingTest.java
@@ -21,7 +21,7 @@
  * 51 Franklin Street, Fifth Floor
  * Boston, MA  02110-1301  USA
  */
-package org.hibernate.test.walking;
+package org.hibernate.test.loadplans.walking;
 
 import javax.persistence.Entity;
 import javax.persistence.Id;
diff --git a/hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/CompositesWalkingTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/CompositesWalkingTest.java
new file mode 100644
index 0000000000..56cc34100a
--- /dev/null
+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/CompositesWalkingTest.java
@@ -0,0 +1,52 @@
+/*
+ * Hibernate, Relational Persistence for Idiomatic Java
+ *
+ * Copyright (c) 2013, Red Hat Inc. or third-party contributors as
+ * indicated by the @author tags or express copyright attribution
+ * statements applied by the authors.  All third-party contributions are
+ * distributed under license by Red Hat Inc.
+ *
+ * This copyrighted material is made available to anyone wishing to use, modify,
+ * copy, or redistribute it subject to the terms and conditions of the GNU
+ * Lesser General Public License, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this distribution; if not, write to:
+ * Free Software Foundation, Inc.
+ * 51 Franklin Street, Fifth Floor
+ * Boston, MA  02110-1301  USA
+ */
+package org.hibernate.test.loadplans.walking;
+
+import org.hibernate.SessionFactory;
+import org.hibernate.cfg.Configuration;
+import org.hibernate.persister.entity.EntityPersister;
+import org.hibernate.persister.walking.spi.MetamodelGraphWalker;
+
+import org.junit.Test;
+
+import org.hibernate.testing.junit4.BaseUnitTestCase;
+import org.hibernate.test.annotations.collectionelement.TestCourse;
+
+/**
+ * @author Steve Ebersole
+ */
+public class CompositesWalkingTest extends BaseUnitTestCase {
+	/**
+	 * Test one-level composites defined as part of an entity.
+	 */
+	@Test
+	public void testEntityComposite() {
+		final SessionFactory sf = new Configuration()
+				.addAnnotatedClass( TestCourse.class )
+				.buildSessionFactory();
+		final EntityPersister ep = (EntityPersister) sf.getClassMetadata( TestCourse.class );
+
+		MetamodelGraphWalker.visitEntity( new LoggingAssociationVisitationStrategy(), ep );
+	}
+}
diff --git a/hibernate-core/src/test/java/org/hibernate/test/walking/KeyManyToOneWalkingTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/KeyManyToOneWalkingTest.java
similarity index 97%
rename from hibernate-core/src/test/java/org/hibernate/test/walking/KeyManyToOneWalkingTest.java
rename to hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/KeyManyToOneWalkingTest.java
index 3ace4cc72c..d47e424c45 100644
--- a/hibernate-core/src/test/java/org/hibernate/test/walking/KeyManyToOneWalkingTest.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/KeyManyToOneWalkingTest.java
@@ -21,7 +21,7 @@
  * 51 Franklin Street, Fifth Floor
  * Boston, MA  02110-1301  USA
  */
-package org.hibernate.test.walking;
+package org.hibernate.test.loadplans.walking;
 
 import org.hibernate.persister.entity.EntityPersister;
 import org.hibernate.persister.walking.spi.MetamodelGraphWalker;
diff --git a/hibernate-core/src/test/java/org/hibernate/test/walking/LoggingAssociationVisitationStrategy.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/LoggingAssociationVisitationStrategy.java
similarity index 97%
rename from hibernate-core/src/test/java/org/hibernate/test/walking/LoggingAssociationVisitationStrategy.java
rename to hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/LoggingAssociationVisitationStrategy.java
index cdbfa7a203..fd4991e196 100644
--- a/hibernate-core/src/test/java/org/hibernate/test/walking/LoggingAssociationVisitationStrategy.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/LoggingAssociationVisitationStrategy.java
@@ -21,7 +21,7 @@
  * 51 Franklin Street, Fifth Floor
  * Boston, MA  02110-1301  USA
  */
-package org.hibernate.test.walking;
+package org.hibernate.test.loadplans.walking;
 
 import org.hibernate.annotations.common.util.StringHelper;
 import org.hibernate.persister.walking.spi.AnyMappingDefinition;
@@ -41,7 +41,7 @@ import org.hibernate.persister.walking.spi.EntityIdentifierDefinition;
  * @author Steve Ebersole
  */
 public class LoggingAssociationVisitationStrategy implements AssociationVisitationStrategy {
-	private int depth = 0;
+	private int depth = 1;
 
 	@Override
 	public void start() {
@@ -176,7 +176,7 @@ public class LoggingAssociationVisitationStrategy implements AssociationVisitati
 		System.out.println(
 				String.format(
 						""%s Finishing collection index (%s)"",
-						StringHelper.repeat( "">>"", ++depth ),
+						StringHelper.repeat( ""<<"", depth-- ),
 						collectionIndexDefinition.getCollectionDefinition().getCollectionPersister().getRole()
 				)
 		);
@@ -198,7 +198,7 @@ public class LoggingAssociationVisitationStrategy implements AssociationVisitati
 		System.out.println(
 				String.format(
 						""%s Finishing collection elements (%s)"",
-						StringHelper.repeat( "">>"", ++depth ),
+						StringHelper.repeat( ""<<"", depth-- ),
 						elementDefinition.getCollectionDefinition().getCollectionPersister().getRole()
 				)
 		);
@@ -223,7 +223,7 @@ public class LoggingAssociationVisitationStrategy implements AssociationVisitati
 		System.out.println(
 				String.format(
 						""%s Finishing composite (%s)"",
-						StringHelper.repeat( "">>"", depth-- ),
+						StringHelper.repeat( ""<<"", depth-- ),
 						compositionElementDefinition.getCollectionDefinition().getCollectionPersister().getRole()
 				)
 		);",Provide default implementation of MeterRegistry . bind,0
"diff --git a/retrofit/src/main/java/retrofit2/HttpServiceMethod.java b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java
index 027f6cf6e6..d6e7f62bc7 100644
--- a/retrofit/src/main/java/retrofit2/HttpServiceMethod.java
+++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java
@@ -21,6 +21,8 @@
 import javax.annotation.Nullable;
 import okhttp3.ResponseBody;
 
+import static retrofit2.Utils.methodError;
+
 /** Adapts an invocation of an interface method into an HTTP call. */
 final class HttpServiceMethod<ResponseT, ReturnT> extends ServiceMethod<ReturnT> {
   private final RequestFactory requestFactory;
@@ -65,14 +67,14 @@ HttpServiceMethod<ResponseT, ReturnT> build() {
       callAdapter = createCallAdapter();
       responseType = callAdapter.responseType();
       if (responseType == Response.class || responseType == okhttp3.Response.class) {
-        throw methodError(""'""
+        throw methodError(method, ""'""
             + Utils.getRawType(responseType).getName()
             + ""' is not a valid response body type. Did you mean ResponseBody?"");
       }
       responseConverter = createResponseConverter();
 
       if (requestFactory.httpMethod.equals(""HEAD"") && !Void.class.equals(responseType)) {
-        throw methodError(""HEAD method must use Void as response type."");
+        throw methodError(method, ""HEAD method must use Void as response type."");
       }
 
       return new HttpServiceMethod<>(this);
@@ -81,18 +83,18 @@ HttpServiceMethod<ResponseT, ReturnT> build() {
     private CallAdapter<ResponseT, ReturnT> createCallAdapter() {
       Type returnType = method.getGenericReturnType();
       if (Utils.hasUnresolvableType(returnType)) {
-        throw methodError(
+        throw methodError(method,
             ""Method return type must not include a type variable or wildcard: %s"", returnType);
       }
       if (returnType == void.class) {
-        throw methodError(""Service methods cannot return void."");
+        throw methodError(method, ""Service methods cannot return void."");
       }
       Annotation[] annotations = method.getAnnotations();
       try {
         //noinspection unchecked
         return (CallAdapter<ResponseT, ReturnT>) retrofit.callAdapter(returnType, annotations);
       } catch (RuntimeException e) { // Wide exception range because factories are user code.
-        throw methodError(e, ""Unable to create call adapter for %s"", returnType);
+        throw methodError(method, e, ""Unable to create call adapter for %s"", returnType);
       }
     }
 
@@ -101,21 +103,8 @@ private Converter<ResponseBody, ResponseT> createResponseConverter() {
       try {
         return retrofit.responseBodyConverter(responseType, annotations);
       } catch (RuntimeException e) { // Wide exception range because factories are user code.
-        throw methodError(e, ""Unable to create converter for %s"", responseType);
+        throw methodError(method, e, ""Unable to create converter for %s"", responseType);
       }
     }
-
-    private RuntimeException methodError(String message, Object... args) {
-      return methodError(null, message, args);
-    }
-
-    private RuntimeException methodError(Throwable cause, String message, Object... args) {
-      message = String.format(message, args);
-      return new IllegalArgumentException(message
-          + ""\n    for method ""
-          + method.getDeclaringClass().getSimpleName()
-          + "".""
-          + method.getName(), cause);
-    }
   }
 }
diff --git a/retrofit/src/main/java/retrofit2/RequestFactory.java b/retrofit/src/main/java/retrofit2/RequestFactory.java
index de6268086e..3ad718b3c4 100644
--- a/retrofit/src/main/java/retrofit2/RequestFactory.java
+++ b/retrofit/src/main/java/retrofit2/RequestFactory.java
@@ -55,6 +55,9 @@
 import retrofit2.http.QueryName;
 import retrofit2.http.Url;
 
+import static retrofit2.Utils.methodError;
+import static retrofit2.Utils.parameterError;
+
 final class RequestFactory {
   static RequestFactory parseAnnotations(Retrofit retrofit, Method method) {
     return new Builder(retrofit, method).build();
@@ -149,16 +152,16 @@ RequestFactory build() {
       }
 
       if (httpMethod == null) {
-        throw methodError(""HTTP method annotation is required (e.g., @GET, @POST, etc.)."");
+        throw methodError(method, ""HTTP method annotation is required (e.g., @GET, @POST, etc.)."");
       }
 
       if (!hasBody) {
         if (isMultipart) {
-          throw methodError(
+          throw methodError(method,
               ""Multipart can only be specified on HTTP methods with request body (e.g., @POST)."");
         }
         if (isFormEncoded) {
-          throw methodError(""FormUrlEncoded can only be specified on HTTP methods with ""
+          throw methodError(method, ""FormUrlEncoded can only be specified on HTTP methods with ""
               + ""request body (e.g., @POST)."");
         }
       }
@@ -168,29 +171,29 @@ RequestFactory build() {
       for (int p = 0; p < parameterCount; p++) {
         Type parameterType = parameterTypes[p];
         if (Utils.hasUnresolvableType(parameterType)) {
-          throw parameterError(p, ""Parameter type must not include a type variable or wildcard: %s"",
-              parameterType);
+          throw parameterError(method, p,
+              ""Parameter type must not include a type variable or wildcard: %s"", parameterType);
         }
 
         Annotation[] parameterAnnotations = parameterAnnotationsArray[p];
         if (parameterAnnotations == null) {
-          throw parameterError(p, ""No Retrofit annotation found."");
+          throw parameterError(method, p, ""No Retrofit annotation found."");
         }
 
         parameterHandlers[p] = parseParameter(p, parameterType, parameterAnnotations);
       }
 
       if (relativeUrl == null && !gotUrl) {
-        throw methodError(""Missing either @%s URL or @Url parameter."", httpMethod);
+        throw methodError(method, ""Missing either @%s URL or @Url parameter."", httpMethod);
       }
       if (!isFormEncoded && !isMultipart && !hasBody && gotBody) {
-        throw methodError(""Non-body HTTP method cannot contain @Body."");
+        throw methodError(method, ""Non-body HTTP method cannot contain @Body."");
       }
       if (isFormEncoded && !gotField) {
-        throw methodError(""Form-encoded method must contain at least one @Field."");
+        throw methodError(method, ""Form-encoded method must contain at least one @Field."");
       }
       if (isMultipart && !gotPart) {
-        throw methodError(""Multipart method must contain at least one @Part."");
+        throw methodError(method, ""Multipart method must contain at least one @Part."");
       }
 
       return new RequestFactory(this);
@@ -217,17 +220,17 @@ private void parseMethodAnnotation(Annotation annotation) {
       } else if (annotation instanceof retrofit2.http.Headers) {
         String[] headersToParse = ((retrofit2.http.Headers) annotation).value();
         if (headersToParse.length == 0) {
-          throw methodError(""@Headers annotation is empty."");
+          throw methodError(method, ""@Headers annotation is empty."");
         }
         headers = parseHeaders(headersToParse);
       } else if (annotation instanceof Multipart) {
         if (isFormEncoded) {
-          throw methodError(""Only one encoding annotation is allowed."");
+          throw methodError(method, ""Only one encoding annotation is allowed."");
         }
         isMultipart = true;
       } else if (annotation instanceof FormUrlEncoded) {
         if (isMultipart) {
-          throw methodError(""Only one encoding annotation is allowed."");
+          throw methodError(method, ""Only one encoding annotation is allowed."");
         }
         isFormEncoded = true;
       }
@@ -235,7 +238,7 @@ private void parseMethodAnnotation(Annotation annotation) {
 
     private void parseHttpMethodAndPath(String httpMethod, String value, boolean hasBody) {
       if (this.httpMethod != null) {
-        throw methodError(""Only one HTTP method is allowed. Found: %s and %s."",
+        throw methodError(method, ""Only one HTTP method is allowed. Found: %s and %s."",
             this.httpMethod, httpMethod);
       }
       this.httpMethod = httpMethod;
@@ -252,7 +255,7 @@ private void parseHttpMethodAndPath(String httpMethod, String value, boolean has
         String queryParams = value.substring(question + 1);
         Matcher queryParamMatcher = PARAM_URL_REGEX.matcher(queryParams);
         if (queryParamMatcher.find()) {
-          throw methodError(""URL query string \""%s\"" must not have replace block. ""
+          throw methodError(method, ""URL query string \""%s\"" must not have replace block. ""
               + ""For dynamic query parameters use @Query."", queryParams);
         }
       }
@@ -266,7 +269,7 @@ private Headers parseHeaders(String[] headers) {
       for (String header : headers) {
         int colon = header.indexOf(':');
         if (colon == -1 || colon == 0 || colon == header.length() - 1) {
-          throw methodError(
+          throw methodError(method,
               ""@Headers value must be in the form \""Name: Value\"". Found: \""%s\"""", header);
         }
         String headerName = header.substring(0, colon);
@@ -274,7 +277,7 @@ private Headers parseHeaders(String[] headers) {
         if (""Content-Type"".equalsIgnoreCase(headerName)) {
           MediaType type = MediaType.parse(headerValue);
           if (type == null) {
-            throw methodError(""Malformed content type: %s"", headerValue);
+            throw methodError(method, ""Malformed content type: %s"", headerValue);
           }
           contentType = type;
         } else {
@@ -296,14 +299,14 @@ private ParameterHandler<?> parseParameter(
         }
 
         if (result != null) {
-          throw parameterError(p, ""Multiple Retrofit annotations found, only one allowed."");
+          throw parameterError(method, p, ""Multiple Retrofit annotations found, only one allowed."");
         }
 
         result = annotationAction;
       }
 
       if (result == null) {
-        throw parameterError(p, ""No Retrofit annotation found."");
+        throw parameterError(method, p, ""No Retrofit annotation found."");
       }
 
       return result;
@@ -313,16 +316,16 @@ private ParameterHandler<?> parseParameterAnnotation(
         int p, Type type, Annotation[] annotations, Annotation annotation) {
       if (annotation instanceof Url) {
         if (gotUrl) {
-          throw parameterError(p, ""Multiple @Url method annotations found."");
+          throw parameterError(method, p, ""Multiple @Url method annotations found."");
         }
         if (gotPath) {
-          throw parameterError(p, ""@Path parameters may not be used with @Url."");
+          throw parameterError(method, p, ""@Path parameters may not be used with @Url."");
         }
         if (gotQuery) {
-          throw parameterError(p, ""A @Url parameter must not come after a @Query"");
+          throw parameterError(method, p, ""A @Url parameter must not come after a @Query"");
         }
         if (relativeUrl != null) {
-          throw parameterError(p, ""@Url cannot be used with @%s URL"", httpMethod);
+          throw parameterError(method, p, ""@Url cannot be used with @%s URL"", httpMethod);
         }
 
         gotUrl = true;
@@ -333,19 +336,20 @@ private ParameterHandler<?> parseParameterAnnotation(
             || (type instanceof Class && ""android.net.Uri"".equals(((Class<?>) type).getName()))) {
           return new ParameterHandler.RelativeUrl();
         } else {
-          throw parameterError(p,
+          throw parameterError(method, p,
               ""@Url must be okhttp3.HttpUrl, String, java.net.URI, or android.net.Uri type."");
         }
 
       } else if (annotation instanceof Path) {
         if (gotQuery) {
-          throw parameterError(p, ""A @Path parameter must not come after a @Query."");
+          throw parameterError(method, p, ""A @Path parameter must not come after a @Query."");
         }
         if (gotUrl) {
-          throw parameterError(p, ""@Path parameters may not be used with @Url."");
+          throw parameterError(method, p, ""@Path parameters may not be used with @Url."");
         }
         if (relativeUrl == null) {
-          throw parameterError(p, ""@Path can only be used with relative url on @%s"", httpMethod);
+          throw parameterError(method, p, ""@Path can only be used with relative url on @%s"",
+              httpMethod);
         }
         gotPath = true;
 
@@ -365,7 +369,7 @@ private ParameterHandler<?> parseParameterAnnotation(
         gotQuery = true;
         if (Iterable.class.isAssignableFrom(rawParameterType)) {
           if (!(type instanceof ParameterizedType)) {
-            throw parameterError(p, rawParameterType.getSimpleName()
+            throw parameterError(method, p, rawParameterType.getSimpleName()
                 + "" must include generic type (e.g., ""
                 + rawParameterType.getSimpleName()
                 + ""<String>)"");
@@ -394,7 +398,7 @@ private ParameterHandler<?> parseParameterAnnotation(
         gotQuery = true;
         if (Iterable.class.isAssignableFrom(rawParameterType)) {
           if (!(type instanceof ParameterizedType)) {
-            throw parameterError(p, rawParameterType.getSimpleName()
+            throw parameterError(method, p, rawParameterType.getSimpleName()
                 + "" must include generic type (e.g., ""
                 + rawParameterType.getSimpleName()
                 + ""<String>)"");
@@ -418,16 +422,17 @@ private ParameterHandler<?> parseParameterAnnotation(
       } else if (annotation instanceof QueryMap) {
         Class<?> rawParameterType = Utils.getRawType(type);
         if (!Map.class.isAssignableFrom(rawParameterType)) {
-          throw parameterError(p, ""@QueryMap parameter type must be Map."");
+          throw parameterError(method, p, ""@QueryMap parameter type must be Map."");
         }
         Type mapType = Utils.getSupertype(type, rawParameterType, Map.class);
         if (!(mapType instanceof ParameterizedType)) {
-          throw parameterError(p, ""Map must include generic types (e.g., Map<String, String>)"");
+          throw parameterError(method, p,
+              ""Map must include generic types (e.g., Map<String, String>)"");
         }
         ParameterizedType parameterizedType = (ParameterizedType) mapType;
         Type keyType = Utils.getParameterUpperBound(0, parameterizedType);
         if (String.class != keyType) {
-          throw parameterError(p, ""@QueryMap keys must be of type String: "" + keyType);
+          throw parameterError(method, p, ""@QueryMap keys must be of type String: "" + keyType);
         }
         Type valueType = Utils.getParameterUpperBound(1, parameterizedType);
         Converter<?, String> valueConverter =
@@ -442,7 +447,7 @@ private ParameterHandler<?> parseParameterAnnotation(
         Class<?> rawParameterType = Utils.getRawType(type);
         if (Iterable.class.isAssignableFrom(rawParameterType)) {
           if (!(type instanceof ParameterizedType)) {
-            throw parameterError(p, rawParameterType.getSimpleName()
+            throw parameterError(method, p, rawParameterType.getSimpleName()
                 + "" must include generic type (e.g., ""
                 + rawParameterType.getSimpleName()
                 + ""<String>)"");
@@ -466,16 +471,17 @@ private ParameterHandler<?> parseParameterAnnotation(
       } else if (annotation instanceof HeaderMap) {
         Class<?> rawParameterType = Utils.getRawType(type);
         if (!Map.class.isAssignableFrom(rawParameterType)) {
-          throw parameterError(p, ""@HeaderMap parameter type must be Map."");
+          throw parameterError(method, p, ""@HeaderMap parameter type must be Map."");
         }
         Type mapType = Utils.getSupertype(type, rawParameterType, Map.class);
         if (!(mapType instanceof ParameterizedType)) {
-          throw parameterError(p, ""Map must include generic types (e.g., Map<String, String>)"");
+          throw parameterError(method, p,
+              ""Map must include generic types (e.g., Map<String, String>)"");
         }
         ParameterizedType parameterizedType = (ParameterizedType) mapType;
         Type keyType = Utils.getParameterUpperBound(0, parameterizedType);
         if (String.class != keyType) {
-          throw parameterError(p, ""@HeaderMap keys must be of type String: "" + keyType);
+          throw parameterError(method, p, ""@HeaderMap keys must be of type String: "" + keyType);
         }
         Type valueType = Utils.getParameterUpperBound(1, parameterizedType);
         Converter<?, String> valueConverter =
@@ -485,7 +491,7 @@ private ParameterHandler<?> parseParameterAnnotation(
 
       } else if (annotation instanceof Field) {
         if (!isFormEncoded) {
-          throw parameterError(p, ""@Field parameters can only be used with form encoding."");
+          throw parameterError(method, p, ""@Field parameters can only be used with form encoding."");
         }
         Field field = (Field) annotation;
         String name = field.value();
@@ -496,7 +502,7 @@ private ParameterHandler<?> parseParameterAnnotation(
         Class<?> rawParameterType = Utils.getRawType(type);
         if (Iterable.class.isAssignableFrom(rawParameterType)) {
           if (!(type instanceof ParameterizedType)) {
-            throw parameterError(p, rawParameterType.getSimpleName()
+            throw parameterError(method, p, rawParameterType.getSimpleName()
                 + "" must include generic type (e.g., ""
                 + rawParameterType.getSimpleName()
                 + ""<String>)"");
@@ -519,21 +525,22 @@ private ParameterHandler<?> parseParameterAnnotation(
 
       } else if (annotation instanceof FieldMap) {
         if (!isFormEncoded) {
-          throw parameterError(p, ""@FieldMap parameters can only be used with form encoding."");
+          throw parameterError(method, p,
+              ""@FieldMap parameters can only be used with form encoding."");
         }
         Class<?> rawParameterType = Utils.getRawType(type);
         if (!Map.class.isAssignableFrom(rawParameterType)) {
-          throw parameterError(p, ""@FieldMap parameter type must be Map."");
+          throw parameterError(method, p, ""@FieldMap parameter type must be Map."");
         }
         Type mapType = Utils.getSupertype(type, rawParameterType, Map.class);
         if (!(mapType instanceof ParameterizedType)) {
-          throw parameterError(p,
+          throw parameterError(method, p,
               ""Map must include generic types (e.g., Map<String, String>)"");
         }
         ParameterizedType parameterizedType = (ParameterizedType) mapType;
         Type keyType = Utils.getParameterUpperBound(0, parameterizedType);
         if (String.class != keyType) {
-          throw parameterError(p, ""@FieldMap keys must be of type String: "" + keyType);
+          throw parameterError(method, p, ""@FieldMap keys must be of type String: "" + keyType);
         }
         Type valueType = Utils.getParameterUpperBound(1, parameterizedType);
         Converter<?, String> valueConverter =
@@ -544,7 +551,8 @@ private ParameterHandler<?> parseParameterAnnotation(
 
       } else if (annotation instanceof Part) {
         if (!isMultipart) {
-          throw parameterError(p, ""@Part parameters can only be used with multipart encoding."");
+          throw parameterError(method, p,
+              ""@Part parameters can only be used with multipart encoding."");
         }
         Part part = (Part) annotation;
         gotPart = true;
@@ -554,7 +562,7 @@ private ParameterHandler<?> parseParameterAnnotation(
         if (partName.isEmpty()) {
           if (Iterable.class.isAssignableFrom(rawParameterType)) {
             if (!(type instanceof ParameterizedType)) {
-              throw parameterError(p, rawParameterType.getSimpleName()
+              throw parameterError(method, p, rawParameterType.getSimpleName()
                   + "" must include generic type (e.g., ""
                   + rawParameterType.getSimpleName()
                   + ""<String>)"");
@@ -562,21 +570,21 @@ private ParameterHandler<?> parseParameterAnnotation(
             ParameterizedType parameterizedType = (ParameterizedType) type;
             Type iterableType = Utils.getParameterUpperBound(0, parameterizedType);
             if (!MultipartBody.Part.class.isAssignableFrom(Utils.getRawType(iterableType))) {
-              throw parameterError(p,
+              throw parameterError(method, p,
                   ""@Part annotation must supply a name or use MultipartBody.Part parameter type."");
             }
             return ParameterHandler.RawPart.INSTANCE.iterable();
           } else if (rawParameterType.isArray()) {
             Class<?> arrayComponentType = rawParameterType.getComponentType();
             if (!MultipartBody.Part.class.isAssignableFrom(arrayComponentType)) {
-              throw parameterError(p,
+              throw parameterError(method, p,
                   ""@Part annotation must supply a name or use MultipartBody.Part parameter type."");
             }
             return ParameterHandler.RawPart.INSTANCE.array();
           } else if (MultipartBody.Part.class.isAssignableFrom(rawParameterType)) {
             return ParameterHandler.RawPart.INSTANCE;
           } else {
-            throw parameterError(p,
+            throw parameterError(method, p,
                 ""@Part annotation must supply a name or use MultipartBody.Part parameter type."");
           }
         } else {
@@ -586,7 +594,7 @@ private ParameterHandler<?> parseParameterAnnotation(
 
           if (Iterable.class.isAssignableFrom(rawParameterType)) {
             if (!(type instanceof ParameterizedType)) {
-              throw parameterError(p, rawParameterType.getSimpleName()
+              throw parameterError(method, p, rawParameterType.getSimpleName()
                   + "" must include generic type (e.g., ""
                   + rawParameterType.getSimpleName()
                   + ""<String>)"");
@@ -594,8 +602,9 @@ private ParameterHandler<?> parseParameterAnnotation(
             ParameterizedType parameterizedType = (ParameterizedType) type;
             Type iterableType = Utils.getParameterUpperBound(0, parameterizedType);
             if (MultipartBody.Part.class.isAssignableFrom(Utils.getRawType(iterableType))) {
-              throw parameterError(p, ""@Part parameters using the MultipartBody.Part must not ""
-                  + ""include a part name in the annotation."");
+              throw parameterError(method, p,
+                  ""@Part parameters using the MultipartBody.Part must not ""
+                      + ""include a part name in the annotation."");
             }
             Converter<?, RequestBody> converter =
                 retrofit.requestBodyConverter(iterableType, annotations, methodAnnotations);
@@ -603,15 +612,17 @@ private ParameterHandler<?> parseParameterAnnotation(
           } else if (rawParameterType.isArray()) {
             Class<?> arrayComponentType = boxIfPrimitive(rawParameterType.getComponentType());
             if (MultipartBody.Part.class.isAssignableFrom(arrayComponentType)) {
-              throw parameterError(p, ""@Part parameters using the MultipartBody.Part must not ""
-                  + ""include a part name in the annotation."");
+              throw parameterError(method, p,
+                  ""@Part parameters using the MultipartBody.Part must not ""
+                      + ""include a part name in the annotation."");
             }
             Converter<?, RequestBody> converter =
                 retrofit.requestBodyConverter(arrayComponentType, annotations, methodAnnotations);
             return new ParameterHandler.Part<>(headers, converter).array();
           } else if (MultipartBody.Part.class.isAssignableFrom(rawParameterType)) {
-            throw parameterError(p, ""@Part parameters using the MultipartBody.Part must not ""
-                + ""include a part name in the annotation."");
+            throw parameterError(method, p,
+                ""@Part parameters using the MultipartBody.Part must not ""
+                    + ""include a part name in the annotation."");
           } else {
             Converter<?, RequestBody> converter =
                 retrofit.requestBodyConverter(type, annotations, methodAnnotations);
@@ -621,27 +632,29 @@ private ParameterHandler<?> parseParameterAnnotation(
 
       } else if (annotation instanceof PartMap) {
         if (!isMultipart) {
-          throw parameterError(p, ""@PartMap parameters can only be used with multipart encoding."");
+          throw parameterError(method, p,
+              ""@PartMap parameters can only be used with multipart encoding."");
         }
         gotPart = true;
         Class<?> rawParameterType = Utils.getRawType(type);
         if (!Map.class.isAssignableFrom(rawParameterType)) {
-          throw parameterError(p, ""@PartMap parameter type must be Map."");
+          throw parameterError(method, p, ""@PartMap parameter type must be Map."");
         }
         Type mapType = Utils.getSupertype(type, rawParameterType, Map.class);
         if (!(mapType instanceof ParameterizedType)) {
-          throw parameterError(p, ""Map must include generic types (e.g., Map<String, String>)"");
+          throw parameterError(method, p,
+              ""Map must include generic types (e.g., Map<String, String>)"");
         }
         ParameterizedType parameterizedType = (ParameterizedType) mapType;
 
         Type keyType = Utils.getParameterUpperBound(0, parameterizedType);
         if (String.class != keyType) {
-          throw parameterError(p, ""@PartMap keys must be of type String: "" + keyType);
+          throw parameterError(method, p, ""@PartMap keys must be of type String: "" + keyType);
         }
 
         Type valueType = Utils.getParameterUpperBound(1, parameterizedType);
         if (MultipartBody.Part.class.isAssignableFrom(Utils.getRawType(valueType))) {
-          throw parameterError(p, ""@PartMap values cannot be MultipartBody.Part. ""
+          throw parameterError(method, p, ""@PartMap values cannot be MultipartBody.Part. ""
               + ""Use @Part List<Part> or a different value type instead."");
         }
 
@@ -653,11 +666,11 @@ private ParameterHandler<?> parseParameterAnnotation(
 
       } else if (annotation instanceof Body) {
         if (isFormEncoded || isMultipart) {
-          throw parameterError(p,
+          throw parameterError(method, p,
               ""@Body parameters cannot be used with form or multi-part encoding."");
         }
         if (gotBody) {
-          throw parameterError(p, ""Multiple @Body method annotations found."");
+          throw parameterError(method, p, ""Multiple @Body method annotations found."");
         }
 
         Converter<?, RequestBody> converter;
@@ -665,7 +678,7 @@ private ParameterHandler<?> parseParameterAnnotation(
           converter = retrofit.requestBodyConverter(type, annotations, methodAnnotations);
         } catch (RuntimeException e) {
           // Wide exception range because factories are user code.
-          throw parameterError(e, p, ""Unable to create @Body converter for %s"", type);
+          throw parameterError(method, e, p, ""Unable to create @Body converter for %s"", type);
         }
         gotBody = true;
         return new ParameterHandler.Body<>(converter);
@@ -676,37 +689,15 @@ private ParameterHandler<?> parseParameterAnnotation(
 
     private void validatePathName(int p, String name) {
       if (!PARAM_NAME_REGEX.matcher(name).matches()) {
-        throw parameterError(p, ""@Path parameter name must match %s. Found: %s"",
+        throw parameterError(method, p, ""@Path parameter name must match %s. Found: %s"",
             PARAM_URL_REGEX.pattern(), name);
       }
       // Verify URL replacement name is actually present in the URL path.
       if (!relativeUrlParamNames.contains(name)) {
-        throw parameterError(p, ""URL \""%s\"" does not contain \""{%s}\""."", relativeUrl, name);
+        throw parameterError(method, p, ""URL \""%s\"" does not contain \""{%s}\""."", relativeUrl, name);
       }
     }
 
-    private RuntimeException methodError(String message, Object... args) {
-      return methodError(null, message, args);
-    }
-
-    private RuntimeException methodError(Throwable cause, String message, Object... args) {
-      message = String.format(message, args);
-      return new IllegalArgumentException(message
-          + ""\n    for method ""
-          + method.getDeclaringClass().getSimpleName()
-          + "".""
-          + method.getName(), cause);
-    }
-
-    private RuntimeException parameterError(
-        Throwable cause, int p, String message, Object... args) {
-      return methodError(cause, message + "" (parameter #"" + (p + 1) + "")"", args);
-    }
-
-    private RuntimeException parameterError(int p, String message, Object... args) {
-      return methodError(message + "" (parameter #"" + (p + 1) + "")"", args);
-    }
-
     /**
      * Gets the set of unique path parameters used in the given URI. If a parameter is used twice
      * in the URI, it will only show up once in the set.
diff --git a/retrofit/src/main/java/retrofit2/Utils.java b/retrofit/src/main/java/retrofit2/Utils.java
index 12544e357d..85258222cc 100644
--- a/retrofit/src/main/java/retrofit2/Utils.java
+++ b/retrofit/src/main/java/retrofit2/Utils.java
@@ -20,6 +20,7 @@
 import java.lang.reflect.Array;
 import java.lang.reflect.GenericArrayType;
 import java.lang.reflect.GenericDeclaration;
+import java.lang.reflect.Method;
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
 import java.lang.reflect.TypeVariable;
@@ -37,6 +38,29 @@ private Utils() {
     // No instances.
   }
 
+  static RuntimeException methodError(Method method, String message, Object... args) {
+    return methodError(method, null, message, args);
+  }
+
+  static RuntimeException methodError(Method method, @Nullable Throwable cause, String message,
+      Object... args) {
+    message = String.format(message, args);
+    return new IllegalArgumentException(message
+        + ""\n    for method ""
+        + method.getDeclaringClass().getSimpleName()
+        + "".""
+        + method.getName(), cause);
+  }
+
+  static RuntimeException parameterError(Method method,
+      Throwable cause, int p, String message, Object... args) {
+    return methodError(method, cause, message + "" (parameter #"" + (p + 1) + "")"", args);
+  }
+
+  static RuntimeException parameterError(Method method, int p, String message, Object... args) {
+    return methodError(method, message + "" (parameter #"" + (p + 1) + "")"", args);
+  }
+
   static Class<?> getRawType(Type type) {
     checkNotNull(type, ""type == null"");",Consolidate exception formatters in one place,1
"diff --git a/.travis.yml b/.travis.yml
index 6a1a57bd99de..f3b97ca7640d 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,5 +1,5 @@
 language: java
 services: mongodb
 
-install: mvn install -U -DskipTests=true -P spring-snapshot
-script: mvn install -nsu -P '!integration'
+install: mvn install -q -U -DskipTests=true -P spring-snapshot
+script: mvn install -q -nsu -P '!integration'",Reduce logging in Travis,1
"diff --git a/dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java b/dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java
index 03a53938431..47b19cfde8d 100644
--- a/dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java
+++ b/dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java
@@ -668,6 +668,13 @@ private void loadDirectory(Map<String, Class<?>> extensionClasses, String dir, S
                 urls = ClassLoader.getSystemResources(fileName);
             }
             if (urls != null) {
+                if (!urls.hasMoreElements()) {
+                    // try to load from ExtensionLoader's ClassLoader
+                    ClassLoader extensionLoaderClassLoader = this.getClass().getClassLoader();
+                    if (ClassLoader.getSystemClassLoader() != extensionLoaderClassLoader) {
+                        urls = extensionLoaderClassLoader.getResources(fileName);
+                    }
+                }
                 while (urls.hasMoreElements()) {
                     java.net.URL resourceURL = urls.nextElement();
                     loadResource(extensionClasses, classLoader, resourceURL);",ExtensionLoader try to load from itself ClassLoader when can not find resources.,1
"diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index f072bc35..315ec18e 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2005c.
+http://www.twinsun.com/tz/tz-link.htm, version 2005f.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/asia b/JodaTime/src/java/org/joda/time/tz/src/asia
index 0d1439d1..4be50b0a 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/asia
+++ b/JodaTime/src/java/org/joda/time/tz/src/asia
@@ -1,4 +1,4 @@
-# @(#)asia	7.78
+# @(#)asia	7.80
 
 # This data is by no means authoritative; if you think you know better,
 # go ahead and edit the file (and please send any changes to
@@ -107,7 +107,7 @@ Zone	Asia/Baku	3:19:24 -	LMT	1924 May  2
 			3:00	-	BAKT	1957 Mar    # Baku Time
 			4:00 RussiaAsia BAK%sT	1991 Mar 31 2:00s
 			3:00	1:00	BAKST	1991 Aug 30 # independence
-			3:00 RussiaAsia	AZ%sT	1992 Sep lastSun 2:00s
+			3:00 RussiaAsia	AZ%sT	1992 Sep lastSat 23:00
 			4:00	-	AZT	1996 # Azerbaijan time
 			4:00	EUAsia	AZ%sT	1997
 			4:00	Azer	AZ%sT
@@ -337,7 +337,7 @@ Link	Asia/Nicosia	Europe/Nicosia
 # President Eduard Shevardnadze decreed Wednesday.
 #
 # From the BBC via Joseph S. Myers (2004-06-27):
-#  	
+#
 # Georgia moved closer to Western Europe on Sunday...  The former Soviet
 # republic has changed its time zone back to that of Moscow.  As a result it
 # is now just four hours ahead of Greenwich Mean Time, rather than five hours
@@ -639,7 +639,8 @@ Rule	Zion	1988	only	-	Apr	 9	0:00	1:00	D
 Rule	Zion	1988	only	-	Sep	 3	0:00	0	S
 
 # From Ephraim Silverberg <ephraim@cs.huji.ac.il>
-# (1997-03-04, 1998-03-16, 1998-12-28, 2000-01-17, 2000-07-25, and 2004-12-22):
+# (1997-03-04, 1998-03-16, 1998-12-28, 2000-01-17, 2000-07-25, 2004-12-22,
+# and 2005-02-17):
 
 # According to the Office of the Secretary General of the Ministry of
 # Interior, there is NO set rule for Daylight-Savings/Standard time changes.
@@ -735,91 +736,74 @@ Rule	Zion	2003	only	-	Oct	 3	1:00	0	S
 Rule	Zion	2004	only	-	Apr	 7	1:00	1:00	D
 Rule	Zion	2004	only	-	Sep	22	1:00	0	S
 
-# Yesterday, the Knesset Interior Committee passed a proposed (originally
-# in March 2004) change to the Time Setting Law that would make the dates
-# for DST from 2005 and beyond so that DST starts on the night _after_ the
-# first night of the Passover holiday at midnight until midnight of the
-# Saturday night _before_ the fast of Yom Kippur.
+# The proposed law agreed upon by the Knesset Interior Committee on
+# 2005-02-14 is that, for 2005 and beyond, DST starts at 02:00 the
+# last Friday before April 2nd (i.e. the last Friday in March or April
+# 1st itself if it falls on a Friday) and ends at 02:00 on the Saturday
+# night _before_ the fast of Yom Kippur.
+#
+# Those who can read Hebrew can view the announcement at:
 #
-# Those who can read Hebrew can view the proposal at:
+#	ftp://ftp.cs.huji.ac.il/pub/tz/announcements/2005+beyond.ps
+
+# From Paul Eggert (2005-02-22):
+# I used Ephraim Silverberg's dst-israel.el program
+# <ftp://ftp.cs.huji.ac.il/pub/tz/software/dst-israel.el> (2005-02-20)
+# along with Ed Reingold's cal-hebrew in GNU Emacs 21.4,
+# to generate the transitions in this list.
+# (I replaced ""lastFri"" with ""Fri>=26"" by hand.)
+# The spring transitions below all correspond to the following Rule:
 #
-#	ftp://ftp.cs.huji.ac.il/pub/tz/announcements/2005+.ps
+# Rule	Zion	2005	max	-	Mar	Fri>=26	2:00	1:00	D
 #
-# The proposal still has to be passed by the Knesset (three readings) for
-# it to become law....
+# but older zic implementations (e.g., Solaris 8) do not support
+# ""Fri>=26"" to mean April 1 in years like 2005, so for now we list the
+# springtime transitions explicitly.
 
-# From Paul Eggert (2004-12-22):
-# For now, guess that the rules proposed on 2004-12-20 will be adopted.
-# This is quite possibly wrong, but it is more likely than no DST at all.
-# I used Ed Reingold's cal-hebrew in GNU Emacs 21.3, along with code
-# written by Ephraim Silverberg, to generate this list.
-# Rule	NAME    FROM    TO      TYPE    IN      ON      AT      SAVE    LETTER/S
-Rule	Zion	2005	only	-	Apr	25	0:00	1:00	D
-Rule	Zion	2005	only	-	Oct	 9	0:00	0	S
-Rule	Zion	2006	only	-	Apr	14	0:00	1:00	D
-Rule	Zion	2006	only	-	Oct	 1	0:00	0	S
-Rule	Zion	2007	only	-	Apr	 4	0:00	1:00	D
-Rule	Zion	2007	only	-	Sep	16	0:00	0	S
-Rule	Zion	2008	only	-	Apr	21	0:00	1:00	D
-Rule	Zion	2008	only	-	Oct	 5	0:00	0	S
-Rule	Zion	2009	only	-	Apr	10	0:00	1:00	D
-Rule	Zion	2009	only	-	Sep	27	0:00	0	S
-Rule	Zion	2010	only	-	Mar	31	0:00	1:00	D
-Rule	Zion	2010	only	-	Sep	12	0:00	0	S
-Rule	Zion	2011	only	-	Apr	20	0:00	1:00	D
-Rule	Zion	2011	only	-	Oct	 2	0:00	0	S
-Rule	Zion	2012	only	-	Apr	 8	0:00	1:00	D
-Rule	Zion	2012	only	-	Sep	23	0:00	0	S
-Rule	Zion	2013	only	-	Mar	27	0:00	1:00	D
-Rule	Zion	2013	only	-	Sep	 8	0:00	0	S
-Rule	Zion	2014	only	-	Apr	16	0:00	1:00	D
-Rule	Zion	2014	only	-	Sep	28	0:00	0	S
-Rule	Zion	2015	only	-	Apr	 5	0:00	1:00	D
-Rule	Zion	2015	only	-	Sep	20	0:00	0	S
-Rule	Zion	2016	only	-	Apr	24	0:00	1:00	D
-Rule	Zion	2016	only	-	Oct	 9	0:00	0	S
-Rule	Zion	2017	only	-	Apr	12	0:00	1:00	D
-Rule	Zion	2017	only	-	Sep	24	0:00	0	S
-Rule	Zion	2018	only	-	Apr	 1	0:00	1:00	D
-Rule	Zion	2018	only	-	Sep	16	0:00	0	S
-Rule	Zion	2019	only	-	Apr	21	0:00	1:00	D
-Rule	Zion	2019	only	-	Oct	 6	0:00	0	S
-Rule	Zion	2020	only	-	Apr	10	0:00	1:00	D
-Rule	Zion	2020	only	-	Sep	27	0:00	0	S
-Rule	Zion	2021	only	-	Mar	29	0:00	1:00	D
-Rule	Zion	2021	only	-	Sep	12	0:00	0	S
-Rule	Zion	2022	only	-	Apr	17	0:00	1:00	D
-Rule	Zion	2022	only	-	Oct	 2	0:00	0	S
-Rule	Zion	2023	only	-	Apr	 7	0:00	1:00	D
-Rule	Zion	2023	only	-	Sep	24	0:00	0	S
-Rule	Zion	2024	only	-	Apr	24	0:00	1:00	D
-Rule	Zion	2024	only	-	Oct	 6	0:00	0	S
-Rule	Zion	2025	only	-	Apr	14	0:00	1:00	D
-Rule	Zion	2025	only	-	Sep	28	0:00	0	S
-Rule	Zion	2026	only	-	Apr	 3	0:00	1:00	D
-Rule	Zion	2026	only	-	Sep	20	0:00	0	S
-Rule	Zion	2027	only	-	Apr	23	0:00	1:00	D
-Rule	Zion	2027	only	-	Oct	10	0:00	0	S
-Rule	Zion	2028	only	-	Apr	12	0:00	1:00	D
-Rule	Zion	2028	only	-	Sep	24	0:00	0	S
-Rule	Zion	2029	only	-	Apr	 1	0:00	1:00	D
-Rule	Zion	2029	only	-	Sep	16	0:00	0	S
-Rule	Zion	2030	only	-	Apr	19	0:00	1:00	D
-Rule	Zion	2030	only	-	Oct	 6	0:00	0	S
-Rule	Zion	2031	only	-	Apr	 9	0:00	1:00	D
-Rule	Zion	2031	only	-	Sep	21	0:00	0	S
-Rule	Zion	2032	only	-	Mar	28	0:00	1:00	D
-Rule	Zion	2032	only	-	Sep	12	0:00	0	S
-Rule	Zion	2033	only	-	Apr	15	0:00	1:00	D
-Rule	Zion	2033	only	-	Oct	 2	0:00	0	S
-Rule	Zion	2034	only	-	Apr	 5	0:00	1:00	D
-Rule	Zion	2034	only	-	Sep	17	0:00	0	S
-Rule	Zion	2035	only	-	Apr	25	0:00	1:00	D
-Rule	Zion	2035	only	-	Oct	 7	0:00	0	S
-Rule	Zion	2036	only	-	Apr	13	0:00	1:00	D
-Rule	Zion	2036	only	-	Sep	28	0:00	0	S
-Rule	Zion	2037	only	-	Apr	 1	0:00	1:00	D
-Rule	Zion	2037	only	-	Sep	13	0:00	0	S
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Zion	2005	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2005	only	-	Oct	 9	2:00	0	S
+Rule	Zion	2006	2010	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2006	only	-	Oct	 1	2:00	0	S
+Rule	Zion	2007	only	-	Sep	16	2:00	0	S
+Rule	Zion	2008	only	-	Oct	 5	2:00	0	S
+Rule	Zion	2009	only	-	Sep	27	2:00	0	S
+Rule	Zion	2010	only	-	Sep	12	2:00	0	S
+Rule	Zion	2011	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2011	only	-	Oct	 2	2:00	0	S
+Rule	Zion	2012	2015	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2012	only	-	Sep	23	2:00	0	S
+Rule	Zion	2013	only	-	Sep	 8	2:00	0	S
+Rule	Zion	2014	only	-	Sep	28	2:00	0	S
+Rule	Zion	2015	only	-	Sep	20	2:00	0	S
+Rule	Zion	2016	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2016	only	-	Oct	 9	2:00	0	S
+Rule	Zion	2017	2021	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2017	only	-	Sep	24	2:00	0	S
+Rule	Zion	2018	only	-	Sep	16	2:00	0	S
+Rule	Zion	2019	only	-	Oct	 6	2:00	0	S
+Rule	Zion	2020	only	-	Sep	27	2:00	0	S
+Rule	Zion	2021	only	-	Sep	12	2:00	0	S
+Rule	Zion	2022	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2022	only	-	Oct	 2	2:00	0	S
+Rule	Zion	2023	2032	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2023	only	-	Sep	24	2:00	0	S
+Rule	Zion	2024	only	-	Oct	 6	2:00	0	S
+Rule	Zion	2025	only	-	Sep	28	2:00	0	S
+Rule	Zion	2026	only	-	Sep	20	2:00	0	S
+Rule	Zion	2027	only	-	Oct	10	2:00	0	S
+Rule	Zion	2028	only	-	Sep	24	2:00	0	S
+Rule	Zion	2029	only	-	Sep	16	2:00	0	S
+Rule	Zion	2030	only	-	Oct	 6	2:00	0	S
+Rule	Zion	2031	only	-	Sep	21	2:00	0	S
+Rule	Zion	2032	only	-	Sep	12	2:00	0	S
+Rule	Zion	2033	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2033	only	-	Oct	 2	2:00	0	S
+Rule	Zion	2034	2037	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2034	only	-	Sep	17	2:00	0	S
+Rule	Zion	2035	only	-	Oct	 7	2:00	0	S
+Rule	Zion	2036	only	-	Sep	28	2:00	0	S
+Rule	Zion	2037	only	-	Sep	13	2:00	0	S
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Jerusalem	2:20:56 -	LMT	1880
diff --git a/JodaTime/src/java/org/joda/time/tz/src/australasia b/JodaTime/src/java/org/joda/time/tz/src/australasia
index f265eece..4696d0b2 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/australasia
+++ b/JodaTime/src/java/org/joda/time/tz/src/australasia
@@ -1,4 +1,4 @@
-# @(#)australasia	7.69
+# @(#)australasia	7.70
 # This file also includes Pacific islands.
 
 # Notes are at the end of this file
@@ -434,6 +434,17 @@ Zone Pacific/Johnston	-10:00	-	HST
 # uninhabited
 
 # Midway
+#
+# From Mark Brader (2005-01-23):
+# [Fallacies and Fantasies of Air Transport History, by R.E.G. Davies,
+# published 1994 by Paladwr Press, McLean, VA, USA; ISBN 0-9626483-5-3]
+# reproduced a Pan American Airways timeables from 1936, for their weekly
+# ""Orient Express"" flights between San Francisco and Manila, and connecting
+# flights to Chicago and the US East Coast.  As it uses some time zone
+# designations that I've never seen before:....
+# Fri. 6:30A Lv. HONOLOLU (Pearl Harbor), H.I.   H.L.T. Ar. 5:30P Sun.
+#  ""   3:00P Ar. MIDWAY ISLAND . . . . . . . . . M.L.T. Lv. 6:00A  ""
+#
 Zone Pacific/Midway	-11:49:28 -	LMT	1901
 			-11:00	-	NST	1956 Jun  3
 			-11:00	1:00	NDT	1956 Sep  2
diff --git a/JodaTime/src/java/org/joda/time/tz/src/europe b/JodaTime/src/java/org/joda/time/tz/src/europe
index a4ff15ae..f7fd57e9 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/europe
+++ b/JodaTime/src/java/org/joda/time/tz/src/europe
@@ -1,4 +1,4 @@
-# @(#)europe	7.91
+# @(#)europe	7.92
 
 # This data is by no means authoritative; if you think you know better,
 # go ahead and edit the file (and please send any changes to
@@ -255,6 +255,35 @@
 #   ""Timeball on the ballast office is down.  Dunsink time.""
 #   -- James Joyce, Ulysses
 
+# From Joseph S. Myers (2005-01-26):
+# Irish laws are available online at www.irishstatutebook.ie.  These include 
+# various relating to legal time, for example:
+# 
+# ZZA13Y1923.html ZZA12Y1924.html ZZA8Y1925.html ZZSIV20PG1267.html
+# 
+# ZZSI71Y1947.html ZZSI128Y1948.html ZZSI23Y1949.html ZZSI41Y1950.html
+# ZZSI27Y1951.html ZZSI73Y1952.html
+# 
+# ZZSI11Y1961.html ZZSI232Y1961.html ZZSI182Y1962.html
+# ZZSI167Y1963.html ZZSI257Y1964.html ZZSI198Y1967.html
+# ZZA23Y1968.html ZZA17Y1971.html
+# 
+# ZZSI67Y1981.html ZZSI212Y1982.html ZZSI45Y1986.html
+# ZZSI264Y1988.html ZZSI52Y1990.html ZZSI371Y1992.html
+# ZZSI395Y1994.html ZZSI484Y1997.html ZZSI506Y2001.html
+#
+# [These are all relative to the root, e.g., the first is
+# <http://www.irishstatutebook.ie/ZZA13Y1923.html>.]
+# 
+# (These are those I found, but there could be more.  In any case these 
+# should allow various updates to the comments in the europe file to cover 
+# the laws applicable in Ireland.)
+# 
+# (Note that the time in the Republic of Ireland since 1968 has been defined 
+# in terms of standard time being GMT+1 with a period of winter time when it 
+# is GMT, rather than standard time being GMT with a period of summer time 
+# being GMT+1.)
+
 # From Paul Eggert (1999-03-28):
 # Clive Feather (<news:859845706.26043.0@office.demon.net>, 1997-03-31)
 # reports that Folkestone (Cheriton) Shuttle Terminal uses Concession Time
diff --git a/JodaTime/src/java/org/joda/time/tz/src/northamerica b/JodaTime/src/java/org/joda/time/tz/src/northamerica
index 950b46af..3d89e968 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/northamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/northamerica
@@ -1,4 +1,4 @@
-# @(#)northamerica	7.71
+# @(#)northamerica	7.72
 # also includes Central America and the Caribbean
 
 # This data is by no means authoritative; if you think you know better,
@@ -445,7 +445,7 @@ Link America/Denver America/Shiprock
 # Lemhi, Lincoln, Madison, Minidoka, Oneida, Owyhee, Payette, Power,
 # Teton, Twin Falls, Valley, Washington counties) and eastern Oregon
 # switched four weeks late in 1974.
-# 
+#
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone America/Boise	-7:44:49 -	LMT	1883 Nov 18 12:00
 			-8:00	US	P%sT	1923 May 13 2:00
diff --git a/JodaTime/src/java/org/joda/time/tz/src/southamerica b/JodaTime/src/java/org/joda/time/tz/src/southamerica
index bc93e112..c5bd5169 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/southamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/southamerica
@@ -1,4 +1,4 @@
-# @(#)southamerica	7.57
+# @(#)southamerica	7.58
 
 # This data is by no means authoritative; if you think you know better,
 # go ahead and edit the file (and please send any changes to
@@ -964,7 +964,7 @@ Zone America/Asuncion	-3:50:40 -	LMT	1890
 #
 # <a href=""news:xrGmb.39935$gA1.13896113@news4.srv.hcvlny.cv.net"">
 # From Evelyn C. Leeper via Mark Brader (2003-10-26):</a>
-# When we were in Peru in 1985-1986, they apparently switched over 
+# When we were in Peru in 1985-1986, they apparently switched over
 # sometime between December 29 and January 3 while we were on the Amazon.
 #
 # From Paul Eggert (2003-11-02):",Adding test cases to core without transport dependency,1
"diff --git a/.travis.yml b/.travis.yml
index d5b32858e2..bcbd5d7b9c 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,7 +1,7 @@
 language: java
 
 jdk:
-  - oraclejdk8
+  - openjdk8
 
 # Ensure Javadoc and source jar generation is exercised.
 install: mvn install javadoc:jar source:jar -DskipTests=true -B -V",Switch to OpenJDK,1
"diff --git a/pom.xml b/pom.xml
index 8ee0f4da2f..fb9f5dfbc8 100644
--- a/pom.xml
+++ b/pom.xml
@@ -118,6 +118,12 @@
         <groupId>org.apache.httpcomponents</groupId>
         <artifactId>httpmime</artifactId>
         <version>${httpcomponents.version}</version>
+        <exclusions>
+          <exclusion>
+            <groupId>commons-logging</groupId>
+            <artifactId>commons-logging</artifactId>
+          </exclusion>
+        </exclusions>
       </dependency>
       <dependency>
         <groupId>org.apache.httpcomponents</groupId>",Add commons-logging ignore to httpmime.,1
"diff --git a/.test-infra/jenkins/job_Inventory.groovy b/.test-infra/jenkins/job_Inventory.groovy
index 32e0645cfd..fec1ba24ce 100644
--- a/.test-infra/jenkins/job_Inventory.groovy
+++ b/.test-infra/jenkins/job_Inventory.groovy
@@ -35,7 +35,7 @@ nums.each {
     // Allows triggering this build against pull requests.
     commonJobProperties.enablePhraseTriggeringFromPullRequest(
       delegate,
-      'Machine Inventory',
+      ""Machine Inventory ${machine}"",
       ""Run Inventory ${machine}"")
 
     parameters {
@@ -66,6 +66,7 @@ nums.each {
       shell('virtualenv -p python3.7 test37 && . ./test37/bin/activate && python --version && deactivate || echo ""python 3.7 not found""')
       shell('echo ""Maven home $MAVEN_HOME""')
       shell('env')
+      shell('docker system prune --all --filter until=24h --force')
     }
   }
 }",Avoid defensive checks against java . time API .,0
"diff --git a/app/src/main/java/com/hippo/ehviewer/ui/scene/FavoritesScene.java b/app/src/main/java/com/hippo/ehviewer/ui/scene/FavoritesScene.java
index dd20f009..9e9f4d8d 100644
--- a/app/src/main/java/com/hippo/ehviewer/ui/scene/FavoritesScene.java
+++ b/app/src/main/java/com/hippo/ehviewer/ui/scene/FavoritesScene.java
@@ -29,6 +29,7 @@ import android.support.annotation.Nullable;
 import android.support.design.widget.FloatingActionButton;
 import android.support.v4.widget.DrawerLayout;
 import android.support.v7.app.AlertDialog;
+import android.support.v7.widget.DividerItemDecoration;
 import android.support.v7.widget.LinearLayoutManager;
 import android.support.v7.widget.RecyclerView;
 import android.support.v7.widget.Toolbar;
@@ -43,9 +44,6 @@ import android.view.LayoutInflater;
 import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.AdapterView;
-import android.widget.ArrayAdapter;
-import android.widget.ListView;
 import android.widget.TextView;
 
 import com.github.amlcurran.showcaseview.ShowcaseView;
@@ -55,7 +53,6 @@ import com.hippo.annotation.Implemented;
 import com.hippo.drawable.DrawerArrowDrawable;
 import com.hippo.easyrecyclerview.EasyRecyclerView;
 import com.hippo.easyrecyclerview.FastScroller;
-import com.hippo.easyrecyclerview.LinearDividerItemDecoration;
 import com.hippo.ehviewer.EhApplication;
 import com.hippo.ehviewer.EhDB;
 import com.hippo.ehviewer.R;
@@ -70,6 +67,7 @@ import com.hippo.ehviewer.ui.MainActivity;
 import com.hippo.ehviewer.ui.annotation.DrawerLifeCircle;
 import com.hippo.ehviewer.ui.annotation.ViewLifeCircle;
 import com.hippo.ehviewer.ui.annotation.WholeLifeCircle;
+import com.hippo.ehviewer.widget.EhDrawerLayout;
 import com.hippo.ehviewer.widget.SearchBar;
 import com.hippo.refreshlayout.RefreshLayout;
 import com.hippo.ripple.Ripple;
@@ -80,9 +78,7 @@ import com.hippo.util.DrawableManager;
 import com.hippo.widget.ContentLayout;
 import com.hippo.widget.FabLayout;
 import com.hippo.widget.SearchBarMover;
-import com.hippo.yorozuya.LayoutUtils;
 import com.hippo.yorozuya.ObjectUtils;
-import com.hippo.yorozuya.ResourcesUtils;
 import com.hippo.yorozuya.SimpleHandler;
 import com.hippo.yorozuya.ViewUtils;
 
@@ -96,7 +92,7 @@ import java.util.List;
 public class FavoritesScene extends BaseScene implements
         EasyRecyclerView.OnItemClickListener, EasyRecyclerView.OnItemLongClickListener,
         FastScroller.OnDragHandlerListener, SearchBarMover.Helper, SearchBar.Helper,
-        FabLayout.OnClickFabListener, EasyRecyclerView.CustomChoiceListener, AdapterView.OnItemClickListener {
+        FabLayout.OnClickFabListener, EasyRecyclerView.CustomChoiceListener {
 
     private static final long ANIMATE_TIME = 300L;
 
@@ -129,12 +125,11 @@ public class FavoritesScene extends BaseScene implements
     private DrawerArrowDrawable mLeftDrawable;
 
     @Nullable
-    @DrawerLifeCircle
-    private ArrayAdapter<String> mDrawerAdapter;
+    private EhDrawerLayout mDrawerLayout;
+
     @Nullable
     @DrawerLifeCircle
-    private List<String> mDrawerList;
-
+    private FavDrawerAdapter mDrawerAdapter;
     @Nullable
     @WholeLifeCircle
     private EhClient mClient;
@@ -143,13 +138,16 @@ public class FavoritesScene extends BaseScene implements
     private String[] mFavCatArray;
     @Nullable
     @WholeLifeCircle
+    private int[] mFavCountArray;
+    @Nullable
+    @WholeLifeCircle
     private FavListUrlBuilder mUrlBuilder;
 
     public int current; // -1 for error
     public int limit; // -1 for error
 
-    @Nullable
-    private int[] mFavCountArray;
+    private int mLocalSize = 0;
+    private int mCloudSize = 0;
 
     private boolean mHasFirstRefresh;
     private boolean mSearchMode;
@@ -206,7 +204,7 @@ public class FavoritesScene extends BaseScene implements
     }
 
     @Override
-    public void onSaveInstanceState(Bundle outState) {
+    public void onSaveInstanceState(@NonNull Bundle outState) {
         super.onSaveInstanceState(outState);
 
         boolean hasFirstRefresh;
@@ -236,6 +234,7 @@ public class FavoritesScene extends BaseScene implements
             @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
         View view = inflater.inflate(R.layout.scene_favorites, container, false);
         ContentLayout contentLayout = (ContentLayout) view.findViewById(R.id.content_layout);
+        mDrawerLayout = (EhDrawerLayout) ViewUtils.$$(getActivity2(), R.id.draw_view);
         mRecyclerView = contentLayout.getRecyclerView();
         FastScroller fastScroller = contentLayout.getFastScroller();
         RefreshLayout refreshLayout = contentLayout.getRefreshLayout();
@@ -410,95 +409,73 @@ public class FavoritesScene extends BaseScene implements
         mOldKeyword = null;
     }
 
-    private class InfoHolder extends RecyclerView.ViewHolder {
+    private class FavDrawerHolder extends RecyclerView.ViewHolder {
 
         private final TextView key;
         private final TextView value;
 
-        public InfoHolder(View itemView) {
+        private FavDrawerHolder(View itemView) {
             super(itemView);
             key = (TextView) ViewUtils.$$(itemView, R.id.key);
             value = (TextView) ViewUtils.$$(itemView, R.id.value);
         }
     }
 
-    private class InfoAdapter extends RecyclerView.Adapter<InfoHolder> {
-
-        private static final int TYPE_HEADER = 0;
-        private static final int TYPE_DATA = 1;
+    private class FavDrawerAdapter extends RecyclerView.Adapter<FavDrawerHolder> {
 
         private final LayoutInflater mInflater;
 
-        public InfoAdapter(LayoutInflater inflater) {
+        private FavDrawerAdapter(LayoutInflater inflater) {
             mInflater = inflater;
         }
 
         @Override
         public int getItemViewType(int position) {
-            return 0 == position ? TYPE_HEADER : TYPE_DATA;
+            return position;
         }
 
+        @NonNull
         @Override
-        public InfoHolder onCreateViewHolder(ViewGroup parent, int viewType) {
-            return new InfoHolder(mInflater.inflate(TYPE_HEADER == viewType ?
-                    R.layout.item_favorite_info_header : R.layout.item_favorite_info_data, parent, false));
+        public FavDrawerHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
+            return new FavDrawerHolder(mInflater.inflate(R.layout.item_favorite_list, parent, false));
         }
 
         @Override
         @SuppressLint(""SetTextI18n"")
-        public void onBindViewHolder(InfoHolder holder, int position) {
+        public void onBindViewHolder(@NonNull FavDrawerHolder holder, int position) {
             if (0 == position) {
-                holder.key.setText(R.string.collections);
-                holder.value.setText(R.string.count);
-                holder.itemView.setEnabled(false);
+                holder.key.setText(R.string.local_favorites);
+                holder.value.setText(Integer.toString(mLocalSize));
+                holder.itemView.setEnabled(true);
+            } else if (1 == position){
+                holder.key.setText(R.string.cloud_favorites);
+                holder.value.setText(Integer.toString(mCloudSize));
+                holder.itemView.setEnabled(true);
             } else {
                 if (null == mFavCatArray || null == mFavCountArray ||
-                        mFavCatArray.length < position || mFavCountArray.length < position) {
+                        mFavCatArray.length < (position - 1) ||
+                        mFavCountArray.length < (position - 1)) {
                     return;
                 }
-                holder.key.setText(mFavCatArray[position - 1]);
-                holder.value.setText(Integer.toString(mFavCountArray[position - 1]));
+                holder.key.setText(mFavCatArray[position - 2]);
+                holder.value.setText(Integer.toString(mFavCountArray[position - 2]));
                 holder.itemView.setEnabled(true);
             }
         }
 
         @Override
         public int getItemCount() {
-            return 11;
+            return 12;
         }
     }
 
-    @SuppressLint(""InflateParams"")
-    private void showFavoritesInfoDialog() {
-        Context context = getContext2();
-        if (null == context || null == mFavCatArray || null == mFavCountArray) {
-            return;
-        }
-
-        AlertDialog.Builder builder = new AlertDialog.Builder(context);
-        context = builder.getContext();
-        final LayoutInflater inflater = LayoutInflater.from(context);
-        EasyRecyclerView rv = (EasyRecyclerView) inflater.inflate(R.layout.dialog_recycler_view, null);
-        rv.setAdapter(new InfoAdapter(inflater));
-        rv.setLayoutManager(new LinearLayoutManager(context));
-        LinearDividerItemDecoration decoration = new LinearDividerItemDecoration(
-                LinearDividerItemDecoration.VERTICAL, context.getResources().getColor(R.color.divider),
-                LayoutUtils.dp2pix(context, 1));
-        decoration.setPadding(ResourcesUtils.getAttrDimensionPixelOffset(context, R.attr.dialogPreferredPadding));
-        rv.addItemDecoration(decoration);
-        rv.setSelector(Ripple.generateRippleDrawable(context, false));
-        rv.setClipToPadding(false);
-        builder.setView(rv).show();
-    }
-
     @Override
     public View onCreateDrawerView(LayoutInflater inflater,
             @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
-        View view = inflater.inflate(R.layout.drawer_list, container, false);
+        View view = inflater.inflate(R.layout.drawer_list_fav, container, false);
+        final Context context = getContext2();
         Toolbar toolbar = (Toolbar) ViewUtils.$$(view, R.id.toolbar);
-        ListView listView = (ListView) view.findViewById(R.id.list_view);
 
-        final Context context = getContext2();
         Assert.assertNotNull(context);
 
         toolbar.setTitle(R.string.collections);
@@ -508,9 +485,6 @@ public class FavoritesScene extends BaseScene implements
             public boolean onMenuItemClick(MenuItem item) {
                 int id = item.getItemId();
                 switch (id) {
-                    case R.id.action_info:
-                        showFavoritesInfoDialog();
-                        return true;
                     case R.id.action_default_favorites_slot:
                         String[] items = new String[12];
                         items[0] = getString(R.string.let_me_select);
@@ -531,15 +505,13 @@ public class FavoritesScene extends BaseScene implements
             }
         });
 
-        mDrawerList = new ArrayList<>(12);
-        mDrawerList.add(getString(R.string.local_favorites));
-        mDrawerList.add(getString(R.string.cloud_favorites));
-        if (mFavCatArray != null) {
-            Collections.addAll(mDrawerList, mFavCatArray);
-        }
-        mDrawerAdapter = new ArrayAdapter<>(context, R.layout.item_simple_list, mDrawerList);
-        listView.setAdapter(mDrawerAdapter);
-        listView.setOnItemClickListener(this);
+        EasyRecyclerView recyclerView = (EasyRecyclerView) view.findViewById(R.id.recycler_view_drawer);
+        recyclerView.setLayoutManager(new LinearLayoutManager(context));
+        recyclerView.addItemDecoration(new DividerItemDecoration(context, DividerItemDecoration.VERTICAL));
+
+        mDrawerAdapter = new FavDrawerAdapter(inflater);
+        recyclerView.setAdapter(mDrawerAdapter);
+        recyclerView.setOnItemClickListener(this);
 
         return view;
     }
@@ -549,7 +521,6 @@ public class FavoritesScene extends BaseScene implements
         super.onDestroyDrawerView();
 
         mDrawerAdapter = null;
-        mDrawerList = null;
     }
 
     @Override
@@ -590,19 +561,53 @@ public class FavoritesScene extends BaseScene implements
     @Override
     @Implemented(EasyRecyclerView.OnItemClickListener.class)
     public boolean onItemClick(EasyRecyclerView parent, View view, int position, long id) {
-        if (mRecyclerView != null && mRecyclerView.isInCustomChoice()) {
-            mRecyclerView.toggleItemChecked(position);
-        } else if (mHelper != null) {
-            GalleryInfo gi = mHelper.getDataAt(position);
-            Bundle args = new Bundle();
-            args.putString(GalleryDetailScene.KEY_ACTION, GalleryDetailScene.ACTION_GALLERY_INFO);
-            args.putParcelable(GalleryDetailScene.KEY_GALLERY_INFO, gi);
-            Announcer announcer = new Announcer(GalleryDetailScene.class).setArgs(args);
-            View thumb;
-            if (ApiHelper.SUPPORT_TRANSITION && null != (thumb = view.findViewById(R.id.thumb))) {
-                announcer.setTranHelper(new EnterGalleryDetailTransaction(thumb));
+        if (mDrawerLayout != null && mDrawerLayout.isDrawerOpen(Gravity.RIGHT)){
+            // Skip if in search mode
+            if (mRecyclerView != null && mRecyclerView.isInCustomChoice()) {
+                return true;
+            }
+
+            if (mUrlBuilder == null || mHelper == null) {
+                return true;
+            }
+
+            // Local favorite position is 0, All favorite position is 1, so position - 2 is OK
+            int newFavCat = position - 2;
+
+            // Check is the same
+            if (mUrlBuilder.getFavCat() == newFavCat) {
+                return true;
+            }
+
+            // Ensure outOfCustomChoiceMode to avoid error
+            if (mRecyclerView != null) {
+                mRecyclerView.isInCustomChoice();
+            }
+
+            exitSearchMode(true);
+
+            mUrlBuilder.setKeyword(null);
+            mUrlBuilder.setFavCat(newFavCat);
+            updateSearchBar();
+            mHelper.refresh();
+
+            closeDrawer(Gravity.RIGHT);
+
+        } else {
+            if (mRecyclerView != null && mRecyclerView.isInCustomChoice()) {
+                mRecyclerView.toggleItemChecked(position);
+            } else if (mHelper != null) {
+                GalleryInfo gi = mHelper.getDataAt(position);
+                Bundle args = new Bundle();
+                args.putString(GalleryDetailScene.KEY_ACTION, GalleryDetailScene.ACTION_GALLERY_INFO);
+                args.putParcelable(GalleryDetailScene.KEY_GALLERY_INFO, gi);
+                Announcer announcer = new Announcer(GalleryDetailScene.class).setArgs(args);
+                View thumb;
+                if (ApiHelper.SUPPORT_TRANSITION && null != (thumb = view.findViewById(R.id.thumb))) {
+                    announcer.setTranHelper(new EnterGalleryDetailTransaction(thumb));
+                }
+                startScene(announcer);
             }
-            startScene(announcer);
         }
         return true;
     }
@@ -805,41 +810,6 @@ public class FavoritesScene extends BaseScene implements
         }
     }
 
-    @Override
-    @Implemented(AdapterView.OnItemClickListener.class)
-    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-        // Skip if in search mode
-        if (mRecyclerView != null && mRecyclerView.isInCustomChoice()) {
-            return;
-        }
-
-        if (mUrlBuilder == null || mHelper == null) {
-            return;
-        }
-
-        // Local favorite position is 0, All favorite position is 1, so position - 2 is OK
-        int newFavCat = position - 2;
-
-        // Check is the same
-        if (mUrlBuilder.getFavCat() == newFavCat) {
-            return;
-        }
-
-        // Ensure outOfCustomChoiceMode to avoid error
-        if (mRecyclerView != null) {
-            mRecyclerView.isInCustomChoice();
-        }
-
-        exitSearchMode(true);
-
-        mUrlBuilder.setKeyword(null);
-        mUrlBuilder.setFavCat(newFavCat);
-        updateSearchBar();
-        mHelper.refresh();
-
-        closeDrawer(Gravity.RIGHT);
-    }
-
     private void enterSearchMode(boolean animation) {
         if (mSearchMode ||mSearchBar == null || mSearchBarMover == null || mLeftDrawable == null) {
             return;
@@ -864,11 +834,9 @@ public class FavoritesScene extends BaseScene implements
         if (mHelper != null && mSearchBarMover != null &&
                 mHelper.isCurrentTask(taskId)) {
 
-            if (mFavCatArray != null && mDrawerList != null) {
-                for (int i = 0; i < 10; i++) {
-                    mFavCatArray[i] = result.catArray[i];
-                    mDrawerList.set(i + 2, result.catArray[i]);
-                }
+            if (mFavCatArray != null) {
+
+                System.arraycopy(result.catArray, 0, mFavCatArray, 0,10);
 
                 if (mDrawerAdapter != null) {
                     mDrawerAdapter.notifyDataSetChanged();
@@ -876,6 +844,12 @@ public class FavoritesScene extends BaseScene implements
             }
 
             mFavCountArray = result.countArray;
+            if (mFavCountArray != null){
+                mCloudSize = 0;
+                for (int i = 0; i < 10; i++ ){
+                    mCloudSize = mCloudSize + mFavCountArray[i];
+                }
+            }
 
             updateSearchBar();
             mHelper.setPages(taskId, result.pages);
@@ -903,6 +877,7 @@ public class FavoritesScene extends BaseScene implements
                 mHelper.setPages(taskId, 0);
                 mHelper.onGetPageData(taskId, Collections.EMPTY_LIST);
             } else {
+                mLocalSize = list.size();
                 mHelper.setPages(taskId, 1);
                 mHelper.onGetPageData(taskId, list);
             }
diff --git a/app/src/main/java/com/hippo/ehviewer/ui/scene/GalleryCommentsScene.java b/app/src/main/java/com/hippo/ehviewer/ui/scene/GalleryCommentsScene.java
index cea1072b..a784a2ae 100644
--- a/app/src/main/java/com/hippo/ehviewer/ui/scene/GalleryCommentsScene.java
+++ b/app/src/main/java/com/hippo/ehviewer/ui/scene/GalleryCommentsScene.java
@@ -322,7 +322,7 @@ public final class GalleryCommentsScene extends ToolbarScene
         rv.setAdapter(new RecyclerView.Adapter<InfoHolder>() {
             @Override
             public InfoHolder onCreateViewHolder(ViewGroup parent, int viewType) {
-                return new InfoHolder(inflater.inflate(R.layout.item_favorite_info_data, parent, false));
+                return new InfoHolder(inflater.inflate(R.layout.item_favorite_list, parent, false));
             }
 
             @Override
diff --git a/app/src/main/res/layout-v21/drawer_list_fav.xml b/app/src/main/res/layout-v21/drawer_list_fav.xml
new file mode 100644
index 00000000..7e01e8b4
--- /dev/null
+++ b/app/src/main/res/layout-v21/drawer_list_fav.xml
@@ -0,0 +1,51 @@
+<?xml version=""1.0"" encoding=""utf-8""?>
+<!--
+  ~ Copyright 2016 Hippo Seven
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<LinearLayout
+    xmlns:android=""http://schemas.android.com/apk/res/android""
+    android:layout_width=""match_parent""
+    android:layout_height=""match_parent""
+    android:orientation=""vertical"">
+
+    <android.support.v7.widget.Toolbar
+        android:id=""@+id/toolbar""
+        android:layout_height=""?attr/actionBarSize""
+        android:layout_width=""match_parent""
+        android:background=""?attr/colorPrimary""
+        android:theme=""@style/ThemeOverlay.AppCompat.Dark.ActionBar""
+        android:elevation=""8dp""
+        android:saveEnabled=""false""/>
+
+    <FrameLayout
+        android:layout_width=""match_parent""
+        android:layout_height=""0dp""
+        android:layout_weight=""1"">
+
+        <TextView
+            android:id=""@+id/tip""
+            android:layout_width=""wrap_content""
+            android:layout_height=""wrap_content""
+            android:layout_gravity=""center""
+            android:visibility=""gone""/>
+
+",Added support for backup and HA for Windows by adding a separate file locking method and made DirectMappedLogBuffer HA friendly,0
"diff --git a/src/org/junit/internal/runners/TestMethod.java b/src/org/junit/internal/runners/TestMethod.java
index 292250ababc4..5af7fa966a13 100644
--- a/src/org/junit/internal/runners/TestMethod.java
+++ b/src/org/junit/internal/runners/TestMethod.java
@@ -67,7 +67,12 @@ protected List<Method> getAfters() {
 
 	protected void invoke(Roadie context) throws IllegalArgumentException,
 			IllegalAccessException, InvocationTargetException {
-		fMethod.invoke(context.getTarget());
+		invoke(context.getTarget());
+	}
+
+	protected void invoke(Object target) throws IllegalAccessException,
+			InvocationTargetException {
+		fMethod.invoke(target);
 	}
 
 	protected void runTestUnprotected(final Roadie context) {","Leave this method in--it's used by the JMock custom runner, and possibly others",0
"diff --git a/src/site/fml/faq.fml b/src/site/fml/faq.fml
index e6be520607b7..4c7ac39d3bf4 100644
--- a/src/site/fml/faq.fml
+++ b/src/site/fml/faq.fml
@@ -720,11 +720,13 @@ public void testIndexOutOfBoundsExceptionNotRaised()
       For details on how to use it,
       read <a
       href=""http://www.onjava.com/pub/a/onjava/2003/11/12/reflection.html"">this
-      article</a>.<br>
-	  If you are using JDK 1.6 or higher and you annotate your tests with @Test,
-	  you can use <a href=""http://dp4j.com"">Dp4j</a> to inject reflection in your
-	  test methods. For details on how to use it, see <a 
-	  href=""http://dp4j.com/testscript"">this test script</a>.
+      article</a>.
+    </p>
+    <p>
+      If you are using JDK 1.6 or higher and you annotate your tests with @Test,
+      you can use <a href=""http://dp4j.com"">Dp4j</a> to inject reflection in your
+      test methods. For details on how to use it, see <a href=""http://dp4j.com/testscript"">
+      this test script</a>.
     </p></answer></faq>
       <faq id=""#tests_12""><question>Why does JUnit only report the first
       failure in a single test?</question><answer><p>","Replaced <br> with </p><p> in faq.html <enter>  <enter> @dsaff @kcooney, I have replaced the <br> tag with the <p> tags. It should be fine now. <enter> Thank you @kcooney for spotting the issue :)",1
"diff --git a/build.xml b/build.xml
index e836f492df49..357dfc660763 100644
--- a/build.xml
+++ b/build.xml
@@ -11,7 +11,8 @@
 	<property name=""jarfile"" value=""junit-${version}.jar"" />
 	<property name=""javadocdir"" value=""${dist}/javadoc"" />
 	<property name=""javadoczip"" value=""${dist}-javadoc.zip"" />
-
+	<property name=""javadocpackages"" value=""org.junit, org.junit.runner, org.junit.runner.description, org.junit.runner.manipulation, org.junit.runner.notification, org.junit.runners"" />
+	
 	<target name=""init"">
 		<tstamp/>
 	</target>
@@ -65,7 +66,7 @@
 		</antcall>
 
 		<antcall target=""javadoc"" />
-			
+
 		<copy todir=""${dist}/doc"">
 			<fileset dir=""doc""/>
 		</copy>
@@ -89,10 +90,10 @@
 		<zip basedir=""${javadocdir}"" file=""${javadoczip}"" />
 	</target>
 
-	<target name=""javadoc"">	
+	<target name=""javadoc"">
 		<mkdir dir=""${javadocdir}"" />
 		<javadoc sourcepath=""${src}""
-		         packagenames=""org.junit, org.junit.runner, org.junit.runner.description, org.junit.runner.manipulation, org.junit.runner.notification, org.junit.runners""
+		         packagenames=""${javadocpackages}""
 		         destdir=""${javadocdir}""
 		         author=""false""
 		         version=""false""
@@ -115,4 +116,15 @@
 
 		<delete file=""${javadoczip}"" />
 	</target>
+
+	<target name=""upload.to.sourceforge"">
+		<ftp server=""upload.sourceforge.net""
+		     userid=""anonymous""
+		     password=""saff@mit.edu""
+		     remotedir=""incoming""
+		>
+			<fileset dir=""${dist}"" includes=""*.jar"" />
+			<fileset file=""${zipfile}"" />
+		</ftp>
+	</target>
 </project>
diff --git a/experimental-use-of-antunit/build.xml b/build/experimental-use-of-antunit/build.xml
similarity index 99%
rename from experimental-use-of-antunit/build.xml
rename to build/experimental-use-of-antunit/build.xml
index d45a822116a1..d62c1f2b5a62 100644
--- a/experimental-use-of-antunit/build.xml
+++ b/build/experimental-use-of-antunit/build.xml
@@ -3,12 +3,14 @@
 	         resource=""org/apache/ant/antunit/antlib.xml""
 	         classpath=""lib/ant-antunit-1.0.jar""
 	/>
+
 	<target name=""fast"">
 		<au:antunit>
 			<fileset dir=""."" includes=""touch.ant,junit.ant"" />
 			<au:plainlistener />
 		</au:antunit>
 	</target>
+
 	<target name=""all"">
 		<au:antunit>
 			<fileset dir=""."" includes=""touch.ant,junit.ant,junit-slow.ant"" />
diff --git a/experimental-use-of-antunit/junit-slow.ant b/build/experimental-use-of-antunit/junit-slow.ant
similarity index 84%
rename from experimental-use-of-antunit/junit-slow.ant
rename to build/experimental-use-of-antunit/junit-slow.ant
index 0537dff5a927..c0dea7c65e6e 100644
--- a/experimental-use-of-antunit/junit-slow.ant
+++ b/build/experimental-use-of-antunit/junit-slow.ant
@@ -1,7 +1,5 @@
 <project xmlns:au=""antlib:org.apache.ant.antunit"">
-	<property name=""junitdir"" value="".."" />
-	<property name=""antdist"" value=""temp-dist-directory-for-ant-unit""></property>
-	<property name=""antdistdir"" value=""${junitdir}/${antdist}""/>
+	<property file=""junit.properties"" />
 
 	<!-- is called prior to the test -->
 	<target name=""setUp"">
diff --git a/build/experimental-use-of-antunit/junit.ant b/build/experimental-use-of-antunit/junit.ant
new file mode 100644
index 000000000000..a263b8d1a068
--- /dev/null
+++ b/build/experimental-use-of-antunit/junit.ant
@@ -0,0 +1,107 @@
+<project xmlns:au=""antlib:org.apache.ant.antunit"">
+	<property file=""junit.properties"" />
+
+	<!-- is called prior to the test -->
+	<target name=""setUp"">
+	</target>
+
+	<!-- is called after the test, even if that caused an error -->
+	<target name=""tearDown"">
+		<delete dir=""${antdistdir}"" />
+		<delete dir=""${tempdir}"" />
+		<delete file=""${exttestjavadoczip}"" />
+	</target>
+
+	<macrodef name=""junitbuild"">
+		<attribute name=""target"" />
+		<sequential>
+			<ant antfile=""build.xml"" target=""@{target}"" dir=""${junitdir}"">
+				<property name=""dist"" value=""${antdist}"" />
+				<property name=""javadocdir""
+				          value=""${antdist}/ant-unit-java-docs""
+				/>
+				<property name=""javadoczip"" value=""${testjavadoczip}"" />
+				<property name=""javadocpackages"" value=""org.junit"" />
+			</ant>
+		</sequential>
+	</macrodef>
+
+	<macrodef name=""sizeOfDir"">
+		<attribute name=""property.name"" />
+		<sequential>
+			<length property=""@{property.name}"">
+				<fileset dir=""."" includes=""**/*"" />
+			</length>
+		</sequential>
+	</macrodef>
+
+	<macrodef name=""dirSizeChanges"">
+		<attribute name=""property.name"" />
+		<element implicit=""yes"" name=""operation"" />
+
+		<sequential>
+			<sizeOfDir property.name=""oldlength"" />
+			<operation />
+			<sizeOfDir property.name=""newlength"" />
+			<condition property=""@{property.name}"">
+				<not>
+					<equals arg1=""${oldlength}"" arg2=""${newlength}"" />
+				</not>
+			</condition>
+		</sequential>
+	</macrodef>
+
+	<target name=""testTearDown"">
+		<mkdir dir=""${antdistdir}"" />
+		<mkdir dir=""${tempdir}"" />
+		<touch file=""${exttestjavadoczip}"" />
+
+		<antcall target=""tearDown"" />
+
+		<au:assertFileDoesntExist file=""${antdistdir}"" />
+		<au:assertFileDoesntExist file=""${tempdir}"" />
+		<au:assertFileDoesntExist file=""${exttestjavadoczip}"" />
+	</target>
+
+	<target name=""testCharacterize_JavadocGeneratesJavadoc"">
+		<junitbuild target=""javadoc"" />
+		<au:assertFileExists file=""${antdistdir}/ant-unit-java-docs"" />
+	</target>
+
+	<target name=""testJavaDocZip"">
+		<junitbuild target=""javadoczip"" />
+		<au:assertFileExists file=""${exttestjavadoczip}"" />
+
+		<antcall target=""unzip.exttestjavadoczip"" />
+		<au:assertFileExists file=""${tempdir}/org"" />
+	</target>
+
+	<target name=""testUnzipOnlyCreatesDirectoryCleanedByTeardown"">
+		<dirSizeChanges property.name=""changed"">
+			<junitbuild target=""javadoczip"" />
+			<antcall target=""unzip.exttestjavadoczip"" />
+			<antcall target=""tearDown"" />
+		</dirSizeChanges>
+		<au:assertFalse>
+			<isset property=""changed"" />
+		</au:assertFalse>
+	</target>
+
+	<target name=""testCharacterize_DirSizeChanges"">
+		<dirSizeChanges property.name=""changed"">
+			<mkdir dir=""${tempdir}"" />
+			<echo message=""h"" file=""${tempdir}/whatever.txt"" />
+		</dirSizeChanges>
+		<au:assertPropertySet name=""changed"" />
+	</target>
+
+	<target name=""unzip.exttestjavadoczip"">
+		<unzip dest=""${tempdir}"" src=""${exttestjavadoczip}"" />
+	</target>
+
+	<target name=""testJavaDocZipDeletedOnClean"">
+		<touch file=""${exttestjavadoczip}"" />
+		<junitbuild target=""clean"" />
+		<au:assertFileDoesntExist file=""${exttestjavadoczip}"" />
+	</target>
+</project>
\ No newline at end of file
diff --git a/build/experimental-use-of-antunit/junit.properties b/build/experimental-use-of-antunit/junit.properties
new file mode 100644
index 000000000000..afc3af4076d6
--- /dev/null
+++ b/build/experimental-use-of-antunit/junit.properties
@@ -0,0 +1,6 @@
+junitdir=../..
+antdist=temp-dist-directory-for-ant-unit
+antdistdir=${junitdir}/${antdist}
+testjavadoczip=new-england-javadoc.zip
+exttestjavadoczip=${junitdir}/${testjavadoczip}
+tempdir=tempdir
\ No newline at end of file
diff --git a/experimental-use-of-antunit/lib/ant-antunit-1.0.jar b/build/experimental-use-of-antunit/lib/ant-antunit-1.0.jar
similarity index 100%
rename from experimental-use-of-antunit/lib/ant-antunit-1.0.jar
rename to build/experimental-use-of-antunit/lib/ant-antunit-1.0.jar
diff --git a/experimental-use-of-antunit/touch.ant b/build/experimental-use-of-antunit/touch.ant
similarity index 100%
rename from experimental-use-of-antunit/touch.ant
rename to build/experimental-use-of-antunit/touch.ant
diff --git a/build/junit build.xml.launch b/build/junit build.xml.launch
new file mode 100644
index 000000000000..166e2e6338ba
--- /dev/null
+++ b/build/junit build.xml.launch	
@@ -0,0 +1,27 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<launchConfiguration type=""org.eclipse.ant.AntLaunchConfigurationType"">
+<stringAttribute key=""process_factory_id"" value=""org.eclipse.ant.ui.remoteAntProcessFactory""/>
+<booleanAttribute key=""org.eclipse.ant.ui.DEFAULT_VM_INSTALL"" value=""true""/>
+<booleanAttribute key=""org.eclipse.jdt.launching.DEFAULT_CLASSPATH"" value=""false""/>
+<stringAttribute key=""org.eclipse.jdt.launching.MAIN_TYPE"" value=""org.eclipse.ant.internal.ui.antsupport.InternalAntRunner""/>
+<listAttribute key=""org.eclipse.debug.core.MAPPED_RESOURCE_TYPES"">
+<listEntry value=""1""/>
+</listAttribute>
+<stringAttribute key=""org.eclipse.jdt.launching.JRE_CONTAINER"" value=""org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/jdk1.5.0_04""/>
+<booleanAttribute key=""org.eclipse.debug.core.appendEnvironmentVariables"" value=""true""/>
+<stringAttribute key=""org.eclipse.jdt.launching.CLASSPATH_PROVIDER"" value=""org.eclipse.ant.ui.AntClasspathProvider""/>
+<stringAttribute key=""org.eclipse.ui.externaltools.ATTR_ANT_TARGETS"" value=""upload.to.sourceforge,""/>
+<stringAttribute key=""org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER"" value=""org.eclipse.ant.ui.AntClasspathProvider""/>
+<listAttribute key=""org.eclipse.jdt.launching.CLASSPATH"">
+<listEntry value=""&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/jdk1.5.0_04&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#13;&#10;""/>
+<listEntry value=""&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#13;&#10;&lt;memento antHome=&quot;C:/bin/apache-ant-1.7.0&quot;/&gt;&#13;&#10;&lt;/runtimeClasspathEntry&gt;&#13;&#10;""/>
+<listEntry value=""&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;/junit-head/build/lib/commons-net-1.4.1.jar&quot; path=&quot;3&quot; type=&quot;2&quot;/&gt;&#13;&#10;""/>
+<listEntry value=""&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;/junit-head/build/lib/jakarta-oro-2.0.8.jar&quot; path=&quot;3&quot; type=&quot;2&quot;/&gt;&#13;&#10;""/>
+<listEntry value=""&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#13;&#10;&lt;memento/&gt;&#13;&#10;&lt;/runtimeClasspathEntry&gt;&#13;&#10;""/>
+</listAttribute>
+<stringAttribute key=""org.eclipse.jdt.launching.PROJECT_ATTR"" value=""junit-head""/>
+<listAttribute key=""org.eclipse.debug.core.MAPPED_RESOURCE_PATHS"">
+<listEntry value=""/junit-head/build.xml""/>
+</listAttribute>
+<stringAttribute key=""org.eclipse.ui.externaltools.ATTR_LOCATION"" value=""${workspace_loc:/junit-head/build.xml}""/>
+</launchConfiguration>
diff --git a/build/lib/commons-net-1.4.1.jar b/build/lib/commons-net-1.4.1.jar
new file mode 100644
index 000000000000..9666a92c8009
Binary files /dev/null and b/build/lib/commons-net-1.4.1.jar differ
diff --git a/build/lib/jakarta-oro-2.0.8.jar b/build/lib/jakarta-oro-2.0.8.jar
new file mode 100644
index 000000000000..23488d2600f5
Binary files /dev/null and b/build/lib/jakarta-oro-2.0.8.jar differ
diff --git a/experimental-use-of-antunit/junit.ant b/experimental-use-of-antunit/junit.ant
deleted file mode 100644
index eba44eb9a78e..000000000000
--- a/experimental-use-of-antunit/junit.ant
+++ /dev/null
@@ -1,64 +0,0 @@
-<project xmlns:au=""antlib:org.apache.ant.antunit"">
-	<property name=""junitdir"" value="".."" />
-	<property name=""antdist"" value=""temp-dist-directory-for-ant-unit"">
-	</property>
-	<property name=""antdistdir"" value=""${junitdir}/${antdist}"" />
-	<property name=""testjavadoczip"" value=""new-england-javadoc.zip"" />
-	<property name=""exttestjavadoczip"" value=""${junitdir}/${testjavadoczip}"" />
-	<property name=""tempdir"" value=""tempdir"" />
-	
-	<!-- is called prior to the test -->
-	<target name=""setUp"">
-	</target>
-
-	<!-- is called after the test, even if that caused an error -->
-	<target name=""tearDown"">
-		<delete dir=""${antdistdir}"" />
-		<delete dir=""${tempdir}"" />
-		<delete file=""${exttestjavadoczip}"" />
-	</target>
-
-	<macrodef name=""junitbuild"">
-		<attribute name=""target"" />
-		<sequential>
-			<ant antfile=""build.xml"" target=""@{target}"" dir=""${junitdir}"">
-				<property name=""dist"" value=""${antdist}"" />
-				<property name=""javadocdir""
-				          value=""${antdist}/ant-unit-java-docs""
-				/>
-				<property name=""javadoczip"" value=""${testjavadoczip}"" />
-			</ant>
-		</sequential>
-	</macrodef>
-
-	<target name=""testTearDown"">
-		<mkdir dir=""${antdistdir}"" />
-		<mkdir dir=""${tempdir}"" />
-		<touch file=""${exttestjavadoczip}"" />
-		
-		<antcall target=""tearDown"" />
-		
-		<au:assertFileDoesntExist file=""${antdistdir}"" />
-		<au:assertFileDoesntExist file=""${tempdir}"" />
-		<au:assertFileDoesntExist file=""${exttestjavadoczip}"" />
-	</target>
-
-	<target name=""testCharacterize_PopulateDistGeneratesJavadoc"">
-		<junitbuild target=""populate-dist"" />
-		<au:assertFileExists file=""${antdistdir}/ant-unit-java-docs"" />
-	</target>
-
-	<target name=""testJavaDocZip"">
-		<junitbuild target=""javadoczip"" />
-		<au:assertFileExists file=""${exttestjavadoczip}"" />
-
-		<unzip dest=""tempjavadoc"" src=""${exttestjavadoczip}"" />
-		<au:assertFileExists file=""tempjavadoc/org"" />
-	</target>
-
-	<target name=""testJavaDocZipDeletedOnClean"">
-		<touch file=""${exttestjavadoczip}"" />
-		<junitbuild target=""clean"" />
-		<au:assertFileDoesntExist file=""${exttestjavadoczip}"" />
-	</target>
-</project>
\ No newline at end of file
diff --git a/src/junit/runner/Version.java b/src/junit/runner/Version.java
index 0b703d97292c..0de92d786dbf 100644
--- a/src/junit/runner/Version.java
+++ b/src/junit/runner/Version.java
@@ -9,7 +9,7 @@ private Version() {
 	}
 
 	public static String id() {
-		return ""4.2"";
+		return ""4.3"";
 	}
 	
 	public static void main(String[] args) {","Created a separate build directory for new build scripts, including FTP upload",1
"diff --git a/doc/ReleaseNotes4.12.md b/doc/ReleaseNotes4.12.md
index 025a9496f55e..edcd375ea02e 100644
--- a/doc/ReleaseNotes4.12.md
+++ b/doc/ReleaseNotes4.12.md
@@ -17,6 +17,21 @@ Version 4.11 added `Assert.assertEquals()` for `float` parameters with a delta,
 In the usual case, where the array elements are in fact exactly equal, the potentially expensive reflection-based loop to compare them is avoided by using `Arrays.deepEquals()` first. The exact comparison is only executed when `deepEquals()` returns `false`.
 
 
+# Command-line options
+### [Pull request #647:](https://github.com/junit-team/junit/pull/647) Support command-line `--filter` param.
+
+When running JUnit from the command line, a command-line parameter can be supplied using `--filter`, which supplies a filter that will restrict which tests and subtests from the rest of the command will be run.  For example, this will run only the tests in ExampleTestSuite that are in categories Cat1 or Cat2:
+
+```
+java org.junit.runner.JUnitCore \
+  --filter=org.junit.experimental.categories.IncludeCategories=pkg.of.Cat1,pkg.of.Cat2 \
+  com.example.ExampleTestSuite
+```
+
+In general, the argument to `--filter` should be `ClassName=param`, where `ClassName` names an implementation of `FilterFactory`, whose `createFilter` method will be called with an instance of `FilterFactoryParams` that contains `""param""`, in order to return the filter to be applied.
+
+FilterFactory
+
 # Test Runners",Add info on --filter option,1
"diff --git a/src/java/org/jivesoftware/messenger/net/SocketConnection.java b/src/java/org/jivesoftware/messenger/net/SocketConnection.java
index b47b4144a..0001ae92a 100644
--- a/src/java/org/jivesoftware/messenger/net/SocketConnection.java
+++ b/src/java/org/jivesoftware/messenger/net/SocketConnection.java
@@ -88,6 +88,8 @@ public class SocketConnection implements Connection {
         }
         try {
             synchronized (writer) {
+                // Register that we started sending data on the connection
+                SocketSendingTracker.getInstance().socketStartedSending(socket);
                 writer.write("" "");
                 writer.flush();
             }
@@ -96,6 +98,10 @@ public class SocketConnection implements Connection {
             Log.warn(""Closing no longer valid connection"" + ""\n"" + this.toString(), e);
             close();
         }
+        finally {
+            // Register that we finished sending data on the connection
+            SocketSendingTracker.getInstance().socketFinishedSending(socket);
+        }
         return !isClosed();
     }
 
@@ -197,6 +203,8 @@ public class SocketConnection implements Connection {
                     }
                     synchronized (writer) {
                         try {
+                            // Register that we started sending data on the connection
+                            SocketSendingTracker.getInstance().socketStartedSending(socket);
                             writer.write(""</stream:stream>"");
                             if (flashClient) {
                                 writer.write('\0');
@@ -204,6 +212,10 @@ public class SocketConnection implements Connection {
                             xmlSerializer.flush();
                         }
                         catch (IOException e) {}
+                        finally {
+                            // Register that we finished sending data on the connection
+                            SocketSendingTracker.getInstance().socketFinishedSending(socket);
+                        }
                     }
                 }
                 catch (Exception e) {
@@ -236,6 +248,8 @@ public class SocketConnection implements Connection {",Added tag jdk8u202 - b26 for changeset d290c0f083ab,0
"diff --git a/pom.xml b/pom.xml
index 42825c7530..1f039d2c49 100644
--- a/pom.xml
+++ b/pom.xml
@@ -51,6 +51,7 @@
     <android.platform>16</android.platform>
     <gson.version>2.2.4</gson.version>
     <okhttp.version>1.2.1</okhttp.version>
+    <rxjava.version>0.14.9</rxjava.version>
 
     <!-- Converter Dependencies -->
     <protobuf.version>2.5.0</protobuf.version>
@@ -105,6 +106,11 @@
         <artifactId>gson</artifactId>
         <version>${gson.version}</version>
       </dependency>
+      <dependency>
+        <groupId>com.netflix.rxjava</groupId>
+        <artifactId>rxjava-core</artifactId>
+        <version>${rxjava.version}</version>
+      </dependency>
 
       <dependency>
         <groupId>com.google.protobuf</groupId>
diff --git a/retrofit-mock/pom.xml b/retrofit-mock/pom.xml
index 0fe50a017c..739d9ee7ee 100644
--- a/retrofit-mock/pom.xml
+++ b/retrofit-mock/pom.xml
@@ -26,6 +26,12 @@
       <optional>true</optional>
     </dependency>
 
+    <dependency>
+      <groupId>com.netflix.rxjava</groupId>
+      <artifactId>rxjava-core</artifactId>
+      <optional>true</optional>
+    </dependency>
+
     <dependency>
       <groupId>junit</groupId>
       <artifactId>junit</artifactId>
diff --git a/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java
index dcd256192d..fe0ceb4c5d 100644
--- a/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java
+++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java
@@ -11,6 +11,10 @@
 import java.util.concurrent.TimeUnit;
 import retrofit.client.Request;
 import retrofit.client.Response;
+import rx.Observable;
+import rx.Observer;
+import rx.Subscription;
+import rx.concurrency.Schedulers;
 
 import static retrofit.RestAdapter.LogLevel;
 
@@ -238,6 +242,21 @@ public MockHandler(Object mockService, Map<Method, RestMethodInfo> methodInfoCac
       // This way we still defer argument serialization to the background thread.
       final RequestInterceptorTape interceptorTape = new RequestInterceptorTape();
       restAdapter.requestInterceptor.intercept(interceptorTape);
+
+      if (methodInfo.isObservable) {
+        return Observable.create(new Observable.OnSubscribeFunc<Object>() {
+          @Override public Subscription onSubscribe(Observer<? super Object> observer) {
+            try {
+              Observable observable = (Observable) invokeSync(methodInfo, interceptorTape, args);
+              //noinspection unchecked
+              return observable.subscribe(observer);
+            } catch (Throwable throwable) {
+              return Observable.error(throwable).subscribe(observer);
+            }
+          }
+        }).subscribeOn(Schedulers.executor(restAdapter.httpExecutor));
+      }
+
       restAdapter.httpExecutor.execute(new Runnable() {
         @Override public void run() {
           invokeAsync(methodInfo, interceptorTape, args);
diff --git a/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java
index 69422a77c4..443920bfdd 100644
--- a/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java
+++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java
@@ -13,15 +13,19 @@
 import retrofit.client.Request;
 import retrofit.client.Response;
 import retrofit.http.GET;
+import rx.Observable;
+import rx.util.functions.Action1;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.atLeastOnce;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.mockito.Mockito.verifyZeroInteractions;
 import static retrofit.MockRestAdapter.ValueChangeListener;
 import static retrofit.Utils.SynchronousExecutor;
 
@@ -34,6 +38,10 @@ interface AsyncExample {
     @GET(""/"") void doStuff(Callback<Object> cb);
   }
 
+  interface ObservableExample {
+    @GET(""/"") Observable<Object> doStuff();
+  }
+
   private Executor httpExecutor;
   private Executor callbackExecutor;
   private MockRestAdapter mockRestAdapter;
@@ -301,6 +309,46 @@ class MockAsyncExample implements AsyncExample {
     assertThat(tookMs.get()).isGreaterThanOrEqualTo(100);
   }
 
+  @Test public void observableApiIsCalledWithDelay() {
+    mockRestAdapter.setDelay(100);
+    mockRestAdapter.setVariancePercentage(0);
+    mockRestAdapter.setErrorPercentage(0);
+
+    final Object expected = new Object();
+    class MockObservableExample implements ObservableExample {
+      @Override public Observable<Object> doStuff() {
+        return Observable.from(expected);
+      }
+    }
+
+    ObservableExample mockService =
+        mockRestAdapter.create(ObservableExample.class, new MockObservableExample());
+
+    final long startNanos = System.nanoTime();
+    final AtomicLong tookMs = new AtomicLong();
+    final AtomicReference<Object> actual = new AtomicReference<Object>();
+    Action1<Object> onSuccess = new Action1<Object>() {
+      @Override public void call(Object o) {
+        tookMs.set(TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNanos));
+        actual.set(o);
+      }
+    };
+    Action1<Throwable> onError = new Action1<Throwable>() {
+      @Override public void call(Throwable throwable) {
+        throw new AssertionError();
+      }
+    };
+
+    mockService.doStuff().subscribe(onSuccess, onError);
+
+    verify(httpExecutor, atLeastOnce()).execute(any(Runnable.class));
+    verifyZeroInteractions(callbackExecutor);
+
+    assertThat(actual.get()).isNotNull().isSameAs(expected);
+    assertThat(tookMs.get()).isGreaterThanOrEqualTo(100);
+  }
+
+
   @Test public void syncHttpExceptionBecomesError() {
     mockRestAdapter.setDelay(100);
     mockRestAdapter.setVariancePercentage(0);
@@ -368,6 +416,47 @@ class MockAsyncExample implements AsyncExample {
     assertThat(error.getBody()).isSameAs(expected);
   }
 
+  @Test public void observableHttpExceptionBecomesError() {
+    mockRestAdapter.setDelay(100);
+    mockRestAdapter.setVariancePercentage(0);
+    mockRestAdapter.setErrorPercentage(0);
+
+    final Object expected = new Object();
+    class MockObservableExample implements ObservableExample {
+      @Override public Observable<Object> doStuff() {
+        throw new MockHttpException(404, ""Not Found"", expected);
+      }
+    }
+
+    ObservableExample mockService =
+        mockRestAdapter.create(ObservableExample.class, new MockObservableExample());
+
+    final long startNanos = System.nanoTime();
+    final AtomicLong tookMs = new AtomicLong();
+    final AtomicReference<RetrofitError> errorRef = new AtomicReference<RetrofitError>();
+    mockService.doStuff().subscribe(new Action1<Object>() {
+      @Override public void call(Object o) {
+        throw new AssertionError();
+      }
+    }, new Action1<Throwable>() {
+      @Override public void call(Throwable error) {
+        assertThat(error).isInstanceOf(RetrofitError.class);
+        tookMs.set(TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNanos));
+        errorRef.set((RetrofitError) error);
+      }
+    });
+
+    verify(httpExecutor, atLeastOnce()).execute(any(Runnable.class));
+    verifyZeroInteractions(callbackExecutor);
+
+    RetrofitError error = errorRef.get();
+    assertThat(tookMs.get()).isGreaterThanOrEqualTo(100);
+    assertThat(error.isNetworkError()).isFalse();
+    assertThat(error.getResponse().getStatus()).isEqualTo(404);
+    assertThat(error.getResponse().getReason()).isEqualTo(""Not Found"");
+    assertThat(error.getBody()).isSameAs(expected);
+  }
+
   @Test public void asyncCallToFailureIsNotAllowed() {
     mockRestAdapter.setErrorPercentage(0);
 
diff --git a/retrofit/pom.xml b/retrofit/pom.xml
index 3f42b945f7..70e038f5b9 100644
--- a/retrofit/pom.xml
+++ b/retrofit/pom.xml
@@ -28,6 +28,11 @@
       <artifactId>okhttp</artifactId>
       <optional>true</optional>
     </dependency>
+    <dependency>
+      <groupId>com.netflix.rxjava</groupId>
+      <artifactId>rxjava-core</artifactId>
+      <optional>true</optional>
+    </dependency>
 
     <dependency>
       <groupId>junit</groupId>
diff --git a/retrofit/src/main/java/retrofit/Platform.java b/retrofit/src/main/java/retrofit/Platform.java
index cdc04b1f56..12a7472da3 100644
--- a/retrofit/src/main/java/retrofit/Platform.java
+++ b/retrofit/src/main/java/retrofit/Platform.java
@@ -36,6 +36,8 @@
 abstract class Platform {
   private static final Platform PLATFORM = findPlatform();
 
+  static final boolean HAS_RX_JAVA = hasRxJavaOnClasspath();
+
   static Platform get() {
     return PLATFORM;
   }
@@ -166,4 +168,13 @@ static Client instantiate() {
       return new OkClient();
     }
   }
+
+  private static boolean hasRxJavaOnClasspath() {
+    try {
+      Class.forName(""rx.Observable"");
+      return true;
+    } catch (ClassNotFoundException e) {
+    }
+    return false;
+  }
 }
diff --git a/retrofit/src/main/java/retrofit/RestAdapter.java b/retrofit/src/main/java/retrofit/RestAdapter.java
index 358b08f183..1593b1f07c 100644
--- a/retrofit/src/main/java/retrofit/RestAdapter.java
+++ b/retrofit/src/main/java/retrofit/RestAdapter.java
@@ -24,6 +24,7 @@
 import java.lang.reflect.Type;
 import java.util.LinkedHashMap;
 import java.util.Map;
+import java.util.concurrent.Callable;
 import java.util.concurrent.Executor;
 import java.util.concurrent.TimeUnit;
 import retrofit.Profiler.RequestInformation;
@@ -37,6 +38,12 @@
 import retrofit.mime.TypedByteArray;
 import retrofit.mime.TypedInput;
 import retrofit.mime.TypedOutput;
+import rx.Observable;
+import rx.Observer;
+import rx.Scheduler;
+import rx.Subscription;
+import rx.concurrency.Schedulers;
+import rx.subscriptions.Subscriptions;
 
 /**
  * Adapts a Java interface to a REST API.
@@ -156,6 +163,8 @@ public boolean log() {
   private final Client.Provider clientProvider;
   private final Profiler profiler;
 
+  private RxSupport rxSupport = null;
+
   volatile LogLevel logLevel;
 
   private RestAdapter(Server server, Client.Provider clientProvider, Executor httpExecutor,
@@ -164,6 +173,9 @@ private RestAdapter(Server server, Client.Provider clientProvider, Executor http
     this.server = server;
     this.clientProvider = clientProvider;
     this.httpExecutor = httpExecutor;
+    if (Platform.HAS_RX_JAVA && httpExecutor != null) {
+      this.rxSupport = new RxSupport(httpExecutor);
+    }
     this.callbackExecutor = callbackExecutor;
     this.requestInterceptor = requestInterceptor;
     this.converter = converter;
@@ -216,6 +228,37 @@ static RestMethodInfo getMethodInfo(Map<Method, RestMethodInfo> cache, Method me
     }
   }
 
+  /** Indirection to avoid VerifyError if RxJava isn't present. */
+  private static final class RxSupport {
+    private final Scheduler scheduler;
+
+    RxSupport(Executor executor) {
+      this.scheduler = Schedulers.executor(executor);
+    }
+
+    Scheduler getScheduler() {
+      return scheduler;
+    }
+
+    Observable createRequestObservable(final Callable<ResponseWrapper> request) {
+      return Observable.create(new Observable.OnSubscribeFunc<Object>() {
+        @Override public Subscription onSubscribe(Observer<? super Object> observer) {
+          try {
+            ResponseWrapper wrapper = request.call();
+            observer.onNext(wrapper.responseBody);
+            observer.onCompleted();
+          } catch (RetrofitError e) {
+            observer.onError(e);
+          } catch (Exception e) {
+            // This is from the Callable.  It shouldn't actually throw.
+            throw new RuntimeException(e);
+          }
+          return Subscriptions.empty();
+        }
+      });
+    }
+  }
+
   private class RestHandler implements InvocationHandler {
     private final Map<Method, RestMethodInfo> methodDetailsCache;
 
@@ -250,10 +293,20 @@ private class RestHandler implements InvocationHandler {
       if (httpExecutor == null || callbackExecutor == null) {
         throw new IllegalStateException(""Asynchronous invocation requires calling setExecutors."");
       }
+
       // Apply the interceptor synchronously, recording the interception so we can replay it later.
       // This way we still defer argument serialization to the background thread.
       final RequestInterceptorTape interceptorTape = new RequestInterceptorTape();
       requestInterceptor.intercept(interceptorTape);
+
+      if (methodInfo.isObservable) {
+        return rxSupport.createRequestObservable(new Callable<ResponseWrapper>() {
+          @Override public ResponseWrapper call() throws Exception {
+            return (ResponseWrapper) invokeRequest(interceptorTape, methodInfo, args);
+          }
+        }).subscribeOn(rxSupport.getScheduler());
+      }
+
       Callback<?> callback = (Callback<?>) args[args.length - 1];
       httpExecutor.execute(new CallbackRunnable(callback, callbackExecutor) {
         @Override public ResponseWrapper obtainResponse() {
diff --git a/retrofit/src/main/java/retrofit/RestMethodInfo.java b/retrofit/src/main/java/retrofit/RestMethodInfo.java
index 13b0bcfe45..cd0957e552 100644
--- a/retrofit/src/main/java/retrofit/RestMethodInfo.java
+++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java
@@ -38,9 +38,17 @@
 import retrofit.http.Path;
 import retrofit.http.Query;
 import retrofit.http.RestMethod;
+import rx.Observable;
 
 /** Request metadata about a service interface declaration. */
 final class RestMethodInfo {
+
+  private enum ResponseType {
+    VOID,
+    OBSERVABLE,
+    OBJECT
+  }
+
   // Upper and lower characters, digits, underscores, and hyphens, starting with a character.
   private static final String PARAM = ""[a-zA-Z][a-zA-Z0-9_-]*"";
   private static final Pattern PARAM_NAME_REGEX = Pattern.compile(PARAM);
@@ -64,7 +72,9 @@ enum RequestType {
   boolean loaded = false;
 
   // Method-level details
+  final ResponseType responseType;
   final boolean isSynchronous;
+  final boolean isObservable;
   Type responseObjectType;
   RequestType requestType = RequestType.SIMPLE;
   String requestMethod;
@@ -80,7 +90,9 @@ enum RequestType {
 
   RestMethodInfo(Method method) {
     this.method = method;
-    isSynchronous = parseResponseType();
+    responseType = parseResponseType();
+    isSynchronous = (responseType == ResponseType.OBJECT);
+    isObservable = (responseType == ResponseType.OBSERVABLE);
   }
 
   synchronized void init() {
@@ -222,8 +234,9 @@ private List<retrofit.client.Header> parseHeaders(String[] headers) {
   }
 
   /** Loads {@link #responseObjectType}. Returns {@code true} if method is synchronous. */
-  private boolean parseResponseType() {
+  private ResponseType parseResponseType() {
     // Synchronous methods have a non-void return type.
+    // Observable methods have a return type of Observable.
     Type returnType = method.getGenericReturnType();
 
     // Asynchronous methods should have a Callback type as the last argument.
@@ -257,21 +270,22 @@ private boolean parseResponseType() {
     }
 
     if (hasReturnType) {
+      if (Platform.HAS_RX_JAVA) {
+        Class rawReturnType = Types.getRawType(returnType);
+        if (rawReturnType == Observable.class) {
+          returnType = Types.getSupertype(returnType, rawReturnType, Observable.class);
+          responseObjectType = getParameterUpperBound((ParameterizedType) returnType);
+          return ResponseType.OBSERVABLE;
+        }
+      }
       responseObjectType = returnType;
-      return true;
+      return ResponseType.OBJECT;
     }
 
     lastArgType = Types.getSupertype(lastArgType, Types.getRawType(lastArgType), Callback.class);
     if (lastArgType instanceof ParameterizedType) {
-      Type[] types = ((ParameterizedType) lastArgType).getActualTypeArguments();
-      for (int i = 0; i < types.length; i++) {
-        Type type = types[i];
-        if (type instanceof WildcardType) {
-          types[i] = ((WildcardType) type).getUpperBounds()[0];
-        }
-      }
-      responseObjectType = types[0];
-      return false;
+      responseObjectType = getParameterUpperBound((ParameterizedType) lastArgType);
+      return ResponseType.VOID;
     }
 
     throw new IllegalArgumentException(""Last parameter of ""
@@ -280,6 +294,18 @@ private boolean parseResponseType() {
         + lastArgType);
   }
 
+
+  private static Type getParameterUpperBound(ParameterizedType type) {
+    Type[] types = type.getActualTypeArguments();
+    for (int i = 0; i < types.length; i++) {
+      Type paramType = types[i];
+      if (paramType instanceof WildcardType) {
+        types[i] = ((WildcardType) paramType).getUpperBounds()[0];
+      }
+    }
+    return types[0];
+  }
+
   /**
    * Loads {@link #requestParamNames} and {@link #requestParamUsage}. Must be called after
    * {@link #parseMethodAnnotations()}.
@@ -289,7 +315,7 @@ private void parseParameters() {
 
     Annotation[][] parameterAnnotationArrays = method.getParameterAnnotations();
     int count = parameterAnnotationArrays.length;
-    if (!isSynchronous) {
+    if (!isSynchronous && !isObservable) {
       count -= 1; // Callback is last argument when not a synchronous method.
     }
 
diff --git a/retrofit/src/test/java/retrofit/RestAdapterTest.java b/retrofit/src/test/java/retrofit/RestAdapterTest.java
index 447e85a67d..e3fdfecbac 100644
--- a/retrofit/src/test/java/retrofit/RestAdapterTest.java
+++ b/retrofit/src/test/java/retrofit/RestAdapterTest.java
@@ -25,6 +25,8 @@
 import retrofit.mime.TypedInput;
 import retrofit.mime.TypedOutput;
 import retrofit.mime.TypedString;
+import rx.Observable;
+import rx.util.functions.Action1;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.fest.assertions.api.Assertions.fail;
@@ -32,7 +34,9 @@
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Matchers.eq;
+import static org.mockito.Matchers.isA;
 import static org.mockito.Matchers.same;
+import static org.mockito.Mockito.atLeastOnce;
 import static org.mockito.Mockito.doReturn;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.spy;
@@ -74,6 +78,7 @@ private interface Example {
     @GET(""/"") void something(Callback<Object> callback);
     @GET(""/"") Response direct();
     @GET(""/"") void direct(Callback<Response> callback);
+    @POST(""/"") Observable<String> observable(@Body String body);
   }
   private interface InvalidExample extends Example {
   }
@@ -512,4 +517,33 @@ public void log(String message) {
     verify(mockCallbackExecutor).execute(any(Runnable.class));
     verify(callback).success(eq(response), same(response));
   }
+
+  @Test public void observableCallsOnNext() throws Exception {
+    when(mockClient.execute(any(Request.class))) //
+        .thenReturn(new Response(200, ""OK"", NO_HEADERS, new TypedString(""hello"")));
+    Action1<String> action = mock(Action1.class);
+    example.observable(""Howdy"").subscribe(action);
+    verify(action).call(eq(""hello""));
+  }
+
+  @Test public void observableCallsOnError() throws Exception {
+    when(mockClient.execute(any(Request.class))) //
+        .thenReturn(new Response(300, ""FAIL"", NO_HEADERS, new TypedString(""bummer"")));
+    Action1<String> onSuccess = mock(Action1.class);
+    Action1<Throwable> onError = mock(Action1.class);
+    example.observable(""Howdy"").subscribe(onSuccess, onError);
+    verifyZeroInteractions(onSuccess);
+    verify(onError).call(isA(RetrofitError.class));
+  }
+
+  @Test public void observableUsesHttpExecutor() throws IOException {
+    Response response = new Response(200, ""OK"", NO_HEADERS, new TypedString(""hello""));
+    when(mockClient.execute(any(Request.class))).thenReturn(response);
+
+    example.observable(""Howdy"").subscribe(mock(Action1.class));
+
+    verify(mockRequestExecutor, atLeastOnce()).execute(any(Runnable.class));
+    verifyZeroInteractions(mockCallbackExecutor);
+  }
+
 }
diff --git a/retrofit/src/test/java/retrofit/RestMethodInfoTest.java b/retrofit/src/test/java/retrofit/RestMethodInfoTest.java
index e77b8a0d0b..c4a21fa44a 100644
--- a/retrofit/src/test/java/retrofit/RestMethodInfoTest.java
+++ b/retrofit/src/test/java/retrofit/RestMethodInfoTest.java
@@ -30,6 +30,7 @@
 import retrofit.http.Query;
 import retrofit.http.RestMethod;
 import retrofit.mime.TypedOutput;
+import rx.Observable;
 
 import static java.lang.annotation.ElementType.METHOD;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -204,6 +205,47 @@ class Example {
     assertThat(methodInfo.responseObjectType).isEqualTo(expected);
   }
 
+  @Test public void observableResponse() {
+    class Example {
+      @GET(""/foo"") Observable<Response> a() {
+        return null;
+      }
+    }
+
+    Method method = TestingUtils.getMethod(Example.class, ""a"");
+    RestMethodInfo methodInfo = new RestMethodInfo(method);
+    assertThat(methodInfo.isSynchronous).isFalse();
+    assertThat(methodInfo.isObservable).isTrue();
+    assertThat(methodInfo.responseObjectType).isEqualTo(Response.class);
+  }
+
+  @Test public void observableGenericResponse() {
+    class Example {
+      @GET(""/foo"") Observable<List<String>> a() {
+        return null;
+      }
+    }
+
+    Method method = TestingUtils.getMethod(Example.class, ""a"");
+    RestMethodInfo methodInfo = new RestMethodInfo(method);
+    assertThat(methodInfo.isSynchronous).isFalse();
+    assertThat(methodInfo.isObservable).isTrue();
+    Type expected = new TypeToken<List<String>>() {}.getType();
+    assertThat(methodInfo.responseObjectType).isEqualTo(expected);
+  }
+
+  @Test(expected = IllegalArgumentException.class)
+  public void observableWithCallback() {
+    class Example {
+      @GET(""/foo"") Observable<Response> a(Callback<Response> callback) {
+        return null;
+      }
+    }
+
+    Method method = TestingUtils.getMethod(Example.class, ""a"");
+    new RestMethodInfo(method);
+  }
+
   @Test(expected = IllegalArgumentException.class)
   public void missingCallbackTypes() {
     class Example {
diff --git a/website/index.html b/website/index.html
index 05ac687a59..c35e157949 100644
--- a/website/index.html
+++ b/website/index.html
@@ -99,29 +99,40 @@ <h4>Form Encoded and Multipart</h4>
 User updateUser(@Part(""photo"") TypedFile photo, @Part(""description"") TypedString description);</pre>
             <p>Multipart parts use the <code>RestAdapter</code>'s converter or they can implement <code>TypedOutput</code> to handle their own serialization.</p>
 
-            <h4>Synchronous vs. Asynchronous</h4>
+            <h4>Synchronous vs. Asynchronous vs. Observable</h4>
             <p>Methods can be declared for either synchronous or asynchronous execution.</p>
             <p>A method with a return type will be executed sychronously.</p>
             <pre class=""prettyprint"">@GET(""/user/{id}/photo"")
-Photo listUsers(@Path(""id"") int id);</pre>
+Photo getUserPhoto(@Path(""id"") int id);</pre>
             <p>Asynchronous execution requires the last parameter of the method be a <code>Callback</code>.</p>
             <pre class=""prettyprint"">@GET(""/user/{id}/photo"")
-void listUsers(@Path(""id"") int id, Callback&lt;Photo> cb);</pre>
-            <p>On Android, the callbacks will be executed on the main thread. For desktop applications the callbacks will happen on the same thread that executed the HTTP request.</p>
-            
+void getUserPhoto(@Path(""id"") int id, Callback&lt;Photo> cb);</pre>
+            <p>On Android, callbacks will be executed on the main thread. For desktop applications callbacks will happen on the same thread that executed the HTTP request.</p>
+
+            <p>Retrofit also integrates <a href=""https://github.com/Netflix/RxJava/wiki"">RxJava</a> to support methods with a return type of <code>rx.Observable</code></p>
+            <pre class=""prettyprint"">@GET(""/user/{id}/photo"")
+Observable&lt;Photo> getUserPhoto(@Path(""id"") int id);</pre>
+            <p>Observable requests are subscribed asynchronously and observed on the same thread that executed the HTTP request.  To observe on a different thread (e.g. Android's main thread) call <code>observeOn(Scheduler)</code> on the returned <code>Observable</code>.</p>
+
             <h4>Response Object Type</h4>
-            <p>HTTP responses are automatically converted to a specified type using the <code>RestAdapter</code>'s converter which defaults to JSON. The desired type is declared as the method return type or using the <code>Callback</code>.
+            <p>HTTP responses are automatically converted to a specified type using the <code>RestAdapter</code>'s converter which defaults to JSON. The desired type is declared as the method return type or using the <code>Callback</code> or <code>Observable</code>.
             <pre class=""prettyprint"">@GET(""/users/list"")
 List&lt;User> userList();
 
 @GET(""/users/list"")
-void userList(Callback&lt;List&lt;User>> cb);</pre>
+void userList(Callback&lt;List&lt;User>> cb);
+
+@GET(""/users/list"")
+Observable&lt;List&lt;User>> userList();</pre>
             <p>For access to the raw HTTP response use the <code>Response</code> type.</p>
             <pre class=""prettyprint"">@GET(""/users/list"")
 Response userList();
 
 @GET(""/users/list"")
-void userList(Callback&lt;Response> cb);</pre>
+void userList(Callback&lt;Response> cb);
+
+@GET(""/users/list"")
+Observable&lt;Response> userList();</pre>
 
             <!--<h3 id=""restadapter-configuration"">RestAdapter Configuration</h3>
             <p><code>RestAdapter</code> is the class through which your API interfaces are turned into callable objects. By default, Retrofit will give you sane defaults for your platform but it allows for customization.</p>",add support for Observable requests with RxJava <enter>  <enter> Service interface methods may now specify Observable as a return type.,1
"diff --git a/modules/ballerina-core/pom.xml b/modules/ballerina-core/pom.xml
index 77446ee1620..68d49cccdd9 100644
--- a/modules/ballerina-core/pom.xml
+++ b/modules/ballerina-core/pom.xml
@@ -116,11 +116,6 @@
             <groupId>org.apache.commons</groupId>
             <artifactId>commons-lang3</artifactId>
         </dependency>
-        <dependency>
-            <groupId>org.apache.activemq</groupId>
-            <artifactId>activemq-broker</artifactId>
-            <scope>test</scope>
-        </dependency>
     </dependencies>
 
     <build>
diff --git a/modules/ballerina-core/src/test/java/org/wso2/ballerina/lang/service/JMSServiceTest.java b/modules/ballerina-core/src/test/java/org/wso2/ballerina/lang/service/JMSServiceTest.java
new file mode 100644
index 00000000000..5e4bb0ac17a
--- /dev/null
+++ b/modules/ballerina-core/src/test/java/org/wso2/ballerina/lang/service/JMSServiceTest.java
@@ -0,0 +1,60 @@
+package org.wso2.ballerina.lang.service;
+
+import org.testng.Assert;
+import org.testng.annotations.AfterClass;
+import org.testng.annotations.BeforeClass;
+import org.testng.annotations.Test;
+import org.wso2.ballerina.core.EnvironmentInitializer;
+import org.wso2.ballerina.core.exception.BallerinaException;
+import org.wso2.ballerina.core.model.Application;
+import org.wso2.ballerina.core.runtime.ServerConnectorMessageHandler;
+import org.wso2.ballerina.core.runtime.dispatching.jms.Constants;
+import org.wso2.carbon.messaging.CarbonMessage;
+import org.wso2.carbon.messaging.TextCarbonMessage;
+
+/**
+ * Testing the JMS Service Dispatcher.
+ */
+public class JMSServiceTest {
+    private Application application;
+
+    @BeforeClass
+    public void setup() {
+        application = EnvironmentInitializer.setup(""lang/service/serviceLevelVariable.bal"");
+    }
+
+    @Test(description = ""Test for exceptions when a jms message does not have a service id"")
+    public void testJMSServiceAvailabilityCheckWithoutJmsServiceId() {
+        try {
+            CarbonMessage cMsg = new TextCarbonMessage(""test"");
+            cMsg.setProperty(org.wso2.carbon.messaging.Constants.PROTOCOL, Constants.PROTOCOL_JMS);
+            ServerConnectorMessageHandler.handleInbound(cMsg, null);
+            Assert.fail(""Exception is not thrown when a message is passed without jms service id"");
+        } catch (BallerinaException ex) {
+            Assert.assertEquals(ex.getCause().getMessage(), ""org.wso2.ballerina.core.exception.BallerinaException: ""
+                            + ""error in ballerina program: service Id is not found in JMS Message"",
+                    ""Exception message does not match when the message is passed without service id"");
+        }
+    }
+
+    @Test(description = ""est for exceptions when a jms message contains non-existing service id"")
+    public void testJMSServiceAvailabilityWithWrongServiceId() {
+        try {
+            CarbonMessage cMsg = new TextCarbonMessage(""test"");
+            cMsg.setProperty(org.wso2.carbon.messaging.Constants.PROTOCOL, Constants.PROTOCOL_JMS);
+            cMsg.setProperty(Constants.JMS_SERVICE_ID, ""testabc"");
+            ServerConnectorMessageHandler.handleInbound(cMsg, null);
+            Assert.fail(""Exception is not thrown when a non-existing service is called"");
+        } catch (BallerinaException ex) {
+            Assert.assertEquals(ex.getCause().getMessage(), ""org.wso2.ballerina.core.exception.BallerinaException: ""
+                    + ""error in ballerina program: no jms service is registered with the service id testabc"",
+                    ""Exception message does not match when the message is passed is dispatched to non-existing ""
+                    + ""service"");
+        }
+    }
+
+    @AfterClass
+    public void tearDown() {
+        EnvironmentInitializer.cleanup(application);
+    }
+}
diff --git a/modules/ballerina-core/src/test/resources/testng.xml b/modules/ballerina-core/src/test/resources/testng.xml
index 3b0ba42742f..15ae323e24d 100644
--- a/modules/ballerina-core/src/test/resources/testng.xml
+++ b/modules/ballerina-core/src/test/resources/testng.xml
@@ -93,6 +93,7 @@ under the License.
         <classes>
             <class name=""org.wso2.ballerina.TestConfigurationUtil"" />
             <class name=""org.wso2.ballerina.lang.service.ServiceVariableTest""/>
+            <class name=""org.wso2.ballerina.lang.service.JMSServiceTest"" />
         </classes>
     </test>",Updated tz data to version 2005f . . git - svn - id : https : / / joda - time . svn . sourceforge . net / svnroot / joda - time / trunk @ 733 1e1cfbb7 - 5c0e - 0410 - a2f0 - f98d92ec03a1,0
"diff --git a/pdex/src/processing/mode/experimental/DebugEditor.java b/pdex/src/processing/mode/experimental/DebugEditor.java
index 7ab11b682..51e7341d1 100755
--- a/pdex/src/processing/mode/experimental/DebugEditor.java
+++ b/pdex/src/processing/mode/experimental/DebugEditor.java
@@ -1079,8 +1079,11 @@ public class DebugEditor extends JavaEditor implements ActionListener {
     @Override
     public void prepareRun() {
         super.prepareRun();
+        if (!ExperimentalMode.autoSaveEnabled)
+          return;
+        
         try {
-            if (sketch.isUntitled()) {
+            if (sketch.isUntitled() && ExperimentalMode.untitledAutoSaveEnabled) {
                 if (handleSave(true))
                     statusTimedNotice(""Saved. Running..."", 5);
                 else
@@ -1118,20 +1121,6 @@ public class DebugEditor extends JavaEditor implements ActionListener {
      * @param secs
      */
     public void statusTimedNotice(final String msg, final int secs) {
-//        EventQueue.invokeLater(new Runnable() {
-//            
-//            @Override
-//            public void run() {
-//                statusNotice(msg);
-//                try {
-//                    Thread.sleep(secs * 1000);
-//                } catch (InterruptedException e) {
-//                    e.printStackTrace();
-//                }
-//                statusEmpty();
-//                
-//            }
-//        });
         SwingWorker s = new SwingWorker<Void, Void>() {
 
             @Override
diff --git a/pdex/src/processing/mode/experimental/ExperimentalMode.java b/pdex/src/processing/mode/experimental/ExperimentalMode.java
index 5b04896d3..b90b5a519 100755
--- a/pdex/src/processing/mode/experimental/ExperimentalMode.java
+++ b/pdex/src/processing/mode/experimental/ExperimentalMode.java
@@ -127,13 +127,15 @@ public class ExperimentalMode extends JavaMode {
   }
   
   volatile public static boolean errorCheckEnabled = true, warningsEnabled = true,
-      codeCompletionsEnabled = true, debugOutputEnabled = false, errorLogsEnabled = false;
+      codeCompletionsEnabled = true, debugOutputEnabled = false, errorLogsEnabled = false,
+      untitledAutoSaveEnabled = false, autoSaveEnabled = true;
   public static int autoSaveInterval = 3; //in minutes
 
   public static final String prefErrorCheck = ""pdex.errorCheckEnabled"",
       prefWarnings = ""pdex.warningsEnabled"",
       prefCodeCompletionEnabled = ""pdex.ccEnabled"",
-      prefDebugOP = ""pdex.dbgOutput"", prefErrorLogs = ""pdex.writeErrorLogs"", prefAutoSaveInterval = ""pdex.autoSaveInterval"";
+      prefDebugOP = ""pdex.dbgOutput"", prefErrorLogs = ""pdex.writeErrorLogs"", prefAutoSaveInterval = ""pdex.autoSaveInterval"",
+      prefUntitledAutoSave = ""pdex.autoSave.untitledAutoSaveEnabled"", prefAutoSave = ""pdex.autoSaveEnabled"";
   
   public void loadPreferences(){
     log(""Load PDEX prefs"");
@@ -144,6 +146,8 @@ public class ExperimentalMode extends JavaMode {
     DEBUG = Preferences.getBoolean(prefDebugOP);
     errorLogsEnabled = Preferences.getBoolean(prefErrorLogs);
     autoSaveInterval = Preferences.getInteger(prefAutoSaveInterval);
+    untitledAutoSaveEnabled = Preferences.getBoolean(prefUntitledAutoSave);
+    autoSaveEnabled = Preferences.getBoolean(prefAutoSave);
   }
   
   public void savePreferences(){
@@ -154,6 +158,8 @@ public class ExperimentalMode extends JavaMode {
     Preferences.setBoolean(prefDebugOP, DEBUG);
     Preferences.setBoolean(prefErrorLogs,errorLogsEnabled);
     Preferences.setInteger(prefAutoSaveInterval,autoSaveInterval);
+    Preferences.setBoolean(prefUntitledAutoSave,untitledAutoSaveEnabled);
+    Preferences.setBoolean(prefAutoSave,autoSaveEnabled);
   }
   
   public void ensurePrefsExist(){
@@ -169,6 +175,10 @@ public class ExperimentalMode extends JavaMode {
       Preferences.setBoolean(prefErrorLogs,errorLogsEnabled);
     if(Preferences.get(prefAutoSaveInterval) == null) 
       Preferences.setInteger(prefAutoSaveInterval,autoSaveInterval);
+    if(Preferences.get(prefUntitledAutoSave) == null) 
+",added usage of isInDayLightTime ( ),0
"diff --git a/okhttp/src/main/java/com/squareup/okhttp/Dispatcher.java b/okhttp/src/main/java/com/squareup/okhttp/Dispatcher.java
index a696c0ca7e07..a9346701fb4f 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Dispatcher.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/Dispatcher.java
@@ -177,4 +177,12 @@ synchronized void executed(Call call) {
   synchronized void finished(Call call) {
     if (!executedCalls.remove(call)) throw new AssertionError(""Call wasn't in-flight!"");
   }
+
+  public synchronized int getRunningCallCount() {
+    return runningCalls.size();
+  }
+
+  public synchronized int getQueuedCallCount() {
+    return readyCalls.size();
+  }
 }",Expose running and queued call counts for monitoring,1
"diff --git a/pom.xml b/pom.xml
index 70b582d961cf..b5aef431c4fe 100644
--- a/pom.xml
+++ b/pom.xml
@@ -348,7 +348,6 @@
                     <reportSet>
                         <reports>
                             <report>index</report>
-                            <report>summary</report>
                             <report>dependency-info</report>
                             <report>modules</report>
                             <report>license</report>",Disable summary report,1
"diff --git a/graylog2-web-interface/src/views/components/aggregationbuilder/PivotConfiguration.jsx b/graylog2-web-interface/src/views/components/aggregationbuilder/PivotConfiguration.jsx
index 6a7e98c2fb..590f78f35c 100644
--- a/graylog2-web-interface/src/views/components/aggregationbuilder/PivotConfiguration.jsx
+++ b/graylog2-web-interface/src/views/components/aggregationbuilder/PivotConfiguration.jsx
@@ -31,8 +31,11 @@ export default class PivotConfiguration extends React.Component {
     };
   }
 
-  // eslint-disable-next-line react/destructuring-assignment
-  _onSubmit = () => this.props.onClose(this.state);
+  _onSubmit = (e) => {
+    e.preventDefault();
+    const { onClose } = this.props;
+    onClose(this.state);
+  };
 
   _onChange = (config) => this.setState({ config });
 
diff --git a/graylog2-web-interface/src/views/components/common/EditableTitle.jsx b/graylog2-web-interface/src/views/components/common/EditableTitle.jsx
index aaf0a3c9fe..e9978818e9 100644
--- a/graylog2-web-interface/src/views/components/common/EditableTitle.jsx
+++ b/graylog2-web-interface/src/views/components/common/EditableTitle.jsx
@@ -15,14 +15,13 @@ export default class EditableTitle extends React.Component {
     onChange: () => {},
   };
 
-  state = {
-    editing: false,
-    // eslint-disable-next-line react/destructuring-assignment
-    value: this.props.value,
-  };
-
-  componentWillReceiveProps(nextProps) {
-    this.setState({ value: nextProps.value });
+  constructor(props) {
+    super(props);
+    const { value } = props;
+    this.state = {
+      editing: false,
+      value,
+    };
   }
 
   _toggleEditing = () => {
@@ -42,7 +41,8 @@ export default class EditableTitle extends React.Component {
     this.setState({ value: evt.target.value });
   };
 
-  _onSubmit = () => {
+  _onSubmit = (e) => {
+    e.preventDefault();
     const { value } = this.state;
     const { onChange, value: propsValue } = this.props;
     if (value !== '') {
diff --git a/graylog2-web-interface/src/views/components/widgets/WidgetHeader.jsx b/graylog2-web-interface/src/views/components/widgets/WidgetHeader.jsx
index e6994867d2..db14c2a7d2 100644
--- a/graylog2-web-interface/src/views/components/widgets/WidgetHeader.jsx
+++ b/graylog2-web-interface/src/views/components/widgets/WidgetHeader.jsx
@@ -14,7 +14,7 @@ const LoadingSpinner = styled(Spinner)`
 const WidgetHeader = ({ children, onRename, hideDragHandle, title, loading }) => (
   <div className={styles.widgetHeader}>
     {hideDragHandle || <Icon name=""bars"" className={`widget-drag-handle ${styles.widgetDragHandle}`} />}{' '}
-    <EditableTitle disabled={!onRename} value={title} onChange={onRename} />
+    <EditableTitle key={title} disabled={!onRename} value={title} onChange={onRename} />
     {loading && <LoadingSpinner text="""" delay={0} />}
     <span className={`pull-right ${styles.widgetActionDropdown}`}>
       {children}",Allow admins to bypass the playerlimit [ server ] ( <issue_id> ),0
"diff --git a/src/site/xdoc/index.xml b/src/site/xdoc/index.xml
index b0ce46870a54..07701ae0bd69 100644
--- a/src/site/xdoc/index.xml
+++ b/src/site/xdoc/index.xml
@@ -2,7 +2,6 @@
 <document>
   <properties>
     <title>About</title>
-    <author>Stephen Connolly</author>
   </properties>
   <head>
     <link rel=""stylesheet"" href=""./css/hopscotch-0.1.2.min.css"" />",Remove author tag left in from copy&paste,1
"diff --git a/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/ImageClassLoader.java b/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/ImageClassLoader.java
index 00bf8165223..a3c6de93638 100644
--- a/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/ImageClassLoader.java
+++ b/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/ImageClassLoader.java
@@ -363,7 +363,7 @@ public final class ImageClassLoader {
                 }
             }
             return forName(name);
-        } catch (ClassNotFoundException ex) {
+        } catch (ClassNotFoundException | NoClassDefFoundError ex) {
             if (failIfClassMissing) {
                 throw",improve DateParser,0
"diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java
index 8cd8d97bdb44..2546c8cb61d9 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java
@@ -477,6 +477,30 @@ private void interceptorThrowsRuntimeExceptionSynchronous(
     interceptorThrowsRuntimeExceptionAsynchronous(client.networkInterceptors());
   }
 
+  @Test public void networkInterceptorModifiedRequestIsReturned() throws IOException {
+    server.enqueue(new MockResponse());
+
+    Interceptor modifyHeaderInterceptor = new Interceptor() {
+      @Override public Response intercept(Chain chain) throws IOException {
+        return chain.proceed(chain.request().newBuilder()
+          .header(""User-Agent"", ""intercepted request"")
+          .build());
+      }
+    };
+
+    client.networkInterceptors().add(modifyHeaderInterceptor);
+
+    Request request = new Request.Builder()
+        .url(server.getUrl(""/""))
+        .header(""User-Agent"", ""user request"")
+        .build();
+
+    Response response = client.newCall(request).execute();
+    assertNotNull(response.request().header(""User-Agent""));
+    assertEquals(""user request"", response.request().header(""User-Agent""));
+    assertEquals(""intercepted request"", response.networkResponse().request().header(""User-Agent""));
+  }
+
   /**
    * When an interceptor throws an unexpected exception, asynchronous callers are left hanging. The
    * exception goes to the uncaught exception handler.
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
index 643fa09e5327..8e4488330c0e 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
@@ -813,6 +813,9 @@ class NetworkInterceptorChain implements Interceptor.Chain {
 
       transport.writeRequestHeaders(request);
 
+      //Update the networkRequest with the possibly updated interceptor request.
+      networkRequest = request;
+
       if (permitsRequestBody() && request.body() != null) {
         Sink requestBodyOut = transport.createRequestBody(request, request.body().contentLength());
         BufferedSink bufferedRequestBody = Okio.buffer(requestBodyOut);","Squashed commit of the following: <enter>  <enter> commit d5f3ef15e9822c03dc0d107a9944f730c5c8d710 <enter> Author: Quinn Neumiiller <quinnjn@gmail.com> <enter> Date:   Tue Apr 7 16:15:51 2015 -0600 <enter>  <enter>     userRequest should always be sent back, networkRequest is included in networkResponse. <enter>  <enter> commit bc7f5372b9ad9b68affef333ec259789cd342be0 <enter> Author: Quinn Neumiiller <quinnjn@gmail.com> <enter> Date:   Mon Apr 6 20:19:27 2015 -0600 <enter>  <enter>     Updating networkRequest when interceptors touch the request, attaching the request update to the userResponse. <enter>  <enter> commit ae5b3ca59f75bc068a5cab2a68465cdef9f4f5ec <enter> Author: Quinn Neumiiller <quinnjn@gmail.com> <enter> Date:   Mon Apr 6 18:36:38 2015 -0600 <enter>  <enter>     Add a test for interceptor requests in the response",1
"diff --git a/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLClient.bal b/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLClient.bal
index cbd6b088670..f3daed0adb9 100644
--- a/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLClient.bal
+++ b/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLClient.bal
@@ -18,7 +18,9 @@ function getConnectorConfigs() (http:Options) {
                keyStoreFile:""${ballerina.home}/bre/security/wso2carbon.jks"",
                keyStorePassword:""wso2carbon"",
                trustStoreFile:""${ballerina.home}/bre/security/client-truststore.jks"",
-               trustStorePassword:""wso2carbon""
+               trustStorePassword:""wso2carbon"",
+               ciphers:""TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"",
+               sslEnabledProtocols:""TLSv1.2,TLSv1.1""
                    },
               followRedirects: {}
     };
diff --git a/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLServer.bal b/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLServer.bal
index 3929f00c9e6..10dc2098671 100644
--- a/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLServer.bal
+++ b/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLServer.bal
@@ -9,7 +9,9 @@ import ballerina.lang.system;
     certPassword:""wso2carbon"",
     sslVerifyClient:""require"",
     trustStoreFile:""${ballerina.home}/bre/security/client-truststore.jks"",
-    trustStorePassword:""wso2carbon""
+    trustStorePassword:""wso2carbon"",
+    ciphers:""TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"",
+    sslEnabledProtocols:""TLSv1.2,TLSv1.1""
 }
 service<http> echo {","Fix the SuperficialValidator to properly handle unreasonable AnnotationValues ( specifically \"" < any > \"" and \"" < error > \"" strings appearing instead of real values where there are missing imports or other upstream compilation issues ) .",0
"diff --git a/edxp-core/build.gradle b/edxp-core/build.gradle
index 9e1a3998..01b3910c 100644
--- a/edxp-core/build.gradle
+++ b/edxp-core/build.gradle
@@ -69,6 +69,27 @@ afterEvaluate {
         }
 
         pushTask.dependsOn(zipTask)
+
+        zipTask = task(""zipWhale${nameCapped}"", type: Exec, dependsOn: "":edxp-whale:makeAndCopy${nameCapped}"") {
+            workingDir '..'
+            commandLine 'sh', 'build.sh',    \
+                        project.name,    \
+                        ""Whale-${project.version}-${nameLowered}"",    \
+                        ""${project.extensions['module_name']}""
+        }
+
+        pushTask = task(""pushWhale${nameCapped}"", type: Exec) {
+            workingDir 'release'
+            def commands = [""adb"", ""push"", ""magisk-${project.extensions['module_name']}-Whale"" +
+                    ""-${project.version}-${nameLowered}.zip"", ""/sdcard/""]
+            if (OperatingSystem.current().isWindows()) {
+                commandLine 'cmd', '/c', commands.join("" "")
+            } else {
+                commandLine commands
+            }
+        }
+
+        pushTask.dependsOn(zipTask)
     }
 
 }
diff --git a/edxp-core/jni/main/native_hook/native_hook.h b/edxp-core/jni/main/native_hook/native_hook.h
index 0a79f2c2..eb6f7a9a 100644
--- a/edxp-core/jni/main/native_hook/native_hook.h
+++ b/edxp-core/jni/main/native_hook/native_hook.h
@@ -5,10 +5,10 @@
 
 #if defined(__LP64__)
 static constexpr const char *kLibArtPath = ""/system/lib64/libart.so"";
-static constexpr const char *kLibWhalePath = ""/system/lib64/libwhale.so"";
+static constexpr const char *kLibWhalePath = ""/system/lib64/libwhale.edxp.so"";
 #else
 static constexpr const char *kLibArtPath = ""/system/lib/libart.so"";
-static constexpr const char *kLibWhalePath = ""/system/lib/libwhale.so"";
+static constexpr const char *kLibWhalePath = ""/system/lib/libwhale.edxp.so"";
 #endif
 
 #define XHOOK_REGISTER(NAME) \
diff --git a/edxp-core/template_override/system/etc/public.libraries-edxp.txt b/edxp-core/template_override/system/etc/public.libraries-edxp.txt
index 3c8badba..03b2c76d 100644
--- a/edxp-core/template_override/system/etc/public.libraries-edxp.txt
+++ b/edxp-core/template_override/system/etc/public.libraries-edxp.txt
@@ -1 +1,2 @@
 libsandhook.edxp.so
+libwhale.edxp.so
diff --git a/edxp-core/template_override/system/lib/libwhale.so b/edxp-core/template_override/system/lib/libwhale.edxp.so
similarity index 100%
rename from edxp-core/template_override/system/lib/libwhale.so
rename to edxp-core/template_override/system/lib/libwhale.edxp.so
diff --git a/edxp-core/template_override/system/lib64/libwhale.so b/edxp-core/template_override/system/lib64/libwhale.edxp.so
similarity index 100%
rename from edxp-core/template_override/system/lib64/libwhale.so
rename to edxp-core/template_override/system/lib64/libwhale.edxp.so
diff --git a/edxp-core/template_override/system_x86/lib/libwhale.so b/edxp-core/template_override/system_x86/lib/libwhale.edxp.so
similarity index 100%
rename from edxp-core/template_override/system_x86/lib/libwhale.so
rename to edxp-core/template_override/system_x86/lib/libwhale.edxp.so
diff --git a/edxp-core/template_override/system_x86/lib64/libwhale.so b/edxp-core/template_override/system_x86/lib64/libwhale.edxp.so
similarity index 100%
rename from edxp-core/template_override/system_x86/lib64/libwhale.so
rename to edxp-core/template_override/system_x86/lib64/libwhale.edxp.so
diff --git a/edxp-sandhook/src/main/java/com/elderdrivers/riru/edxp/sandhook/config/SandHookProvider.java b/edxp-sandhook/src/main/java/com/elderdrivers/riru/edxp/sandhook/config/SandHookProvider.java
index da08315b..967b2410 100644
--- a/edxp-sandhook/src/main/java/com/elderdrivers/riru/edxp/sandhook/config/SandHookProvider.java
+++ b/edxp-sandhook/src/main/java/com/elderdrivers/riru/edxp/sandhook/config/SandHookProvider.java
@@ -2,12 +2,10 @@ package com.elderdrivers.riru.edxp.sandhook.config;
 
 import com.elderdrivers.riru.edxp.hook.HookProvider;
 import com.elderdrivers.riru.edxp.sandhook.dexmaker.DexMakerUtils;
-import com.elderdrivers.riru.edxp.sandhook.dexmaker.DynamicBridge;
 import com.elderdrivers.riru.edxp.sandhook.util.PrebuiltMethodsDeopter;
 import com.swift.sandhook.xposedcompat.XposedCompat;
 import com.swift.sandhook.xposedcompat.methodgen.SandHookXposedBridge;
 
-import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Member;
 
 import de.robv.android.xposed.XposedBridge;
@@ -19,7 +17,7 @@ public class SandHookProvider implements HookProvider {
     }
 
     @Override
-    public Object invokeOriginalMethod(Member method, Object thisObject, Object[] args) throws Throwable {
+    public Object invokeOriginalMethod(Member method, long methodId, Object thisObject, Object[] args) throws Throwable {
         return SandHookXposedBridge.invokeOriginalMethod(method, thisObject, args);
     }
 
@@ -32,4 +30,9 @@ public class SandHookProvider implements HookProvider {
     public void deoptMethods(String packageName, ClassLoader classLoader) {
         PrebuiltMethodsDeopter.deoptMethods(packageName, classLoader);
     }
+
+    @Override
+    public long getMethodId(Member member) {
+        return 0;
+    }
 }
diff --git a/edxp-whale/.gitignore b/edxp-whale/.gitignore
new file mode 100644
index 00000000..796b96d1
--- /dev/null
+++ b/edxp-whale/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/edxp-whale/build.gradle b/edxp-whale/build.gradle
new file mode 100644
index 00000000..7087eedb
--- /dev/null
+++ b/edxp-whale/build.gradle
@@ -0,0 +1,61 @@
+apply plugin: 'com.android.application'
+
+android {
+    compileSdkVersion 28
+
+    defaultConfig {
+        applicationId ""com.elderdrivers.riru.edxp.whale""
+        minSdkVersion 26
+        targetSdkVersion 28
+        versionCode 1
+        versionName ""1.0""
+    }
+
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
+        }
+    }
+
+}
+
+dependencies {
+    compileOnly files(""libs/framework-stub.jar"")
+    implementation project(':edxp-common')
+    implementation project(':xposed-bridge')
+}
+
+
+preBuild.doLast {
+    def imlFile = file(project.name + "".iml"")
+    println 'Change ' + project.name + '.iml order'
+    try {
+        def parsedXml = (new groovy.util.XmlParser()).parse(imlFile)
+        def jdkNode = parsedXml.component[1].orderEntry.find { it.'@type' == 'jdk' }
+        parsedXml.component[1].remove(jdkNode)
+        def sdkString = ""Android API "" + android.compileSdkVersion.substring(""android-"".length()) + "" Platform""
+        new groovy.util.Node(parsedXml.component[1], 'orderEntry', ['type': 'jdk', 'jdkName': sdkString, 'jdkType': 'Android SDK'])
+        groovy.xml.XmlUtil.serialize(parsedXml, new FileOutputStream(imlFile))
+    } catch (FileNotFoundException e) {
+        // nop, iml not found
+    }
+}
+
+afterEvaluate {
+
+    tasks.withType(JavaCompile) {
+        options.compilerArgs.add(""-Xbootclasspath/p:${projectDir.absolutePath}/libs/framework-stub.jar"")
+    }
+
+    android.applicationVariants.all { variant ->
+        def nameCapped = variant.name.capitalize()
+        def nameLowered = variant.name.toLowerCase()
+
+        def makeAndCopyTask = task(""makeAndCopy${nameCapped}"", type: Jar, dependsOn: ""assemble${nameCapped}"") {
+            from ""build/intermediates/dex/${nameLowered}/mergeDex${nameCapped}/out/""
+            destinationDir file(""../edxp-core/template_override/system/framework/"")
+            baseName ""edxp""
+        }
+    }
+}
\ No newline at end of file
diff --git a/edxp-whale/libs/framework-stub.jar b/edxp-whale/libs/framework-stub.jar
new file mode 100644
index 00000000..36cd86b3
Binary files /dev/null and b/edxp-whale/libs/framework-stub.jar differ
diff --git a/edxp-whale/proguard-rules.pro b/edxp-whale/proguard-rules.pro
new file mode 100644
index 00000000..1d01a7a1
--- /dev/null
+++ b/edxp-whale/proguard-rules.pro
@@ -0,0 +1,33 @@
+# Add project specific ProGuard rules here.
+# You can control the set of applied configuration files using the
+# proguardFiles setting in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
+
+# Uncomment this to preserve the line number information for
+# debugging stack traces.
+#-keepattributes SourceFile,LineNumberTable
+
+# If you keep the line number information, uncomment this to
+# hide the original source file name.
+#-renamesourcefileattribute SourceFile
+
+-dontobfuscate
+-keep class de.robv.android.xposed.** {*;}
+-keep class android.** { *; }
+
+-keep interface com.elderdrivers.riru.common.KeepAll
+-keep interface com.elderdrivers.riru.common.KeepMembers
+
+-keep class * implements com.elderdrivers.riru.common.KeepAll { *; }
+-keepclassmembers class * implements com.elderdrivers.riru.common.KeepMembers { *; }
+
+-keep class * com.lody.** {*;}
\ No newline at end of file
diff --git a/edxp-whale/src/main/AndroidManifest.xml b/edxp-whale/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..38b7acf3
--- /dev/null
+++ b/edxp-whale/src/main/AndroidManifest.xml
@@ -0,0 +1 @@
+<manifest package=""com.elderdrivers.riru.edxp.whale"" />
diff --git a/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/Main.java b/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/Main.java
new file mode 100644
index 00000000..33d4939e
--- /dev/null
+++ b/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/Main.java
@@ -0,0 +1,146 @@
+package com.elderdrivers.riru.edxp;
+
+import android.annotation.SuppressLint;
+import android.os.Build;
+import android.os.Process;
+
+import com.elderdrivers.riru.common.KeepAll;
+import com.elderdrivers.riru.edxp.BuildConfig;
+import com.elderdrivers.riru.edxp.config.InstallerChooser;
+import com.elderdrivers.riru.edxp.yahfa.core.HookMethodResolver;
+import com.elderdrivers.riru.edxp.yahfa.entry.Router;
+import com.elderdrivers.riru.edxp.yahfa.proxy.BlackWhiteListProxy;
+import com.elderdrivers.riru.edxp.yahfa.proxy.NormalProxy;
+import com.elderdrivers.riru.edxp.util.Utils;
+import com.lody.whale.WhaleRuntime;
+
+import java.lang.reflect.Method;
+import java.util.Arrays;
+
+@SuppressLint(""DefaultLocale"")
+public class Main implements KeepAll {
+
+    public static String appDataDir = """";
+    public static String niceName = """";
+    public static String appProcessName = """";
+    private static String forkAndSpecializePramsStr = """";
+    private static String forkSystemServerPramsStr = """";
+
+    static {
+        init(Build.VERSION.SDK_INT);
+        HookMethodResolver.init();
+        Router.injectConfig();
+        InstallerChooser.setInstallerPackageName(getInstallerPkgName());
+        try {
+        WhaleRuntime.getMethodSlot(null);
+        } catch (Throwable throwable) {}
+    }
+
+    ///////////////////////////////////////////////////////////////////////////////////////////////
+    // entry points
+    ///////////////////////////////////////////////////////////////////////////////////////////////
+
+    public static void forkAndSpecializePre(int uid, int gid, int[] gids, int debugFlags,
+                                            int[][] rlimits, int mountExternal, String seInfo,
+                                            String niceName, int[] fdsToClose, int[] fdsToIgnore,
+                                            boolean startChildZygote, String instructionSet,
+                                            String appDataDir) {
+        if (BuildConfig.DEBUG) {
+            forkAndSpecializePramsStr = String.format(
+                    ""Zygote#forkAndSpecialize(%d, %d, %s, %d, %s, %d, %s, %s, %s, %s, %s, %s, %s)"",
+                    uid, gid, Arrays.toString(gids), debugFlags, Arrays.toString(rlimits),
+                    mountExternal, seInfo, niceName, Arrays.toString(fdsToClose),
+                    Arrays.toString(fdsToIgnore), startChildZygote, instructionSet, appDataDir);
+        }
+        if (isBlackWhiteListEnabled()) {
+            BlackWhiteListProxy.forkAndSpecializePre(uid, gid, gids, debugFlags, rlimits,
+                    mountExternal, seInfo, niceName, fdsToClose, fdsToIgnore, startChildZygote,
+                    instructionSet, appDataDir);
+        } else {
+            NormalProxy.forkAndSpecializePre(uid, gid, gids, debugFlags, rlimits, mountExternal,
+                    seInfo, niceName, fdsToClose, fdsToIgnore, startChildZygote, instructionSet,
+                    appDataDir);
+        }
+    }
+
+    public static void forkAndSpecializePost(int pid, String appDataDir, String niceName) {
+        if (pid == 0) {
+            Utils.logD(forkAndSpecializePramsStr + "" = "" + Process.myPid());
+            if (isBlackWhiteListEnabled()) {
+                BlackWhiteListProxy.forkAndSpecializePost(pid, appDataDir, niceName);
+            } else {
+                NormalProxy.forkAndSpecializePost(pid, appDataDir, niceName);
+            }
+        } else {
+            // in zygote process, res is child zygote pid
+            // don't print log here, see https://github.com/RikkaApps/Riru/blob/77adfd6a4a6a81bfd20569c910bc4854f2f84f5e/riru-core/jni/main/jni_native_method.cpp#L55-L66
+        }
+    }
+
+    public static void forkSystemServerPre(int uid, int gid, int[] gids, int debugFlags, int[][] rlimits,
+                                           long permittedCapabilities, long effectiveCapabilities) {
+        if (BuildConfig.DEBUG) {
+            forkSystemServerPramsStr = String.format(""Zygote#forkSystemServer(%d, %d, %s, %d, %s, %d, %d)"",
+                    uid, gid, Arrays.toString(gids), debugFlags, Arrays.toString(rlimits),
+                    permittedCapabilities, effectiveCapabilities);
+        }
+        if (isBlackWhiteListEnabled()) {
+            BlackWhiteListProxy.forkSystemServerPre(uid, gid, gids, debugFlags, rlimits,
+                    permittedCapabilities, effectiveCapabilities);
+        } else {
+            NormalProxy.forkSystemServerPre(uid, gid, gids, debugFlags, rlimits,
+                    permittedCapabilities, effectiveCapabilities);
+        }
+    }
+
+    public static void forkSystemServerPost(int pid) {
+        if (pid == 0) {
+            Utils.logD(forkSystemServerPramsStr + "" = "" + Process.myPid());
+            if (isBlackWhiteListEnabled()) {
+                BlackWhiteListProxy.forkSystemServerPost(pid);
+            } else {
+                NormalProxy.forkSystemServerPost(pid);
+            }
+        } else {
+            // in zygote process, res is child zygote pid
+            // don't print log here, see https://github.com/RikkaApps/Riru/blob/77adfd6a4a6a81bfd20569c910bc4854f2f84f5e/riru-core/jni/main/jni_native_method.cpp#L55-L66
+        }
+    }
+
+    ///////////////////////////////////////////////////////////////////////////////////////////////
+    // native methods
+    ///////////////////////////////////////////////////////////////////////////////////////////////
+
+    public static native boolean backupAndHookNative(Object target, Method hook, Method backup);
+
+    public static native void setMethodNonCompilable(Object member);
+
+    public static native void ensureMethodCached(Method hook, Method backup);
+
+    // JNI.ToReflectedMethod() could return either Method or Constructor
+    public static native Object findMethodNative(Class targetClass, String methodName, String methodSig);
+
+    private static native void init(int SDK_version);
+
+    public static native String getInstallerPkgName();
+
+    public static native boolean isBlackWhiteListEnabled();
+
+    public static native boolean isDynamicModulesEnabled();
+
+    public static native boolean isAppNeedHook(String appDataDir);
+
+    // prevent from fatal error caused by holding not whitelisted file descriptors when forking zygote
+    // https://github.com/rovo89/Xposed/commit/b3ba245ad04cd485699fb1d2ebde7117e58214ff
+    public static native void closeFilesBeforeForkNative();
+
+    public static native void reopenFilesAfterForkNative();
+
+    public static native void deoptMethodNative(Object object);
+
+    public static native long suspendAllThreads();
+
+    public static native void resumeAllThreads(long obj);
+
+    public static native int waitForGcToComplete(long thread);
+}
diff --git a/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/yahfa/config/WhaleEdxpConfig.java b/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/yahfa/config/WhaleEdxpConfig.java
new file mode 100644
index 00000000..60f364bd
--- /dev/null
+++ b/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/yahfa/config/WhaleEdxpConfig.java
@@ -0,0 +1,23 @@
+package com.elderdrivers.riru.edxp.yahfa.config;
+
+import com.elderdrivers.riru.edxp.config.EdXpConfig;
+import com.elderdrivers.riru.edxp.config.InstallerChooser;
+import com.elderdrivers.riru.edxp.Main;
+import com.elderdrivers.riru.edxp.yahfa.entry.hooker.XposedBlackListHooker;
+
+public class WhaleEdxpConfig implements EdXpConfig {
+    @Override
+    public String getInstallerBaseDir() {
+        return InstallerChooser.INSTALLER_DATA_BASE_DIR;
+    }
+
+    @Override
+    public String getBlackListModulePackageName() {
+        return XposedBlackListHooker.BLACK_LIST_PACKAGE_NAME;
+    }
+
+    @Override
+    public boolean isDynamicModulesMode() {
+        return Main.isDynamicModulesEnabled();
+    }
+}
diff --git a/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/yahfa/config/WhaleHookProvider.java b/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/yahfa/config/WhaleHookProvider.java
new file mode 100644
index 00000000..cb94160b
--- /dev/null
+++ b/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/yahfa/config/WhaleHookProvider.java
@@ -0,0 +1,37 @@
+package com.elderdrivers.riru.edxp.yahfa.config;
+
+import com.elderdrivers.riru.edxp.hook.HookProvider;
+import com.elderdrivers.riru.edxp.yahfa.util.PrebuiltMethodsDeopter;
+import com.lody.whale.WhaleRuntime;
+
+import java.lang.reflect.Member;
+
+import de.robv.android.xposed.XposedBridge;
+
+public class WhaleHookProvider implements HookProvider {
+
+    @Override
+    public void hookMethod(Member method, XposedBridge.AdditionalHookInfo additionalInfo) {
+        WhaleRuntime.hookMethodNative(method.getDeclaringClass(), method, additionalInfo);
+    }
+
+    @Override
+    public Object invokeOriginalMethod(Member method, long methodId, Object thisObject, Object[] args) throws Throwable {
+        return WhaleRuntime.invokeOriginalMethodNative(methodId, thisObject, args);
+    }
+
+    @Override
+    public Member findMethodNative(Member hookMethod) {
+        return hookMethod;
+    }
+
+    @Override
+    public void deoptMethods(String packageName, ClassLoader classLoader) {
+        PrebuiltMethodsDeopter.deoptMethods(packageName, classLoader);
+    }
+
+    @Override
+    public long getMethodId(Member member) {
+        return WhaleRuntime.getMethodSlot(member);
+    }
+}
diff --git a/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/yahfa/core/HookMain.java b/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/yahfa/core/HookMain.java
new file mode 100644
index 00000000..13da190a
--- /dev/null
+++ b/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/yahfa/core/HookMain.java
@@ -0,0 +1,186 @@
+package com.elderdrivers.riru.edxp.yahfa.core;
+
+import com.elderdrivers.riru.edxp.Main;
+import com.elderdrivers.riru.edxp.yahfa.entry.hooker.OnePlusWorkAroundHooker;
+import com.elderdrivers.riru.edxp.util.Utils;
+
+import java.lang.reflect.Constructor;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.Set;
+
+import de.robv.android.xposed.XposedHelpers;
+
+import static com.elderdrivers.riru.edxp.Main.backupAndHookNative;
+import static com.elderdrivers.riru.edxp.Main.findMethodNative;
+
+public class HookMain {
+
+    private static Set<String> hookItemWhiteList = Collections.singleton(OnePlusWorkAroundHooker.class.getName());
+
+    public static void doHookDefault(ClassLoader patchClassLoader, ClassLoader originClassLoader, String hookInfoClassName) {
+        try {
+            Class<?> hookInfoClass = Class.forName(hookInfoClassName, true, patchClassLoader);
+            String[] hookItemNames = (String[]) hookInfoClass.getField(""hookItemNames"").get(null);
+            for (String hookItemName : hookItemNames) {
+                doHookItemDefault(patchClassLoader, hookItemName, originClassLoader);
+            }
+        } catch (Throwable e) {
+            Utils.logE(""error when hooking all in: "" + hookInfoClassName, e);
+        }
+    }
+
+    private static void doHookItemDefault(ClassLoader patchClassLoader, String hookItemName, ClassLoader originClassLoader) {
+        try {
+            Utils.logD(""Start hooking with item "" + hookItemName);
+            Class<?> hookItem = Class.forName(hookItemName, true, patchClassLoader);
+
+            String className = (String) hookItem.getField(""className"").get(null);
+            String methodName = (String) hookItem.getField(""methodName"").get(null);
+            String methodSig = (String) hookItem.getField(""methodSig"").get(null);
+
+            if (className == null || className.equals("""")) {
+                Utils.logW(""No target class. Skipping..."");
+                return;
+            }
+            Class<?> clazz = null;
+            try {
+                clazz = Class.forName(className, true, originClassLoader);
+            } catch (ClassNotFoundException cnfe) {
+                Utils.logE(className + "" not found in "" + originClassLoader);
+                return;
+            }
+            if (Modifier.isAbstract(clazz.getModifiers())) {
+                Utils.logW(""Hook may fail for abstract class: "" + className);
+            }
+
+            Method hook = null;
+            Method backup = null;
+            for (Method method : hookItem.getDeclaredMethods()) {
+                if (method.getName().equals(""hook"") && Modifier.isStatic(method.getModifiers())) {
+                    hook = method;
+                } else if (method.getName().equals(""backup"") && Modifier.isStatic(method.getModifiers())) {
+                    backup = method;
+                }
+            }
+            if (hook == null) {
+                Utils.logE(""Cannot find hook for "" + methodName);
+                return;
+            }
+            findAndBackupAndHook(clazz, methodName, methodSig, hook, backup);
+        } catch (Throwable e) {
+            if (!hookItemWhiteList.contains(hookItemName)) {
+                Utils.logE(""error when hooking "" + hookItemName, e);
+            }
+        }
+    }
+
+    public static void findAndHook(Class targetClass, String methodName, String methodSig, Method hook) {
+        hook(findMethod(targetClass, methodName, methodSig), hook);
+    }
+
+    public static void findAndBackupAndHook(Class targetClass, String methodName, String methodSig,
+                                            Method hook, Method backup) {
+        backupAndHook(findMethod(targetClass, methodName, methodSig), hook, backup);
+    }
+
+    public static void hook(Object target, Method hook) {
+        backupAndHook(target, hook, null);
+    }
+
+    public static void backupAndHook(Object target, Method hook, Method backup) {
+        Utils.logD(String.format(""target=%s, hook=%s, backup=%s"", target, hook, backup));
+        if (target == null) {
+            throw new IllegalArgumentException(""null target method"");
+        }
+        if (hook == null) {
+            throw new IllegalArgumentException(""null hook method"");
+        }
+
+        if (!Modifier.isStatic(hook.getModifiers())) {
+            throw new IllegalArgumentException(""Hook must be a static method: "" + hook);
+        }
+        checkCompatibleMethods(target, hook, ""Original"", ""Hook"");
+        if (backup != null) {
+            if (!Modifier.isStatic(backup.getModifiers())) {
+                throw new IllegalArgumentException(""Backup must be a static method: "" + backup);
+            }
+            // backup is just a placeholder and the constraint could be less strict
+            checkCompatibleMethods(target, backup, ""Original"", ""Backup"");
+        }
+        if (backup != null) {
+            HookMethodResolver.resolveMethod(hook, backup);
+        }
+        // make sure GC completed before hook
+        Thread currentThread = Thread.currentThread();
+        int lastGcType = Main.waitForGcToComplete(
+                XposedHelpers.getLongField(currentThread, ""nativePeer""));
+        if (lastGcType < 0) {
+            Utils.logW(""waitForGcToComplete failed, using fallback"");
+            Runtime.getRuntime().gc();
+        }
+        if (!backupAndHookNative(target, hook, backup)) {
+            throw new RuntimeException(""Failed to hook "" + target + "" with "" + hook);
+        }
+    }
+
+    public static Object findMethod(Class cls, String methodName, String methodSig) {
+        if (cls == null) {
+            throw new IllegalArgumentException(""null class"");
+        }
+        if (methodName == null) {
+            throw new IllegalArgumentException(""null method name"");
+        }
+        if (methodSig == null) {
+            throw new IllegalArgumentException(""null method signature"");
+        }
+        return findMethodNative(cls, methodName, methodSig);
+    }
+
+    private static void checkCompatibleMethods(Object original, Method replacement, String originalName, String replacementName) {
+        ArrayList<Class<?>> originalParams;
+        if (original instanceof Method) {
+            originalParams = new ArrayList<>(Arrays.asList(((Method) original).getParameterTypes()));
+        } else if (original instanceof Constructor) {
+            originalParams = new ArrayList<>(Arrays.asList(((Constructor<?>) original).getParameterTypes()));
+        } else",Try debug CI test failure,1
"diff --git a/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistry.java b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistry.java
index 5368b56b0e1..e7287278cae 100644
--- a/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistry.java
+++ b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/ServiceDiscoveryRegistry.java
@@ -76,6 +76,7 @@
 import static org.apache.dubbo.common.utils.CollectionUtils.isEmpty;
 import static org.apache.dubbo.common.utils.CollectionUtils.isEmptyMap;
 import static org.apache.dubbo.common.utils.CollectionUtils.isNotEmpty;
+import static org.apache.dubbo.common.utils.DubboServiceLoader.loadServices;
 import static org.apache.dubbo.common.utils.StringUtils.isBlank;
 import static org.apache.dubbo.metadata.WritableMetadataService.DEFAULT_EXTENSION;
 import static org.apache.dubbo.registry.client.ServiceDiscoveryFactory.getExtension;
@@ -399,7 +400,7 @@ private List<URL> getExportedURLs(URL subscribedURL, Collection<ServiceInstance>
         if (ServiceInstanceMetadataUtils.isDubboServiceInstance(serviceInstances.get(0))) {
             initTemplateURLs(subscribedURL, serviceInstances);
             // Clone the subscribed URLs from the template URLs
-            subscribedURLs = cloneSubscribedURLs(subscribedURL, serviceInstances);
+            subscribedURLs = cloneExportedURLs(subscribedURL, serviceInstances);
         } else {
             for (ServiceInstance instance : serviceInstances) {
                 URLBuilder builder = new URLBuilder(",generate urls directly for non-dubbo service instances.,1
"diff --git a/checkstyle.xml b/checkstyle.xml
index de5302db00..1ab50fb729 100644
--- a/checkstyle.xml
+++ b/checkstyle.xml
@@ -119,5 +119,8 @@
         <!--module name=""FinalParameters""/-->
         <!--module name=""TodoComment""/-->
         <module name=""UpperEll""/>
+        <module name=""Indentation"">
+          <property name=""basicOffset"" value=""2""/>
+        </module>
     </module>
 </module>",Added a checkstyle rule for the line indentation <enter>  <enter> Change-Id: I94d7404cb05c192021a6f737ffa6cf8c3fe9a3fa <enter> Signed-off-by: Simon Scholz <simon.scholz@vogella.com>,1